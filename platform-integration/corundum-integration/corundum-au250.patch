diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/common/vivado.mk ./fpga/mqnic/AU250/fpga_100g/common/vivado.mk
--- ./fpga-raw/mqnic/AU250/fpga_100g/common/vivado.mk	2022-01-31 13:09:10.772702491 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/common/vivado.mk	1970-01-01 08:00:00.000000000 +0800
@@ -1,123 +0,0 @@
-###################################################################
-# 
-# Xilinx Vivado FPGA Makefile
-# 
-# Copyright (c) 2016 Alex Forencich
-# 
-###################################################################
-# 
-# Parameters:
-# FPGA_TOP - Top module name
-# FPGA_FAMILY - FPGA family (e.g. VirtexUltrascale)
-# FPGA_DEVICE - FPGA device (e.g. xcvu095-ffva2104-2-e)
-# SYN_FILES - space-separated list of source files
-# INC_FILES - space-separated list of include files
-# XDC_FILES - space-separated list of timing constraint files
-# XCI_FILES - space-separated list of IP XCI files
-# 
-# Example:
-# 
-# FPGA_TOP = fpga
-# FPGA_FAMILY = VirtexUltrascale
-# FPGA_DEVICE = xcvu095-ffva2104-2-e
-# SYN_FILES = rtl/fpga.v
-# XDC_FILES = fpga.xdc
-# XCI_FILES = ip/pcspma.xci
-# include ../common/vivado.mk
-# 
-###################################################################
-
-# phony targets
-.PHONY: clean fpga
-
-# prevent make from deleting intermediate files and reports
-.PRECIOUS: %.xpr %.bit %.mcs %.prm
-.SECONDARY:
-
-CONFIG ?= config.mk
--include ../$(CONFIG)
-
-SYN_FILES_REL = $(patsubst %, ../%, $(SYN_FILES))
-INC_FILES_REL = $(patsubst %, ../%, $(INC_FILES))
-XCI_FILES_REL = $(patsubst %, ../%, $(XCI_FILES))
-IP_TCL_FILES_REL = $(patsubst %, ../%, $(IP_TCL_FILES))
-
-ifdef XDC_FILES
-  XDC_FILES_REL = $(patsubst %, ../%, $(XDC_FILES))
-else
-  XDC_FILES_REL = $(FPGA_TOP).xdc
-endif
-
-###################################################################
-# Main Targets
-#
-# all: build everything
-# clean: remove output files and project files
-###################################################################
-
-all: fpga
-
-fpga: $(FPGA_TOP).bit
-
-vivado: $(FPGA_TOP).xpr
-	vivado $(FPGA_TOP).xpr
-
-tmpclean:
-	-rm -rf *.log *.jou *.cache *.hbs *.hw *.ip_user_files *.runs *.xpr *.html *.xml *.sim *.srcs *.str .Xil defines.v
-	-rm -rf create_project.tcl run_synth.tcl run_impl.tcl generate_bit.tcl
-
-clean: tmpclean
-	-rm -rf *.bit program.tcl generate_mcs.tcl *.mcs *.prm flash.tcl
-
-distclean: clean
-	-rm -rf rev
-
-###################################################################
-# Target implementations
-###################################################################
-
-# Vivado project file
-%.xpr: Makefile $(XCI_FILES_REL) $(IP_TCL_FILES_REL)
-	rm -rf defines.v
-	touch defines.v
-	for x in $(DEFS); do echo '`define' $$x >> defines.v; done
-	echo "create_project -force -part $(FPGA_PART) $*" > create_project.tcl
-	echo "add_files -fileset sources_1 defines.v" >> create_project.tcl
-	for x in $(SYN_FILES_REL); do echo "add_files -fileset sources_1 $$x" >> create_project.tcl; done
-	for x in $(XDC_FILES_REL); do echo "add_files -fileset constrs_1 $$x" >> create_project.tcl; done
-	for x in $(XCI_FILES_REL); do echo "import_ip $$x" >> create_project.tcl; done
-	for x in $(IP_TCL_FILES_REL); do echo "source $$x" >> create_project.tcl; done
-	echo "exit" >> create_project.tcl
-	vivado -nojournal -nolog -mode batch -source create_project.tcl
-
-# synthesis run
-%.runs/synth_1/%.dcp: %.xpr $(SYN_FILES_REL) $(INC_FILES_REL) $(XDC_FILES_REL)
-	echo "open_project $*.xpr" > run_synth.tcl
-	echo "reset_run synth_1" >> run_synth.tcl
-	echo "launch_runs synth_1" >> run_synth.tcl
-	echo "wait_on_run synth_1" >> run_synth.tcl
-	echo "exit" >> run_synth.tcl
-	vivado -nojournal -nolog -mode batch -source run_synth.tcl
-
-# implementation run
-%.runs/impl_1/%_routed.dcp: %.runs/synth_1/%.dcp
-	echo "open_project $*.xpr" > run_impl.tcl
-	echo "reset_run impl_1" >> run_impl.tcl
-	echo "launch_runs impl_1" >> run_impl.tcl
-	echo "wait_on_run impl_1" >> run_impl.tcl
-	echo "exit" >> run_impl.tcl
-	vivado -nojournal -nolog -mode batch -source run_impl.tcl
-
-# bit file
-%.bit: %.runs/impl_1/%_routed.dcp
-	echo "open_project $*.xpr" > generate_bit.tcl
-	echo "open_run impl_1" >> generate_bit.tcl
-	echo "write_bitstream -force $*.bit" >> generate_bit.tcl
-	echo "exit" >> generate_bit.tcl
-	vivado -nojournal -nolog -mode batch -source generate_bit.tcl
-	mkdir -p rev
-	EXT=bit; COUNT=100; \
-	while [ -e rev/$*_rev$$COUNT.$$EXT ]; \
-	do COUNT=$$((COUNT+1)); done; \
-	cp $@ rev/$*_rev$$COUNT.$$EXT; \
-	echo "Output: rev/$*_rev$$COUNT.$$EXT";
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/fpga/Makefile ./fpga/mqnic/AU250/fpga_100g/fpga/Makefile
--- ./fpga-raw/mqnic/AU250/fpga_100g/fpga/Makefile	2022-01-31 13:09:10.772702491 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/fpga/Makefile	2022-01-31 13:02:15.010256655 +0800
@@ -6,11 +6,22 @@
 
 # Files for synthesis
 SYN_FILES = rtl/fpga.v
-SYN_FILES += rtl/fpga_core.v
+
+#replace rtl/fpga_core.v
+#SYN_FILES += rtl/fpga_core.v
+SYN_FILES += rtl/one_in_one_out/fpga_core.v
+
 SYN_FILES += rtl/debounce_switch.v
 SYN_FILES += rtl/sync_signal.v
-SYN_FILES += rtl/common/interface.v
-SYN_FILES += rtl/common/port.v
+
+#replace rtl/common/interface.v
+#SYN_FILES += rtl/common/interface.v
+SYN_FILES += rtl/one_in_one_out/interface.v
+
+#replace rtl/common/port.v with 
+#SYN_FILES += rtl/common/port.v
+SYN_FILES += rtl/one_in_one_out/port.v
+
 SYN_FILES += rtl/common/cpl_write.v
 SYN_FILES += rtl/common/cpl_op_mux.v
 SYN_FILES += rtl/common/desc_fetch.v
@@ -52,6 +63,23 @@
 SYN_FILES += lib/pcie/rtl/pcie_tag_manager.v
 SYN_FILES += lib/pcie/rtl/pulse_merge.v
 
+# RMT-related rtl files
+SYN_FILES += lib_rmt/rmtv2/deparser.v
+SYN_FILES += lib_rmt/rmtv2/sub_deparser.v
+SYN_FILES += lib_rmt/rmtv2/parser.v
+SYN_FILES += lib_rmt/rmtv2/sub_parser.v
+SYN_FILES += lib_rmt/rmtv2/rmt_wrapper.v
+SYN_FILES += lib_rmt/rmtv2/stage.v
+SYN_FILES += lib_rmt/rmtv2/extract/key_extract_2.v
+SYN_FILES += lib_rmt/rmtv2/lookup/lookup_engine.v
+SYN_FILES += lib_rmt/rmtv2/action/action_engine.v
+SYN_FILES += lib_rmt/rmtv2/action/alu_1.v
+SYN_FILES += lib_rmt/rmtv2/action/alu_2.v
+SYN_FILES += lib_rmt/rmtv2/action/alu_3.v
+SYN_FILES += lib_rmt/rmtv2/action/crossbar.v
+SYN_FILES += lib_rmt/rmtv2/pkt_filter.v
+
+
 # XDC files
 XDC_FILES = fpga.xdc
 XDC_FILES += boot.xdc
@@ -64,6 +92,19 @@
 IP_TCL_FILES = ip/pcie4_uscale_plus_0.tcl
 IP_TCL_FILES += ip/cmac_usplus_0.tcl
 IP_TCL_FILES += ip/cmac_usplus_1.tcl
+IP_TCL_FILES += ip/clk_wiz_0.tcl
+
+# IPs for RMT pipeline
+IP_TCL_FILES += ip/rmt/blk_mem_gen_0.tcl
+IP_TCL_FILES += ip/rmt/blk_mem_gen_1.tcl
+IP_TCL_FILES += ip/rmt/blk_mem_gen_2.tcl
+IP_TCL_FILES += ip/rmt/blk_mem_gen_3.tcl
+IP_TCL_FILES += ip/rmt/fifo_generator_512b.tcl
+IP_TCL_FILES += ip/rmt/fifo_generator_612b.tcl
+IP_TCL_FILES += ip/rmt/fifo_generator_705b.tcl
+IP_TCL_FILES += ip/rmt/parse_act_ram_ip.tcl
+IP_TCL_FILES += ip/rmt/tcam_generator.tcl
+
 
 include ../common/vivado.mk
 
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/fpga.xdc ./fpga/mqnic/AU250/fpga_100g/fpga.xdc
--- ./fpga-raw/mqnic/AU250/fpga_100g/fpga.xdc	2022-01-31 13:09:10.768702506 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/fpga.xdc	2022-01-31 13:02:15.010256655 +0800
@@ -211,4 +211,10 @@
 # 100 MHz MGT reference clock
 create_clock -period 10 -name pcie_mgt_refclk_1 [get_ports pcie_refclk_p]
 
+# create_pblock pblock_slr1
+# add_cells_to_pblock [get_pblocks pblock_slr1] [get_cells -quiet [list pcie4_uscale_plus_inst/inst/pcie_4_0_pipe_inst core_inst/dma_if_pcie_us_inst core_inst/dma_if_pcie_us_inst core_inst/iface[0].interface_inst core_inst/iface[1].interface_inst]]
+# # #add_cells_to_pblock [get_pblocks pblock_slr1] [get_cells -quiet [list core_inst/dma_if_mux_inst core_inst/dma_if_pcie_us_inst {core_inst/iface[0].interface_inst} {core_inst/iface[1].interface_inst} pcie4_uscale_plus_inst]]
+# # #add_cells_to_pblock [get_pblocks pblock_slr1] [get_cells -quiet [list core_inst/iface[0] core_inst/iface[1] core_inst/pcie_us_cfg_inst]]
+# # add_cells_to_pblock [get_pblocks pblock_slr1] [get_cells -quiet [list  core_inst/iface[1]  ]]
+# resize_pblock [get_pblocks pblock_slr1] -add {SLR1}
 
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/ip/rmt/blk_mem_gen_0.tcl ./fpga/mqnic/AU250/fpga_100g/ip/rmt/blk_mem_gen_0.tcl
--- ./fpga-raw/mqnic/AU250/fpga_100g/ip/rmt/blk_mem_gen_0.tcl	1970-01-01 08:00:00.000000000 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/ip/rmt/blk_mem_gen_0.tcl	2022-01-31 13:02:15.010256655 +0800
@@ -0,0 +1,22 @@
+create_ip -name blk_mem_gen -vendor xilinx.com -library ip -version 8.4 -module_name blk_mem_gen_0
+
+set_property -dict [list \
+	CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
+	CONFIG.Load_Init_File {true} \
+	CONFIG.Coe_File {/../../../../../../lib_rmt/rmtv2/memory_init_files/alu_2.coe} \
+	CONFIG.Write_Depth_A {32} \
+	CONFIG.Write_Width_A {32} \
+	CONFIG.Read_Width_A {32} \
+	CONFIG.Operating_Mode_A {NO_CHANGE} \
+	CONFIG.Write_Width_B {32} \
+	CONFIG.Read_Width_B {32} \
+	CONFIG.Enable_B {Use_ENB_Pin} \
+	CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
+	CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
+	CONFIG.Port_B_Clock {100} \
+	CONFIG.Port_B_Enable_Rate {100} \
+] [get_ips blk_mem_gen_0]
+
+set_property generate_synth_checkpoint false [get_files blk_mem_gen_0.xci]
+reset_target all [get_ips blk_mem_gen_0]
+generate_target all [get_ips blk_mem_gen_0]
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/ip/rmt/blk_mem_gen_1.tcl ./fpga/mqnic/AU250/fpga_100g/ip/rmt/blk_mem_gen_1.tcl
--- ./fpga-raw/mqnic/AU250/fpga_100g/ip/rmt/blk_mem_gen_1.tcl	1970-01-01 08:00:00.000000000 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/ip/rmt/blk_mem_gen_1.tcl	2022-01-31 13:02:15.010256655 +0800
@@ -0,0 +1,21 @@
+create_ip -name blk_mem_gen -vendor xilinx.com -library ip -version 8.4 -module_name blk_mem_gen_1
+set_property -dict [list \
+	CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
+	CONFIG.Load_Init_File {true} \
+	CONFIG.Coe_File {/../../../../../../lib_rmt/rmtv2/memory_init_files/lkup.coe} \
+	CONFIG.Write_Depth_A {16} \
+	CONFIG.Write_Width_A {625} \
+	CONFIG.Read_Width_A {625} \
+	CONFIG.Operating_Mode_A {NO_CHANGE} \
+	CONFIG.Write_Width_B {625} \
+	CONFIG.Read_Width_B {625} \
+	CONFIG.Enable_B {Use_ENB_Pin} \
+	CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
+	CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
+	CONFIG.Port_B_Clock {100} \
+	CONFIG.Port_B_Enable_Rate {100} \
+] [get_ips blk_mem_gen_1]
+
+set_property generate_synth_checkpoint false [get_files blk_mem_gen_1.xci]
+reset_target all [get_ips blk_mem_gen_1]
+generate_target all [get_ips blk_mem_gen_1]
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/ip/rmt/blk_mem_gen_2.tcl ./fpga/mqnic/AU250/fpga_100g/ip/rmt/blk_mem_gen_2.tcl
--- ./fpga-raw/mqnic/AU250/fpga_100g/ip/rmt/blk_mem_gen_2.tcl	1970-01-01 08:00:00.000000000 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/ip/rmt/blk_mem_gen_2.tcl	2022-01-31 13:02:15.010256655 +0800
@@ -0,0 +1,22 @@
+create_ip -name blk_mem_gen -vendor xilinx.com -library ip -version 8.4 -module_name blk_mem_gen_2
+
+set_property -dict [list \
+	CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
+	CONFIG.Load_Init_File {true} \
+	CONFIG.Coe_File {/../../../../../../lib_rmt/rmtv2/memory_init_files/key_extract.coe} \
+	CONFIG.Write_Depth_A {32} \
+	CONFIG.Write_Width_A {38} \
+	CONFIG.Read_Width_A {38} \
+	CONFIG.Operating_Mode_A {NO_CHANGE} \
+	CONFIG.Write_Width_B {38} \
+	CONFIG.Read_Width_B {38} \
+	CONFIG.Enable_B {Use_ENB_Pin} \
+	CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
+	CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
+	CONFIG.Port_B_Clock {100} \
+	CONFIG.Port_B_Enable_Rate {100} \
+] [get_ips blk_mem_gen_2]
+
+set_property generate_synth_checkpoint false [get_files blk_mem_gen_2.xci]
+reset_target all [get_ips blk_mem_gen_2]
+generate_target all [get_ips blk_mem_gen_2]
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/ip/rmt/blk_mem_gen_3.tcl ./fpga/mqnic/AU250/fpga_100g/ip/rmt/blk_mem_gen_3.tcl
--- ./fpga-raw/mqnic/AU250/fpga_100g/ip/rmt/blk_mem_gen_3.tcl	1970-01-01 08:00:00.000000000 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/ip/rmt/blk_mem_gen_3.tcl	2022-01-31 13:02:15.010256655 +0800
@@ -0,0 +1,22 @@
+create_ip -name blk_mem_gen -vendor xilinx.com -library ip -version 8.4 -module_name blk_mem_gen_3
+
+set_property -dict [list \
+	CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
+	CONFIG.Load_Init_File {true} \
+	CONFIG.Coe_File {/../../../../../../lib_rmt/rmtv2/memory_init_files/key_mask.coe} \
+	CONFIG.Write_Depth_A {32} \
+	CONFIG.Write_Width_A {193} \
+	CONFIG.Read_Width_A {193} \
+	CONFIG.Operating_Mode_A {NO_CHANGE} \
+	CONFIG.Write_Width_B {193} \
+	CONFIG.Read_Width_B {193} \
+	CONFIG.Enable_B {Use_ENB_Pin} \
+	CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
+	CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
+	CONFIG.Port_B_Clock {100} \
+	CONFIG.Port_B_Enable_Rate {100} \
+] [get_ips blk_mem_gen_3]
+
+set_property generate_synth_checkpoint false [get_files blk_mem_gen_3.xci]
+reset_target all [get_ips blk_mem_gen_3]
+generate_target all [get_ips blk_mem_gen_3]
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/ip/rmt/fifo_generator_512b.tcl ./fpga/mqnic/AU250/fpga_100g/ip/rmt/fifo_generator_512b.tcl
--- ./fpga-raw/mqnic/AU250/fpga_100g/ip/rmt/fifo_generator_512b.tcl	1970-01-01 08:00:00.000000000 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/ip/rmt/fifo_generator_512b.tcl	2022-01-31 13:02:15.010256655 +0800
@@ -0,0 +1,16 @@
+create_ip -name fifo_generator -vendor xilinx.com -library ip -version 13.2 -module_name fifo_generator_512b
+
+set_property -dict [list \
+    CONFIG.Performance_Options {First_Word_Fall_Through} \
+    CONFIG.Input_Data_Width {512} \
+    CONFIG.Input_Depth {512} \
+    CONFIG.Output_Data_Width {512} \
+    CONFIG.Output_Depth {512} \
+    CONFIG.Data_Count_Width {9} \
+    CONFIG.Write_Data_Count_Width {9} \
+    CONFIG.Read_Data_Count_Width {9} \
+    CONFIG.Full_Threshold_Assert_Value {511} \
+    CONFIG.Full_Threshold_Negate_Value {510} \
+    CONFIG.Empty_Threshold_Assert_Value {4} \
+    CONFIG.Empty_Threshold_Negate_Value {5}\
+] [get_ips fifo_generator_512b]
\ No newline at end of file
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/ip/rmt/fifo_generator_705b.tcl ./fpga/mqnic/AU250/fpga_100g/ip/rmt/fifo_generator_705b.tcl
--- ./fpga-raw/mqnic/AU250/fpga_100g/ip/rmt/fifo_generator_705b.tcl	1970-01-01 08:00:00.000000000 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/ip/rmt/fifo_generator_705b.tcl	2022-01-31 13:02:15.010256655 +0800
@@ -0,0 +1,17 @@
+
+create_ip -name fifo_generator -vendor xilinx.com -library ip -version 13.2 -module_name fifo_generator_705b
+
+set_property -dict [list \
+    CONFIG.Performance_Options {First_Word_Fall_Through} \
+    CONFIG.Input_Data_Width {705} \
+    CONFIG.Input_Depth {512} \
+    CONFIG.Output_Data_Width {705} \
+    CONFIG.Output_Depth {512} \
+    CONFIG.Data_Count_Width {9} \
+    CONFIG.Write_Data_Count_Width {9} \
+    CONFIG.Read_Data_Count_Width {9} \
+    CONFIG.Full_Threshold_Assert_Value {511} \
+    CONFIG.Full_Threshold_Negate_Value {510} \
+    CONFIG.Empty_Threshold_Assert_Value {4} \
+    CONFIG.Empty_Threshold_Negate_Value {5}\
+] [get_ips fifo_generator_705b]
\ No newline at end of file
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/ip/rmt/fifo.tcl ./fpga/mqnic/AU250/fpga_100g/ip/rmt/fifo.tcl
--- ./fpga-raw/mqnic/AU250/fpga_100g/ip/rmt/fifo.tcl	1970-01-01 08:00:00.000000000 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/ip/rmt/fifo.tcl	2022-01-31 13:05:51.749445720 +0800
@@ -0,0 +1,12 @@
+set public_repo_dir $::env(LIB_RMT_PATH)/netfpga_fifo/
+
+set_property ip_repo_paths ${public_repo_dir} [current_fileset]
+update_ip_catalog
+
+# dummy ip to include NetFPGA fallthrough_small_fifo
+create_ip -name input_arbiter -vendor NetFPGA -library NetFPGA -module_name input_arbiter_ip
+set_property generate_synth_checkpoint false [get_files input_arbiter_ip.xci]
+reset_target all [get_ips input_arbiter_ip]
+generate_target all [get_ips input_arbiter_ip]
+
+update_ip_catalog
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/ip/rmt/page_tbl_16w_32d.tcl ./fpga/mqnic/AU250/fpga_100g/ip/rmt/page_tbl_16w_32d.tcl
--- ./fpga-raw/mqnic/AU250/fpga_100g/ip/rmt/page_tbl_16w_32d.tcl	1970-01-01 08:00:00.000000000 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/ip/rmt/page_tbl_16w_32d.tcl	2022-01-31 13:02:15.010256655 +0800
@@ -0,0 +1,22 @@
+create_ip -name blk_mem_gen -vendor xilinx.com -library ip -version 8.4 -module_name page_tbl_16w_32d
+
+set_property -dict [list \
+	CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
+	CONFIG.Load_Init_File {true} \
+	CONFIG.Coe_File {/../../../../../../lib_rmt/rmtv2/memory_init_files/page_tlb.coe} \
+	CONFIG.Write_Depth_A {32} \
+	CONFIG.Write_Width_A {16} \
+	CONFIG.Read_Width_A {16} \
+	CONFIG.Operating_Mode_A {NO_CHANGE} \
+	CONFIG.Write_Width_B {16} \
+	CONFIG.Read_Width_B {16} \
+	CONFIG.Enable_B {Use_ENB_Pin} \
+	CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
+	CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
+	CONFIG.Port_B_Clock {100} \
+	CONFIG.Port_B_Enable_Rate {100} \
+] [get_ips page_tbl_16w_32d]
+
+set_property generate_synth_checkpoint false [get_files page_tbl_16w_32d.xci]
+reset_target all [get_ips page_tbl_16w_32d]
+generate_target all [get_ips page_tbl_16w_32d]
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/ip/rmt/parse_act_ram_ip.tcl ./fpga/mqnic/AU250/fpga_100g/ip/rmt/parse_act_ram_ip.tcl
--- ./fpga-raw/mqnic/AU250/fpga_100g/ip/rmt/parse_act_ram_ip.tcl	1970-01-01 08:00:00.000000000 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/ip/rmt/parse_act_ram_ip.tcl	2022-01-31 13:02:15.010256655 +0800
@@ -0,0 +1,22 @@
+create_ip -name blk_mem_gen -vendor xilinx.com -library ip -version 8.4 -module_name parse_act_ram_ip
+
+set_property -dict [list \
+	CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
+	CONFIG.Load_Init_File {true} \
+	CONFIG.Coe_File {/../../../../../../lib_rmt/rmtv2/memory_init_files/parse_act_ram_init_file.coe} \
+	CONFIG.Write_Depth_A {32} \
+	CONFIG.Write_Width_A {160} \
+	CONFIG.Read_Width_A {160} \
+	CONFIG.Operating_Mode_A {NO_CHANGE} \
+	CONFIG.Write_Width_B {160} \
+	CONFIG.Read_Width_B {160} \
+	CONFIG.Enable_B {Use_ENB_Pin} \
+	CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
+	CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
+	CONFIG.Port_B_Clock {100} \
+	CONFIG.Port_B_Enable_Rate {100} \
+] [get_ips parse_act_ram_ip]
+
+set_property generate_synth_checkpoint false [get_files parse_act_ram_ip.xci]
+reset_target all [get_ips parse_act_ram_ip]
+generate_target all [get_ips parse_act_ram_ip]
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/ip/rmt/tcam_generator.tcl ./fpga/mqnic/AU250/fpga_100g/ip/rmt/tcam_generator.tcl
--- ./fpga-raw/mqnic/AU250/fpga_100g/ip/rmt/tcam_generator.tcl	1970-01-01 08:00:00.000000000 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/ip/rmt/tcam_generator.tcl	2022-01-31 13:02:15.010256655 +0800
@@ -0,0 +1,5 @@
+read_vhdl -library cam  ../lib_rmt/xilinx_cam/dmem.vhd
+read_vhdl -library cam  [glob ../lib_rmt/xilinx_cam/cam*.vhd]
+
+#add_files [glob ../lib_rmt/rmtv2/*.mif]
+
Symbolic links ./fpga-raw/mqnic/AU250/fpga_100g/lib and ./fpga/mqnic/AU250/fpga_100g/lib differ
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/Makefile ./fpga/mqnic/AU250/fpga_100g/Makefile
--- ./fpga-raw/mqnic/AU250/fpga_100g/Makefile	2022-01-31 13:09:10.772702491 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/Makefile	2022-01-31 13:02:15.010256655 +0800
@@ -1,25 +1,53 @@
-# Targets
-TARGETS:=
-
-# Subdirectories
-SUBDIRS = fpga
-SUBDIRS_CLEAN = $(patsubst %,%.clean,$(SUBDIRS))
-
-# Rules
-.PHONY: all
-all: $(SUBDIRS) $(TARGETS)
-
-.PHONY: $(SUBDIRS)
-$(SUBDIRS):
-	cd $@ && $(MAKE)
-
-.PHONY: $(SUBDIRS_CLEAN)
-$(SUBDIRS_CLEAN):
-	cd $(@:.clean=) && $(MAKE) clean
-
-.PHONY: clean
-clean: $(SUBDIRS_CLEAN)
-	-rm -rf $(TARGETS)
-
-program:
-	#djtgcfg prog -d Atlys --index 0 --file fpga/fpga.bit
+# # Targets
+# TARGETS:=
+# 
+# # Subdirectories
+# SUBDIRS = fpga
+# SUBDIRS_CLEAN = $(patsubst %,%.clean,$(SUBDIRS))
+# 
+# # Rules
+# .PHONY: all
+# all: $(SUBDIRS) $(TARGETS)
+# 
+# .PHONY: $(SUBDIRS)
+# $(SUBDIRS):
+# 	cd $@ && $(MAKE)
+# 
+# .PHONY: $(SUBDIRS_CLEAN)
+# $(SUBDIRS_CLEAN):
+# 	cd $(@:.clean=) && $(MAKE) clean
+# 
+# .PHONY: clean
+# clean: $(SUBDIRS_CLEAN)
+# 	-rm -rf $(TARGETS)
+# 
+# program:
+# 	#djtgcfg prog -d Atlys --index 0 --file fpga/fpga.bit
+#
+#
+JOBS=$(shell nproc)
+
+
+.PHONY: all project clean
+
+all: project run_synth run_impl
+	@echo "hh"
+gen_bit: run_synth run_impl
+	@echo "hhh"
+
+project:
+	vivado -mode batch -source tcl/create_project.tcl
+
+run_synth:
+	vivado -mode batch -source tcl/run_synth.tcl -tclargs ${JOBS}
+
+run_impl:
+	vivado -mode batch -source tcl/run_impl.tcl -tclargs ${JOBS}
+
+clean:
+	rm -rfv project_synth
+	rm -rfv vivado*
+	rm -rfv xvlog*
+	rm -rfv xsim.dir
+	rm -rfv tb/xvlog*
+	rm -rfv tb/xsim.dir
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/placement.xdc ./fpga/mqnic/AU250/fpga_100g/placement.xdc
--- ./fpga-raw/mqnic/AU250/fpga_100g/placement.xdc	1970-01-01 08:00:00.000000000 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/placement.xdc	2022-01-31 13:02:15.010256655 +0800
@@ -0,0 +1,39 @@
+# Placement constraints
+#create_pblock pblock_slr0
+#add_cells_to_pblock [get_pblocks pblock_slr0] [get_cells -quiet [list ]]
+#resize_pblock [get_pblocks pblock_slr0] -add {SLR0}
+
+create_pblock pblock_slr1
+add_cells_to_pblock [get_pblocks pblock_slr1] [get_cells -quiet [list core_inst/dma_if_mux_inst]]
+add_cells_to_pblock [get_pblocks pblock_slr1] [get_cells -quiet [list core_inst/dma_if_mux_ctrl_inst]]
+add_cells_to_pblock [get_pblocks pblock_slr1] [get_cells -quiet [list core_inst/dma_if_mux_data_inst]]
+add_cells_to_pblock [get_pblocks pblock_slr1] [get_cells -quiet [list core_inst/iface[0].interface_inst]]
+add_cells_to_pblock [get_pblocks pblock_slr1] [get_cells -quiet [list core_inst/iface[1].interface_inst]]
+resize_pblock [get_pblocks pblock_slr1] -add {SLR1}
+
+#create_pblock pblock_slr2
+#add_cells_to_pblock [get_pblocks pblock_slr2] [get_cells -quiet [list ]]
+#resize_pblock [get_pblocks pblock_slr2] -add {SLR2}
+
+#create_pblock pblock_slr3
+#add_cells_to_pblock [get_pblocks pblock_slr3] [get_cells -quiet [list ]]
+#resize_pblock [get_pblocks pblock_slr3] -add {SLR3}
+
+create_pblock pblock_pcie
+add_cells_to_pblock [get_pblocks pblock_pcie] [get_cells -quiet [list pcie4_uscale_plus_inst]]
+add_cells_to_pblock [get_pblocks pblock_pcie] [get_cells -quiet [list core_inst/pcie_us_msi_inst]]
+add_cells_to_pblock [get_pblocks pblock_pcie] [get_cells -quiet [list core_inst/pcie_us_cfg_inst]]
+add_cells_to_pblock [get_pblocks pblock_pcie] [get_cells -quiet [list core_inst/pcie_us_axil_master_inst]]
+add_cells_to_pblock [get_pblocks pblock_pcie] [get_cells -quiet [list core_inst/dma_if_pcie_us_inst]]
+resize_pblock [get_pblocks pblock_pcie] -add {CLOCKREGION_X6Y4:CLOCKREGION_X7Y7}
+
+# create_pblock pblock_eth
+# add_cells_to_pblock [get_pblocks pblock_eth] [get_cells -quiet [list qsfp0_cmac_pad_inst]]
+# add_cells_to_pblock [get_pblocks pblock_eth] [get_cells -quiet [list core_inst/iface[0].mac[0].mac_tx_fifo_inst]]
+# add_cells_to_pblock [get_pblocks pblock_eth] [get_cells -quiet [list core_inst/iface[0].mac[0].mac_rx_fifo_inst]]
+# add_cells_to_pblock [get_pblocks pblock_eth] [get_cells -quiet [list core_inst/iface[0].mac[0].tx_ptp_ts_fifo]]
+# add_cells_to_pblock [get_pblocks pblock_eth] [get_cells -quiet [list qsfp1_cmac_pad_inst]]
+# add_cells_to_pblock [get_pblocks pblock_eth] [get_cells -quiet [list core_inst/iface[1].mac[0].mac_tx_fifo_inst]]
+# add_cells_to_pblock [get_pblocks pblock_eth] [get_cells -quiet [list core_inst/iface[1].mac[0].mac_rx_fifo_inst]]
+# add_cells_to_pblock [get_pblocks pblock_eth] [get_cells -quiet [list core_inst/iface[1].mac[0].tx_ptp_ts_fifo]]
+# resize_pblock [get_pblocks pblock_eth] -add {CLOCKREGION_X0Y8:CLOCKREGION_X0Y11}
Symbolic links ./fpga-raw/mqnic/AU250/fpga_100g/rtl/common and ./fpga/mqnic/AU250/fpga_100g/rtl/common differ
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/rtl/fpga.v ./fpga/mqnic/AU250/fpga_100g/rtl/fpga.v
--- ./fpga-raw/mqnic/AU250/fpga_100g/rtl/fpga.v	2022-01-31 13:09:10.772702491 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/rtl/fpga.v	2022-01-31 13:02:15.010256655 +0800
@@ -138,6 +138,9 @@
 wire pcie_user_clk;
 wire pcie_user_reset;
 
+//for lower-frequency
+// wire pcie_user_clk_wiz;
+
 wire cfgmclk_int;
 
 wire clk_161mhz_ref_int;
@@ -156,6 +159,15 @@
 wire mmcm_locked;
 wire mmcm_clkfb;
 
+
+// clk_wiz_0 
+// clk_wiz_250_125
+// (
+// 	.clk_out1(pcie_user_clk),     // output clk_out1
+// 	.reset(pcie_user_reset),
+// 	.clk_in1(pcie_user_clk_wiz)
+// );
+
 // MMCM instance
 // 161.13 MHz in, 125 MHz out
 // PFD range: 10 MHz to 500 MHz
@@ -562,6 +574,7 @@
     .pci_exp_txp(pcie_tx_p),
     .pci_exp_rxn(pcie_rx_n),
     .pci_exp_rxp(pcie_rx_p),
+    // .user_clk(pcie_user_clk_wiz),
     .user_clk(pcie_user_clk),
     .user_reset(pcie_user_reset),
     .user_lnk_up(),
@@ -1368,6 +1381,7 @@
 assign led[1] = qsfp1_rx_status; // yellow
 assign led[2] = qsfp0_rx_status; // green
 
+
 fpga_core #(
     .AXIS_PCIE_DATA_WIDTH(AXIS_PCIE_DATA_WIDTH),
     .AXIS_PCIE_KEEP_WIDTH(AXIS_PCIE_KEEP_WIDTH),
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/rtl/one_in_one_out/fpga_core.v ./fpga/mqnic/AU250/fpga_100g/rtl/one_in_one_out/fpga_core.v
--- ./fpga-raw/mqnic/AU250/fpga_100g/rtl/one_in_one_out/fpga_core.v	1970-01-01 08:00:00.000000000 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/rtl/one_in_one_out/fpga_core.v	2022-01-31 13:02:15.010256655 +0800
@@ -0,0 +1,2345 @@
+/*
+
+Copyright 2019, The Regents of the University of California.
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+
+   1. Redistributions of source code must retain the above copyright notice,
+      this list of conditions and the following disclaimer.
+
+   2. Redistributions in binary form must reproduce the above copyright notice,
+      this list of conditions and the following disclaimer in the documentation
+      and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE REGENTS OF THE UNIVERSITY OF CALIFORNIA ''AS
+IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE REGENTS OF THE UNIVERSITY OF CALIFORNIA OR
+CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
+OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
+OF SUCH DAMAGE.
+
+The views and conclusions contained in the software and documentation are those
+of the authors and should not be interpreted as representing official policies,
+either expressed or implied, of The Regents of the University of California.
+
+*/
+
+// Language: Verilog 2001
+
+`timescale 1ns / 1ps
+
+/*
+ * FPGA core logic
+ */
+module fpga_core #
+(
+    parameter TARGET = "XILINX",
+    parameter AXIS_PCIE_DATA_WIDTH = 512,
+    parameter AXIS_PCIE_KEEP_WIDTH = (AXIS_PCIE_DATA_WIDTH/32),
+    parameter AXIS_PCIE_RC_USER_WIDTH = 161,
+    parameter AXIS_PCIE_RQ_USER_WIDTH = 137,
+    parameter AXIS_PCIE_CQ_USER_WIDTH = 183,
+    parameter AXIS_PCIE_CC_USER_WIDTH = 81,
+    parameter RQ_SEQ_NUM_WIDTH = 6,
+    parameter BAR0_APERTURE = 24,
+    parameter AXIS_ETH_DATA_WIDTH = 512,
+    parameter AXIS_ETH_KEEP_WIDTH = AXIS_ETH_DATA_WIDTH/8
+)
+(
+    /*
+     * Clock: 250 MHz
+     * Synchronous reset
+     */
+    input  wire                               clk_250mhz,
+    input  wire                               rst_250mhz,
+
+    /*
+     * GPIO
+     */
+    input  wire [3:0]                         sw,
+    output wire [2:0]                         led,
+
+    /*
+     * I2C
+     */
+    input  wire                               i2c_scl_i,
+    output wire                               i2c_scl_o,
+    output wire                               i2c_scl_t,
+    input  wire                               i2c_sda_i,
+    output wire                               i2c_sda_o,
+    output wire                               i2c_sda_t,
+
+    /*
+     * PCIe
+     */
+    output wire [AXIS_PCIE_DATA_WIDTH-1:0]    m_axis_rq_tdata,
+    output wire [AXIS_PCIE_KEEP_WIDTH-1:0]    m_axis_rq_tkeep,
+    output wire                               m_axis_rq_tlast,
+    input  wire                               m_axis_rq_tready,
+    output wire [AXIS_PCIE_RQ_USER_WIDTH-1:0] m_axis_rq_tuser,
+    output wire                               m_axis_rq_tvalid,
+
+    input  wire [AXIS_PCIE_DATA_WIDTH-1:0]    s_axis_rc_tdata,
+    input  wire [AXIS_PCIE_KEEP_WIDTH-1:0]    s_axis_rc_tkeep,
+    input  wire                               s_axis_rc_tlast,
+    output wire                               s_axis_rc_tready,
+    input  wire [AXIS_PCIE_RC_USER_WIDTH-1:0] s_axis_rc_tuser,
+    input  wire                               s_axis_rc_tvalid,
+
+    input  wire [AXIS_PCIE_DATA_WIDTH-1:0]    s_axis_cq_tdata,
+    input  wire [AXIS_PCIE_KEEP_WIDTH-1:0]    s_axis_cq_tkeep,
+    input  wire                               s_axis_cq_tlast,
+    output wire                               s_axis_cq_tready,
+    input  wire [AXIS_PCIE_CQ_USER_WIDTH-1:0] s_axis_cq_tuser,
+    input  wire                               s_axis_cq_tvalid,
+
+    output wire [AXIS_PCIE_DATA_WIDTH-1:0]    m_axis_cc_tdata,
+    output wire [AXIS_PCIE_KEEP_WIDTH-1:0]    m_axis_cc_tkeep,
+    output wire                               m_axis_cc_tlast,
+    input  wire                               m_axis_cc_tready,
+    output wire [AXIS_PCIE_CC_USER_WIDTH-1:0] m_axis_cc_tuser,
+    output wire                               m_axis_cc_tvalid,
+
+    input  wire [RQ_SEQ_NUM_WIDTH-1:0]        s_axis_rq_seq_num_0,
+    input  wire                               s_axis_rq_seq_num_valid_0,
+    input  wire [RQ_SEQ_NUM_WIDTH-1:0]        s_axis_rq_seq_num_1,
+    input  wire                               s_axis_rq_seq_num_valid_1,
+
+    input  wire [1:0]                         pcie_tfc_nph_av,
+    input  wire [1:0]                         pcie_tfc_npd_av,
+
+    input  wire [2:0]                         cfg_max_payload,
+    input  wire [2:0]                         cfg_max_read_req,
+
+    output wire [9:0]                         cfg_mgmt_addr,
+    output wire [7:0]                         cfg_mgmt_function_number,
+    output wire                               cfg_mgmt_write,
+    output wire [31:0]                        cfg_mgmt_write_data,
+    output wire [3:0]                         cfg_mgmt_byte_enable,
+    output wire                               cfg_mgmt_read,
+    input  wire [31:0]                        cfg_mgmt_read_data,
+    input  wire                               cfg_mgmt_read_write_done,
+
+    input  wire [7:0]                         cfg_fc_ph,
+    input  wire [11:0]                        cfg_fc_pd,
+    input  wire [7:0]                         cfg_fc_nph,
+    input  wire [11:0]                        cfg_fc_npd,
+    input  wire [7:0]                         cfg_fc_cplh,
+    input  wire [11:0]                        cfg_fc_cpld,
+    output wire [2:0]                         cfg_fc_sel,
+
+    input  wire [3:0]                         cfg_interrupt_msi_enable,
+    input  wire [11:0]                        cfg_interrupt_msi_mmenable,
+    input  wire                               cfg_interrupt_msi_mask_update,
+    input  wire [31:0]                        cfg_interrupt_msi_data,
+    output wire [3:0]                         cfg_interrupt_msi_select,
+    output wire [31:0]                        cfg_interrupt_msi_int,
+    output wire [31:0]                        cfg_interrupt_msi_pending_status,
+    output wire                               cfg_interrupt_msi_pending_status_data_enable,
+    output wire [3:0]                         cfg_interrupt_msi_pending_status_function_num,
+    input  wire                               cfg_interrupt_msi_sent,
+    input  wire                               cfg_interrupt_msi_fail,
+    output wire [2:0]                         cfg_interrupt_msi_attr,
+    output wire                               cfg_interrupt_msi_tph_present,
+    output wire [1:0]                         cfg_interrupt_msi_tph_type,
+    output wire [8:0]                         cfg_interrupt_msi_tph_st_tag,
+    output wire [3:0]                         cfg_interrupt_msi_function_number,
+
+    output wire                               status_error_cor,
+    output wire                               status_error_uncor,
+
+    /*
+     * Ethernet: QSFP28
+     */
+    input  wire                               qsfp0_tx_clk,
+    input  wire                               qsfp0_tx_rst,
+
+    output wire [AXIS_ETH_DATA_WIDTH-1:0]     qsfp0_tx_axis_tdata,
+    output wire [AXIS_ETH_KEEP_WIDTH-1:0]     qsfp0_tx_axis_tkeep,
+    output wire                               qsfp0_tx_axis_tvalid,
+    input  wire                               qsfp0_tx_axis_tready,
+    output wire                               qsfp0_tx_axis_tlast,
+    output wire                               qsfp0_tx_axis_tuser,
+
+    input  wire                               qsfp0_rx_clk,
+    input  wire                               qsfp0_rx_rst,
+
+    input  wire [AXIS_ETH_DATA_WIDTH-1:0]     qsfp0_rx_axis_tdata,
+    input  wire [AXIS_ETH_KEEP_WIDTH-1:0]     qsfp0_rx_axis_tkeep,
+    input  wire                               qsfp0_rx_axis_tvalid,
+    input  wire                               qsfp0_rx_axis_tlast,
+    input  wire                               qsfp0_rx_axis_tuser,
+
+    output wire                               qsfp0_modsell,
+    output wire                               qsfp0_resetl,
+    input  wire                               qsfp0_modprsl,
+    input  wire                               qsfp0_intl,
+    output wire                               qsfp0_lpmode,
+
+    input  wire                               qsfp1_tx_clk,
+    input  wire                               qsfp1_tx_rst,
+
+    output wire [AXIS_ETH_DATA_WIDTH-1:0]     qsfp1_tx_axis_tdata,
+    output wire [AXIS_ETH_KEEP_WIDTH-1:0]     qsfp1_tx_axis_tkeep,
+    output wire                               qsfp1_tx_axis_tvalid,
+    input  wire                               qsfp1_tx_axis_tready,
+    output wire                               qsfp1_tx_axis_tlast,
+    output wire                               qsfp1_tx_axis_tuser,
+
+    input  wire                               qsfp1_rx_clk,
+    input  wire                               qsfp1_rx_rst,
+
+    input  wire [AXIS_ETH_DATA_WIDTH-1:0]     qsfp1_rx_axis_tdata,
+    input  wire [AXIS_ETH_KEEP_WIDTH-1:0]     qsfp1_rx_axis_tkeep,
+    input  wire                               qsfp1_rx_axis_tvalid,
+    input  wire                               qsfp1_rx_axis_tlast,
+    input  wire                               qsfp1_rx_axis_tuser,
+
+    output wire                               qsfp1_modsell,
+    output wire                               qsfp1_resetl,
+    input  wire                               qsfp1_modprsl,
+    input  wire                               qsfp1_intl,
+    output wire                               qsfp1_lpmode,
+
+    /*
+     * QSPI flash
+     */
+    output wire                               fpga_boot,
+    output wire                               qspi_clk,
+    input  wire [3:0]                         qspi_dq_i,
+    output wire [3:0]                         qspi_dq_o,
+    output wire [3:0]                         qspi_dq_oe,
+    output wire                               qspi_cs
+);
+
+// PHC parameters
+parameter PTP_PERIOD_NS_WIDTH = 4;
+parameter PTP_OFFSET_NS_WIDTH = 32;
+parameter PTP_FNS_WIDTH = 32;
+parameter PTP_PERIOD_NS = 4'd4;
+parameter PTP_PERIOD_FNS = 32'd0;
+
+// FW and board IDs
+parameter FW_ID = 32'd0;
+parameter FW_VER = {16'd0, 16'd1};
+parameter BOARD_ID = {16'h10ee, 16'h90fa};
+parameter BOARD_VER = {16'd0, 16'd1};
+parameter FPGA_ID = 32'h4B57093;
+
+// Structural parameters
+parameter IF_COUNT = 1;
+parameter PORTS_PER_IF = 1;
+
+parameter PORT_COUNT = IF_COUNT*PORTS_PER_IF;
+
+// Queue manager parameters (interface)
+parameter EVENT_QUEUE_OP_TABLE_SIZE = 32;
+parameter TX_QUEUE_OP_TABLE_SIZE = 32;
+parameter RX_QUEUE_OP_TABLE_SIZE = 32;
+parameter TX_CPL_QUEUE_OP_TABLE_SIZE = TX_QUEUE_OP_TABLE_SIZE;
+parameter RX_CPL_QUEUE_OP_TABLE_SIZE = RX_QUEUE_OP_TABLE_SIZE;
+parameter TX_QUEUE_INDEX_WIDTH = 13;
+parameter RX_QUEUE_INDEX_WIDTH = 8;
+parameter TX_CPL_QUEUE_INDEX_WIDTH = TX_QUEUE_INDEX_WIDTH;
+parameter RX_CPL_QUEUE_INDEX_WIDTH = RX_QUEUE_INDEX_WIDTH;
+parameter EVENT_QUEUE_PIPELINE = 3;
+parameter TX_QUEUE_PIPELINE = 3+(TX_QUEUE_INDEX_WIDTH > 12 ? TX_QUEUE_INDEX_WIDTH-12 : 0);
+parameter RX_QUEUE_PIPELINE = 3+(RX_QUEUE_INDEX_WIDTH > 12 ? RX_QUEUE_INDEX_WIDTH-12 : 0);
+parameter TX_CPL_QUEUE_PIPELINE = TX_QUEUE_PIPELINE;
+parameter RX_CPL_QUEUE_PIPELINE = RX_QUEUE_PIPELINE;
+
+// TX and RX engine parameters (port)
+parameter TX_DESC_TABLE_SIZE = 32;
+parameter TX_PKT_TABLE_SIZE = 8;
+parameter RX_DESC_TABLE_SIZE = 32;
+parameter RX_PKT_TABLE_SIZE = 8;
+
+// Scheduler parameters (port)
+parameter TX_SCHEDULER = "RR";
+parameter TX_SCHEDULER_OP_TABLE_SIZE = TX_DESC_TABLE_SIZE;
+parameter TX_SCHEDULER_PIPELINE = TX_QUEUE_PIPELINE;
+parameter TDMA_INDEX_WIDTH = 6;
+
+// Timstamping parameters (port)
+parameter LOGIC_PTP_PERIOD_NS = 6'h4;
+parameter LOGIC_PTP_PERIOD_FNS = 16'h0000;
+parameter IF_PTP_PERIOD_NS = 6'h3;
+parameter IF_PTP_PERIOD_FNS = 16'h1a60;
+parameter PTP_TS_ENABLE = 0;
+parameter PTP_TS_WIDTH = 96;
+parameter TX_PTP_TS_FIFO_DEPTH = 32;
+parameter RX_PTP_TS_FIFO_DEPTH = 32;
+
+// Interface parameters (port)
+
+//disable checksum for more precise control.
+parameter TX_CHECKSUM_ENABLE = 0;
+parameter RX_RSS_ENABLE = 1;
+parameter RX_HASH_ENABLE = 1;
+parameter RX_CHECKSUM_ENABLE = 1;
+parameter ENABLE_PADDING = 1;
+parameter ENABLE_DIC = 1;
+parameter MIN_FRAME_LENGTH = 64;
+parameter TX_FIFO_DEPTH = 32768;
+parameter RX_FIFO_DEPTH = 131072;
+parameter MAX_TX_SIZE = 16384;
+parameter MAX_RX_SIZE = 16384;
+
+// AXI lite interface parameters
+parameter AXIL_DATA_WIDTH = 32;
+parameter AXIL_STRB_WIDTH = (AXIL_DATA_WIDTH/8);
+parameter AXIL_ADDR_WIDTH = BAR0_APERTURE;
+
+parameter IF_AXIL_ADDR_WIDTH = AXIL_ADDR_WIDTH-$clog2(IF_COUNT);
+parameter AXIL_CSR_ADDR_WIDTH = IF_AXIL_ADDR_WIDTH-5-$clog2((PORTS_PER_IF+3)/8);
+
+// AXI stream interface parameters
+parameter AXIS_DATA_WIDTH = AXIS_ETH_DATA_WIDTH;
+parameter AXIS_KEEP_WIDTH = AXIS_ETH_KEEP_WIDTH;
+
+// PCIe DMA parameters
+parameter PCIE_ADDR_WIDTH = 64;
+parameter PCIE_DMA_LEN_WIDTH = 16;
+parameter PCIE_DMA_TAG_WIDTH = 16;
+parameter IF_PCIE_DMA_TAG_WIDTH = PCIE_DMA_TAG_WIDTH-$clog2(IF_COUNT)-1;
+parameter SEG_COUNT = AXIS_PCIE_DATA_WIDTH > 64 ? AXIS_PCIE_DATA_WIDTH*2 / 128 : 2;
+parameter SEG_DATA_WIDTH = AXIS_PCIE_DATA_WIDTH*2/SEG_COUNT;
+parameter SEG_ADDR_WIDTH = 12;
+parameter SEG_BE_WIDTH = SEG_DATA_WIDTH/8;
+parameter IF_RAM_SEL_WIDTH = PORTS_PER_IF > 1 ? $clog2(PORTS_PER_IF) : 1;
+parameter RAM_SEL_WIDTH = $clog2(IF_COUNT)+IF_RAM_SEL_WIDTH+1;
+parameter RAM_ADDR_WIDTH = SEG_ADDR_WIDTH+$clog2(SEG_COUNT)+$clog2(SEG_BE_WIDTH);
+parameter RAM_PIPELINE = 2;
+
+parameter TX_RAM_SIZE = TX_PKT_TABLE_SIZE*MAX_TX_SIZE;
+parameter RX_RAM_SIZE = RX_PKT_TABLE_SIZE*MAX_RX_SIZE;
+
+// parameter sizing helpers
+function [31:0] w_32(input [31:0] val);
+    w_32 = val;
+endfunction
+
+// AXI lite connections
+wire [AXIL_ADDR_WIDTH-1:0] axil_pcie_awaddr;
+wire [2:0]                 axil_pcie_awprot;
+wire                       axil_pcie_awvalid;
+wire                       axil_pcie_awready;
+wire [AXIL_DATA_WIDTH-1:0] axil_pcie_wdata;
+wire [AXIL_STRB_WIDTH-1:0] axil_pcie_wstrb;
+wire                       axil_pcie_wvalid;
+wire                       axil_pcie_wready;
+wire [1:0]                 axil_pcie_bresp;
+wire                       axil_pcie_bvalid;
+wire                       axil_pcie_bready;
+wire [AXIL_ADDR_WIDTH-1:0] axil_pcie_araddr;
+wire [2:0]                 axil_pcie_arprot;
+wire                       axil_pcie_arvalid;
+wire                       axil_pcie_arready;
+wire [AXIL_DATA_WIDTH-1:0] axil_pcie_rdata;
+wire [1:0]                 axil_pcie_rresp;
+wire                       axil_pcie_rvalid;
+wire                       axil_pcie_rready;
+
+wire [AXIL_CSR_ADDR_WIDTH-1:0] axil_csr_awaddr;
+wire [2:0]                     axil_csr_awprot;
+wire                           axil_csr_awvalid;
+wire                           axil_csr_awready;
+wire [AXIL_DATA_WIDTH-1:0]     axil_csr_wdata;
+wire [AXIL_STRB_WIDTH-1:0]     axil_csr_wstrb;
+wire                           axil_csr_wvalid;
+wire                           axil_csr_wready;
+wire [1:0]                     axil_csr_bresp;
+wire                           axil_csr_bvalid;
+wire                           axil_csr_bready;
+wire [AXIL_CSR_ADDR_WIDTH-1:0] axil_csr_araddr;
+wire [2:0]                     axil_csr_arprot;
+wire                           axil_csr_arvalid;
+wire                           axil_csr_arready;
+wire [AXIL_DATA_WIDTH-1:0]     axil_csr_rdata;
+wire [1:0]                     axil_csr_rresp;
+wire                           axil_csr_rvalid;
+wire                           axil_csr_rready;
+
+// DMA connections
+wire [SEG_COUNT*RAM_SEL_WIDTH-1:0]   dma_ram_wr_cmd_sel;
+wire [SEG_COUNT*SEG_BE_WIDTH-1:0]    dma_ram_wr_cmd_be;
+wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0]  dma_ram_wr_cmd_addr;
+wire [SEG_COUNT*SEG_DATA_WIDTH-1:0]  dma_ram_wr_cmd_data;
+wire [SEG_COUNT-1:0]                 dma_ram_wr_cmd_valid;
+wire [SEG_COUNT-1:0]                 dma_ram_wr_cmd_ready;
+wire [SEG_COUNT*RAM_SEL_WIDTH-1:0]   dma_ram_rd_cmd_sel;
+wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0]  dma_ram_rd_cmd_addr;
+wire [SEG_COUNT-1:0]                 dma_ram_rd_cmd_valid;
+wire [SEG_COUNT-1:0]                 dma_ram_rd_cmd_ready;
+wire [SEG_COUNT*SEG_DATA_WIDTH-1:0]  dma_ram_rd_resp_data;
+wire [SEG_COUNT-1:0]                 dma_ram_rd_resp_valid;
+wire [SEG_COUNT-1:0]                 dma_ram_rd_resp_ready;
+
+// Error handling
+wire [1:0] status_error_uncor_int;
+wire [1:0] status_error_cor_int;
+
+wire [31:0] msi_irq;
+
+wire ext_tag_enable;
+
+// PCIe DMA control
+wire [PCIE_ADDR_WIDTH-1:0]     pcie_dma_read_desc_pcie_addr;
+wire [RAM_SEL_WIDTH-1:0]       pcie_dma_read_desc_ram_sel;
+wire [RAM_ADDR_WIDTH-1:0]      pcie_dma_read_desc_ram_addr;
+wire [PCIE_DMA_LEN_WIDTH-1:0]  pcie_dma_read_desc_len;
+wire [PCIE_DMA_TAG_WIDTH-1:0]  pcie_dma_read_desc_tag;
+wire                           pcie_dma_read_desc_valid;
+wire                           pcie_dma_read_desc_ready;
+
+wire [PCIE_DMA_TAG_WIDTH-1:0]  pcie_dma_read_desc_status_tag;
+wire                           pcie_dma_read_desc_status_valid;
+
+wire [PCIE_ADDR_WIDTH-1:0]     pcie_dma_write_desc_pcie_addr;
+wire [RAM_SEL_WIDTH-1:0]       pcie_dma_write_desc_ram_sel;
+wire [RAM_ADDR_WIDTH-1:0]      pcie_dma_write_desc_ram_addr;
+wire [PCIE_DMA_LEN_WIDTH-1:0]  pcie_dma_write_desc_len;
+wire [PCIE_DMA_TAG_WIDTH-1:0]  pcie_dma_write_desc_tag;
+wire                           pcie_dma_write_desc_valid;
+wire                           pcie_dma_write_desc_ready;
+
+wire [PCIE_DMA_TAG_WIDTH-1:0]  pcie_dma_write_desc_status_tag;
+wire                           pcie_dma_write_desc_status_valid;
+
+wire                           pcie_dma_enable = 1;
+
+wire [95:0] ptp_ts_96;
+wire ptp_ts_step;
+wire ptp_pps;
+
+// control registers
+reg axil_csr_awready_reg = 1'b0;
+reg axil_csr_wready_reg = 1'b0;
+reg axil_csr_bvalid_reg = 1'b0;
+reg axil_csr_arready_reg = 1'b0;
+reg [AXIL_DATA_WIDTH-1:0] axil_csr_rdata_reg = {AXIL_DATA_WIDTH{1'b0}};
+reg axil_csr_rvalid_reg = 1'b0;
+
+reg qsfp0_reset_reg = 1'b0;
+reg qsfp1_reset_reg = 1'b0;
+
+reg qsfp0_lpmode_reg = 1'b0;
+reg qsfp1_lpmode_reg = 1'b0;
+
+reg i2c_scl_o_reg = 1'b1;
+reg i2c_sda_o_reg = 1'b1;
+
+reg fpga_boot_reg = 1'b0;
+
+reg qspi_clk_reg = 1'b0;
+reg qspi_cs_reg = 1'b1;
+reg [3:0] qspi_dq_o_reg = 4'd0;
+reg [3:0] qspi_dq_oe_reg = 4'd0;
+
+reg pcie_dma_enable_reg = 0;
+
+reg [95:0] get_ptp_ts_96_reg = 0;
+reg [95:0] set_ptp_ts_96_reg = 0;
+reg set_ptp_ts_96_valid_reg = 0;
+reg [PTP_PERIOD_NS_WIDTH-1:0] set_ptp_period_ns_reg = 0;
+reg [PTP_FNS_WIDTH-1:0] set_ptp_period_fns_reg = 0;
+reg set_ptp_period_valid_reg = 0;
+reg [PTP_OFFSET_NS_WIDTH-1:0] set_ptp_offset_ns_reg = 0;
+reg [PTP_FNS_WIDTH-1:0] set_ptp_offset_fns_reg = 0;
+reg [15:0] set_ptp_offset_count_reg = 0;
+reg set_ptp_offset_valid_reg = 0;
+wire set_ptp_offset_active;
+
+assign axil_csr_awready = axil_csr_awready_reg;
+assign axil_csr_wready = axil_csr_wready_reg;
+assign axil_csr_bresp = 2'b00;
+assign axil_csr_bvalid = axil_csr_bvalid_reg;
+assign axil_csr_arready = axil_csr_arready_reg;
+assign axil_csr_rdata = axil_csr_rdata_reg;
+assign axil_csr_rresp = 2'b00;
+assign axil_csr_rvalid = axil_csr_rvalid_reg;
+
+assign qsfp0_modsell = 1'b0;
+assign qsfp1_modsell = 1'b0;
+
+assign qsfp0_resetl = !qsfp0_reset_reg;
+assign qsfp1_resetl = !qsfp1_reset_reg;
+
+assign qsfp0_lpmode = qsfp0_lpmode_reg;
+assign qsfp1_lpmode = qsfp1_lpmode_reg;
+
+assign i2c_scl_o = i2c_scl_o_reg;
+assign i2c_scl_t = i2c_scl_o_reg;
+assign i2c_sda_o = i2c_sda_o_reg;
+assign i2c_sda_t = i2c_sda_o_reg;
+
+assign fpga_boot = fpga_boot_reg;
+
+assign qspi_clk = qspi_clk_reg;
+assign qspi_cs = qspi_cs_reg;
+assign qspi_dq_o = qspi_dq_o_reg;
+assign qspi_dq_oe = qspi_dq_oe_reg;
+
+//assign pcie_dma_enable = pcie_dma_enable_reg;
+
+always @(posedge clk_250mhz) begin
+    axil_csr_awready_reg <= 1'b0;
+    axil_csr_wready_reg <= 1'b0;
+    axil_csr_bvalid_reg <= axil_csr_bvalid_reg && !axil_csr_bready;
+    axil_csr_arready_reg <= 1'b0;
+    axil_csr_rvalid_reg <= axil_csr_rvalid_reg && !axil_csr_rready;
+
+    pcie_dma_enable_reg <= pcie_dma_enable_reg;
+
+    set_ptp_ts_96_valid_reg <= 1'b0;
+    set_ptp_period_valid_reg <= 1'b0;
+    set_ptp_offset_valid_reg <= 1'b0;
+
+    if (axil_csr_awvalid && axil_csr_wvalid && !axil_csr_bvalid) begin
+        // write operation
+        axil_csr_awready_reg <= 1'b1;
+        axil_csr_wready_reg <= 1'b1;
+        axil_csr_bvalid_reg <= 1'b1;
+
+        case ({axil_csr_awaddr[15:2], 2'b00})
+            16'h0040: begin
+                // FPGA ID
+                fpga_boot_reg <= axil_csr_wdata == 32'hFEE1DEAD;
+            end
+            // GPIO
+            16'h0110: begin
+                // GPIO I2C 0
+                if (axil_csr_wstrb[0]) begin
+                    i2c_scl_o_reg <= axil_csr_wdata[1];
+                end
+                if (axil_csr_wstrb[1]) begin
+                    i2c_sda_o_reg <= axil_csr_wdata[9];
+                end
+            end
+            16'h0120: begin
+                // GPIO XCVR 0123
+                if (axil_csr_wstrb[0]) begin
+                    qsfp0_reset_reg <= axil_csr_wdata[4];
+                    qsfp0_lpmode_reg <= axil_csr_wdata[5];
+                end
+                if (axil_csr_wstrb[1]) begin
+                    qsfp1_reset_reg <= axil_csr_wdata[12];
+                    qsfp1_lpmode_reg <= axil_csr_wdata[13];
+                end
+            end
+            // Flash
+            16'h0144: begin
+                // QSPI control
+                if (axil_csr_wstrb[0]) begin
+                    qspi_dq_o_reg <= axil_csr_wdata[3:0];
+                end
+                if (axil_csr_wstrb[1]) begin
+                    qspi_dq_oe_reg <= axil_csr_wdata[11:8];
+                end
+                if (axil_csr_wstrb[2]) begin
+                    qspi_clk_reg <= axil_csr_wdata[16];
+                    qspi_cs_reg <= axil_csr_wdata[17];
+                end
+            end
+            // PHC
+            16'h0230: set_ptp_ts_96_reg[15:0] <= axil_csr_wdata;  // PTP set fns
+            16'h0234: set_ptp_ts_96_reg[45:16] <= axil_csr_wdata; // PTP set ns
+            16'h0238: set_ptp_ts_96_reg[79:48] <= axil_csr_wdata; // PTP set sec l
+            16'h023C: begin
+                // PTP set sec h
+                set_ptp_ts_96_reg[95:80] <= axil_csr_wdata;
+                set_ptp_ts_96_valid_reg <= 1'b1;
+            end
+            16'h0240: set_ptp_period_fns_reg <= axil_csr_wdata; // PTP period fns
+            16'h0244: begin
+                // PTP period ns
+                set_ptp_period_ns_reg <= axil_csr_wdata;
+                set_ptp_period_valid_reg <= 1'b1;
+            end
+            16'h0250: set_ptp_offset_fns_reg <= axil_csr_wdata; // PTP offset fns
+            16'h0254: set_ptp_offset_ns_reg <= axil_csr_wdata;  // PTP offset ns
+            16'h0258: begin
+                // PTP offset count
+                set_ptp_offset_count_reg <= axil_csr_wdata;
+                set_ptp_offset_valid_reg <= 1'b1;
+            end
+        endcase
+    end
+
+    if (axil_csr_arvalid && !axil_csr_rvalid) begin
+        // read operation
+        axil_csr_arready_reg <= 1'b1;
+        axil_csr_rvalid_reg <= 1'b1;
+        axil_csr_rdata_reg <= {AXIL_DATA_WIDTH{1'b0}};
+
+        case ({axil_csr_araddr[15:2], 2'b00})
+            16'h0000: axil_csr_rdata_reg <= FW_ID;      // fw_id
+            16'h0004: axil_csr_rdata_reg <= FW_VER;     // fw_ver
+            16'h0008: axil_csr_rdata_reg <= BOARD_ID;   // board_id
+            16'h000C: axil_csr_rdata_reg <= BOARD_VER;  // board_ver
+            16'h0010: axil_csr_rdata_reg <= 1;          // phc_count
+            16'h0014: axil_csr_rdata_reg <= 16'h0200;   // phc_offset
+            16'h0018: axil_csr_rdata_reg <= 16'h0080;   // phc_stride
+            16'h0020: axil_csr_rdata_reg <= IF_COUNT;   // if_count
+            16'h0024: axil_csr_rdata_reg <= 2**IF_AXIL_ADDR_WIDTH; // if_stride
+            16'h002C: axil_csr_rdata_reg <= 2**AXIL_CSR_ADDR_WIDTH; // if_csr_offset
+            16'h0040: axil_csr_rdata_reg <= FPGA_ID;    // fpga_id
+            // GPIO
+            16'h0110: begin
+                // GPIO I2C 0
+                axil_csr_rdata_reg[0] <= i2c_scl_i;
+                axil_csr_rdata_reg[1] <= i2c_scl_o_reg;
+                axil_csr_rdata_reg[8] <= i2c_sda_i;
+                axil_csr_rdata_reg[9] <= i2c_sda_o_reg;
+            end
+            16'h0120: begin
+                // GPIO XCVR 0123
+                axil_csr_rdata_reg[0] <= !qsfp0_modprsl;
+                axil_csr_rdata_reg[1] <= !qsfp0_intl;
+                axil_csr_rdata_reg[4] <= qsfp0_reset_reg;
+                axil_csr_rdata_reg[5] <= qsfp0_lpmode_reg;
+                axil_csr_rdata_reg[8] <= !qsfp1_modprsl;
+                axil_csr_rdata_reg[9] <= !qsfp1_intl;
+                axil_csr_rdata_reg[12] <= qsfp1_reset_reg;
+                axil_csr_rdata_reg[13] <= qsfp1_lpmode_reg;
+            end
+            // Flash
+            16'h0140: axil_csr_rdata_reg <= {8'd0, 8'd4, 8'h81, 8'd0}; // Flash ID
+            16'h0144: begin
+                // QSPI control
+                axil_csr_rdata_reg[3:0] <= qspi_dq_i;
+                axil_csr_rdata_reg[11:8] <= qspi_dq_oe;
+                axil_csr_rdata_reg[16] <= qspi_clk;
+                axil_csr_rdata_reg[17] <= qspi_cs;
+            end
+            // PHC
+            16'h0200: axil_csr_rdata_reg <= {8'd0, 8'd0, 8'd0, 8'd0};  // PHC features
+            16'h0210: axil_csr_rdata_reg <= ptp_ts_96[15:0];  // PTP cur fns
+            16'h0214: axil_csr_rdata_reg <= ptp_ts_96[45:16]; // PTP cur ns
+            16'h0218: axil_csr_rdata_reg <= ptp_ts_96[79:48]; // PTP cur sec l
+            16'h021C: axil_csr_rdata_reg <= ptp_ts_96[95:80]; // PTP cur sec h
+            16'h0220: begin
+                // PTP get fns
+                get_ptp_ts_96_reg <= ptp_ts_96;
+                axil_csr_rdata_reg <= ptp_ts_96[15:0];
+            end
+            16'h0224: axil_csr_rdata_reg <= get_ptp_ts_96_reg[45:16]; // PTP get ns
+            16'h0228: axil_csr_rdata_reg <= get_ptp_ts_96_reg[79:48]; // PTP get sec l
+            16'h022C: axil_csr_rdata_reg <= get_ptp_ts_96_reg[95:80]; // PTP get sec h
+            16'h0230: axil_csr_rdata_reg <= set_ptp_ts_96_reg[15:0];  // PTP set fns
+            16'h0234: axil_csr_rdata_reg <= set_ptp_ts_96_reg[45:16]; // PTP set ns
+            16'h0238: axil_csr_rdata_reg <= set_ptp_ts_96_reg[79:48]; // PTP set sec l
+            16'h023C: axil_csr_rdata_reg <= set_ptp_ts_96_reg[95:80]; // PTP set sec h
+            16'h0240: axil_csr_rdata_reg <= set_ptp_period_fns_reg;   // PTP period fns
+            16'h0244: axil_csr_rdata_reg <= set_ptp_period_ns_reg;    // PTP period ns
+            16'h0248: axil_csr_rdata_reg <= PTP_PERIOD_FNS;           // PTP nom period fns
+            16'h024C: axil_csr_rdata_reg <= PTP_PERIOD_NS;            // PTP nom period ns
+            16'h0250: axil_csr_rdata_reg <= set_ptp_offset_fns_reg;   // PTP offset fns
+            16'h0254: axil_csr_rdata_reg <= set_ptp_offset_ns_reg;    // PTP offset ns
+            16'h0258: axil_csr_rdata_reg <= set_ptp_offset_count_reg; // PTP offset count
+            16'h025C: axil_csr_rdata_reg <= set_ptp_offset_active;    // PTP offset status
+        endcase
+    end
+
+    if (rst_250mhz) begin
+        axil_csr_awready_reg <= 1'b0;
+        axil_csr_wready_reg <= 1'b0;
+        axil_csr_bvalid_reg <= 1'b0;
+        axil_csr_arready_reg <= 1'b0;
+        axil_csr_rvalid_reg <= 1'b0;
+
+        qsfp0_reset_reg <= 1'b0;
+        qsfp1_reset_reg <= 1'b0;
+
+        qsfp0_lpmode_reg <= 1'b0;
+        qsfp1_lpmode_reg <= 1'b0;
+
+        i2c_scl_o_reg <= 1'b1;
+        i2c_sda_o_reg <= 1'b1;
+
+        fpga_boot_reg <= 1'b0;
+
+        qspi_clk_reg <= 1'b0;
+        qspi_cs_reg <= 1'b1;
+        qspi_dq_o_reg <= 4'd0;
+        qspi_dq_oe_reg <= 4'd0;
+
+        pcie_dma_enable_reg <= 1'b0;
+    end
+end
+
+pcie_us_cfg #(
+    .PF_COUNT(1),
+    .VF_COUNT(0),
+    .VF_OFFSET(4),
+    .PCIE_CAP_OFFSET(12'h070)
+)
+pcie_us_cfg_inst (
+    .clk(clk_250mhz),
+    .rst(rst_250mhz),
+
+    /*
+     * Configuration outputs
+     */
+    .ext_tag_enable(ext_tag_enable),
+    .max_read_request_size(),
+    .max_payload_size(),
+
+    /*
+     * Interface to Ultrascale PCIe IP core
+     */
+    .cfg_mgmt_addr(cfg_mgmt_addr),
+    .cfg_mgmt_function_number(cfg_mgmt_function_number),
+    .cfg_mgmt_write(cfg_mgmt_write),
+    .cfg_mgmt_write_data(cfg_mgmt_write_data),
+    .cfg_mgmt_byte_enable(cfg_mgmt_byte_enable),
+    .cfg_mgmt_read(cfg_mgmt_read),
+    .cfg_mgmt_read_data(cfg_mgmt_read_data),
+    .cfg_mgmt_read_write_done(cfg_mgmt_read_write_done)
+);
+
+pcie_us_axil_master #(
+    .AXIS_PCIE_DATA_WIDTH(AXIS_PCIE_DATA_WIDTH),
+    .AXIS_PCIE_KEEP_WIDTH(AXIS_PCIE_KEEP_WIDTH),
+    .AXIS_PCIE_CQ_USER_WIDTH(AXIS_PCIE_CQ_USER_WIDTH),
+    .AXIS_PCIE_CC_USER_WIDTH(AXIS_PCIE_CC_USER_WIDTH),
+    .AXI_DATA_WIDTH(AXIL_DATA_WIDTH),
+    .AXI_ADDR_WIDTH(AXIL_ADDR_WIDTH),
+    .ENABLE_PARITY(0)
+)
+pcie_us_axil_master_inst (
+    .clk(clk_250mhz),
+    .rst(rst_250mhz),
+
+    /*
+     * AXI input (CQ)
+     */
+    .s_axis_cq_tdata(s_axis_cq_tdata),
+    .s_axis_cq_tkeep(s_axis_cq_tkeep),
+    .s_axis_cq_tvalid(s_axis_cq_tvalid),
+    .s_axis_cq_tready(s_axis_cq_tready),
+    .s_axis_cq_tlast(s_axis_cq_tlast),
+    .s_axis_cq_tuser(s_axis_cq_tuser),
+
+    /*
+     * AXI input (CC)
+     */
+    .m_axis_cc_tdata(m_axis_cc_tdata),
+    .m_axis_cc_tkeep(m_axis_cc_tkeep),
+    .m_axis_cc_tvalid(m_axis_cc_tvalid),
+    .m_axis_cc_tready(m_axis_cc_tready),
+    .m_axis_cc_tlast(m_axis_cc_tlast),
+    .m_axis_cc_tuser(m_axis_cc_tuser),
+
+    /*
+     * AXI Lite Master output
+     */
+    .m_axil_awaddr(axil_pcie_awaddr),
+    .m_axil_awprot(axil_pcie_awprot),
+    .m_axil_awvalid(axil_pcie_awvalid),
+    .m_axil_awready(axil_pcie_awready),
+    .m_axil_wdata(axil_pcie_wdata),
+    .m_axil_wstrb(axil_pcie_wstrb),
+    .m_axil_wvalid(axil_pcie_wvalid),
+    .m_axil_wready(axil_pcie_wready),
+    .m_axil_bresp(axil_pcie_bresp),
+    .m_axil_bvalid(axil_pcie_bvalid),
+    .m_axil_bready(axil_pcie_bready),
+    .m_axil_araddr(axil_pcie_araddr),
+    .m_axil_arprot(axil_pcie_arprot),
+    .m_axil_arvalid(axil_pcie_arvalid),
+    .m_axil_arready(axil_pcie_arready),
+    .m_axil_rdata(axil_pcie_rdata),
+    .m_axil_rresp(axil_pcie_rresp),
+    .m_axil_rvalid(axil_pcie_rvalid),
+    .m_axil_rready(axil_pcie_rready),
+
+    /*
+     * Configuration
+     */
+    .completer_id({8'd0, 5'd0, 3'd0}),
+    .completer_id_enable(1'b0),
+
+    /*
+     * Status
+     */
+    .status_error_cor(status_error_cor_int[0]),
+    .status_error_uncor(status_error_uncor_int[0])
+);
+
+wire [AXIS_PCIE_DATA_WIDTH-1:0]    axis_rc_tdata_r;
+wire [AXIS_PCIE_KEEP_WIDTH-1:0]    axis_rc_tkeep_r;
+wire                               axis_rc_tlast_r;
+wire                               axis_rc_tready_r;
+wire [AXIS_PCIE_RC_USER_WIDTH-1:0] axis_rc_tuser_r;
+wire                               axis_rc_tvalid_r;
+
+axis_register #(
+    .DATA_WIDTH(AXIS_PCIE_DATA_WIDTH),
+    .KEEP_ENABLE(1),
+    .KEEP_WIDTH(AXIS_PCIE_KEEP_WIDTH),
+    .LAST_ENABLE(1),
+    .ID_ENABLE(0),
+    .DEST_ENABLE(0),
+    .USER_ENABLE(1),
+    .USER_WIDTH(AXIS_PCIE_RC_USER_WIDTH)
+)
+rc_reg (
+    .clk(clk_250mhz),
+    .rst(rst_250mhz),
+
+    /*
+     * AXI input
+     */
+    .s_axis_tdata(s_axis_rc_tdata),
+    .s_axis_tkeep(s_axis_rc_tkeep),
+    .s_axis_tvalid(s_axis_rc_tvalid),
+    .s_axis_tready(s_axis_rc_tready),
+    .s_axis_tlast(s_axis_rc_tlast),
+    .s_axis_tid(0),
+    .s_axis_tdest(0),
+    .s_axis_tuser(s_axis_rc_tuser),
+
+    /*
+     * AXI output
+     */
+    .m_axis_tdata(axis_rc_tdata_r),
+    .m_axis_tkeep(axis_rc_tkeep_r),
+    .m_axis_tvalid(axis_rc_tvalid_r),
+    .m_axis_tready(axis_rc_tready_r),
+    .m_axis_tlast(axis_rc_tlast_r),
+    .m_axis_tid(),
+    .m_axis_tdest(),
+    .m_axis_tuser(axis_rc_tuser_r)
+);
+
+wire [AXIS_PCIE_DATA_WIDTH-1:0]    axis_rq_tdata_r;
+wire [AXIS_PCIE_KEEP_WIDTH-1:0]    axis_rq_tkeep_r;
+wire                               axis_rq_tlast_r;
+wire                               axis_rq_tready_r;
+wire [AXIS_PCIE_RQ_USER_WIDTH-1:0] axis_rq_tuser_r;
+wire                               axis_rq_tvalid_r;
+
+axis_register #(
+    .DATA_WIDTH(AXIS_PCIE_DATA_WIDTH),
+    .KEEP_ENABLE(1),
+    .KEEP_WIDTH(AXIS_PCIE_KEEP_WIDTH),
+    .LAST_ENABLE(1),
+    .ID_ENABLE(0),
+    .DEST_ENABLE(0),
+    .USER_ENABLE(1),
+    .USER_WIDTH(AXIS_PCIE_RQ_USER_WIDTH)
+)
+rq_reg (
+    .clk(clk_250mhz),
+    .rst(rst_250mhz),
+
+    /*
+     * AXI input
+     */
+    .s_axis_tdata(axis_rq_tdata_r),
+    .s_axis_tkeep(axis_rq_tkeep_r),
+    .s_axis_tvalid(axis_rq_tvalid_r),
+    .s_axis_tready(axis_rq_tready_r),
+    .s_axis_tlast(axis_rq_tlast_r),
+    .s_axis_tid(0),
+    .s_axis_tdest(0),
+    .s_axis_tuser(axis_rq_tuser_r),
+
+    /*
+     * AXI output
+     */
+    .m_axis_tdata(m_axis_rq_tdata),
+    .m_axis_tkeep(m_axis_rq_tkeep),
+    .m_axis_tvalid(m_axis_rq_tvalid),
+    .m_axis_tready(m_axis_rq_tready),
+    .m_axis_tlast(m_axis_rq_tlast),
+    .m_axis_tid(),
+    .m_axis_tdest(),
+    .m_axis_tuser(m_axis_rq_tuser)
+);
+
+assign cfg_fc_sel = 3'b100;
+
+wire [7:0] pcie_tx_fc_nph_av = cfg_fc_nph;
+wire [7:0] pcie_tx_fc_ph_av = cfg_fc_ph;
+wire [11:0] pcie_tx_fc_pd_av = cfg_fc_pd;
+
+dma_if_pcie_us #
+(
+    .AXIS_PCIE_DATA_WIDTH(AXIS_PCIE_DATA_WIDTH),
+    .AXIS_PCIE_KEEP_WIDTH(AXIS_PCIE_KEEP_WIDTH),
+    .AXIS_PCIE_RC_USER_WIDTH(AXIS_PCIE_RC_USER_WIDTH),
+    .AXIS_PCIE_RQ_USER_WIDTH(AXIS_PCIE_RQ_USER_WIDTH),
+    .RQ_SEQ_NUM_WIDTH(RQ_SEQ_NUM_WIDTH),
+    .RQ_SEQ_NUM_ENABLE(1),
+    .SEG_COUNT(SEG_COUNT),
+    .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+    .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+    .SEG_BE_WIDTH(SEG_BE_WIDTH),
+    .RAM_SEL_WIDTH(RAM_SEL_WIDTH),
+    .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+    .PCIE_ADDR_WIDTH(PCIE_ADDR_WIDTH),
+    .PCIE_TAG_COUNT(64),
+    .PCIE_EXT_TAG_ENABLE(1),
+    .LEN_WIDTH(PCIE_DMA_LEN_WIDTH),
+    .TAG_WIDTH(PCIE_DMA_TAG_WIDTH),
+    .READ_OP_TABLE_SIZE(64),
+    .READ_TX_LIMIT(16),
+    .READ_TX_FC_ENABLE(1),
+    .WRITE_OP_TABLE_SIZE(16),
+    .WRITE_TX_LIMIT(3),
+    .WRITE_TX_FC_ENABLE(1)
+)
+dma_if_pcie_us_inst (
+    .clk(clk_250mhz),
+    .rst(rst_250mhz),
+
+    /*
+     * AXI input (RC)
+     */
+    .s_axis_rc_tdata(axis_rc_tdata_r),
+    .s_axis_rc_tkeep(axis_rc_tkeep_r),
+    .s_axis_rc_tvalid(axis_rc_tvalid_r),
+    .s_axis_rc_tready(axis_rc_tready_r),
+    .s_axis_rc_tlast(axis_rc_tlast_r),
+    .s_axis_rc_tuser(axis_rc_tuser_r),
+
+    /*
+     * AXI output (RQ)
+     */
+    .m_axis_rq_tdata(axis_rq_tdata_r),
+    .m_axis_rq_tkeep(axis_rq_tkeep_r),
+    .m_axis_rq_tvalid(axis_rq_tvalid_r),
+    .m_axis_rq_tready(axis_rq_tready_r),
+    .m_axis_rq_tlast(axis_rq_tlast_r),
+    .m_axis_rq_tuser(axis_rq_tuser_r),
+
+    /*
+     * Transmit sequence number input
+     */
+    .s_axis_rq_seq_num_0(s_axis_rq_seq_num_0),
+    .s_axis_rq_seq_num_valid_0(s_axis_rq_seq_num_valid_0),
+    .s_axis_rq_seq_num_1(s_axis_rq_seq_num_1),
+    .s_axis_rq_seq_num_valid_1(s_axis_rq_seq_num_valid_1),
+
+    /*
+     * Transmit flow control
+     */
+    .pcie_tx_fc_nph_av(pcie_tx_fc_nph_av),
+    .pcie_tx_fc_ph_av(pcie_tx_fc_ph_av),
+    .pcie_tx_fc_pd_av(pcie_tx_fc_pd_av),
+
+    /*
+     * AXI read descriptor input
+     */
+    .s_axis_read_desc_pcie_addr(pcie_dma_read_desc_pcie_addr),
+    .s_axis_read_desc_ram_sel(pcie_dma_read_desc_ram_sel),
+    .s_axis_read_desc_ram_addr(pcie_dma_read_desc_ram_addr),
+    .s_axis_read_desc_len(pcie_dma_read_desc_len),
+    .s_axis_read_desc_tag(pcie_dma_read_desc_tag),
+    .s_axis_read_desc_valid(pcie_dma_read_desc_valid),
+    .s_axis_read_desc_ready(pcie_dma_read_desc_ready),
+
+    /*
+     * AXI read descriptor status output
+     */
+    .m_axis_read_desc_status_tag(pcie_dma_read_desc_status_tag),
+    .m_axis_read_desc_status_valid(pcie_dma_read_desc_status_valid),
+
+    /*
+     * AXI write descriptor input
+     */
+    .s_axis_write_desc_pcie_addr(pcie_dma_write_desc_pcie_addr),
+    .s_axis_write_desc_ram_sel(pcie_dma_write_desc_ram_sel),
+    .s_axis_write_desc_ram_addr(pcie_dma_write_desc_ram_addr),
+    .s_axis_write_desc_len(pcie_dma_write_desc_len),
+    .s_axis_write_desc_tag(pcie_dma_write_desc_tag),
+    .s_axis_write_desc_valid(pcie_dma_write_desc_valid),
+    .s_axis_write_desc_ready(pcie_dma_write_desc_ready),
+
+    /*
+     * AXI write descriptor status output
+     */
+    .m_axis_write_desc_status_tag(pcie_dma_write_desc_status_tag),
+    .m_axis_write_desc_status_valid(pcie_dma_write_desc_status_valid),
+
+    /*
+     * RAM interface
+     */
+    .ram_wr_cmd_sel(dma_ram_wr_cmd_sel),
+    .ram_wr_cmd_be(dma_ram_wr_cmd_be),
+    .ram_wr_cmd_addr(dma_ram_wr_cmd_addr),
+    .ram_wr_cmd_data(dma_ram_wr_cmd_data),
+    .ram_wr_cmd_valid(dma_ram_wr_cmd_valid),
+    .ram_wr_cmd_ready(dma_ram_wr_cmd_ready),
+    .ram_rd_cmd_sel(dma_ram_rd_cmd_sel),
+    .ram_rd_cmd_addr(dma_ram_rd_cmd_addr),
+    .ram_rd_cmd_valid(dma_ram_rd_cmd_valid),
+    .ram_rd_cmd_ready(dma_ram_rd_cmd_ready),
+    .ram_rd_resp_data(dma_ram_rd_resp_data),
+    .ram_rd_resp_valid(dma_ram_rd_resp_valid),
+    .ram_rd_resp_ready(dma_ram_rd_resp_ready),
+
+    /*
+     * Configuration
+     */
+    .read_enable(pcie_dma_enable),
+    .write_enable(pcie_dma_enable),
+    .ext_tag_enable(ext_tag_enable),
+    .requester_id({8'd0, 5'd0, 3'd0}),
+    .requester_id_enable(1'b0),
+    .max_read_request_size(cfg_max_read_req),
+    .max_payload_size(cfg_max_payload),
+
+    /*
+     * Status
+     */
+    .status_error_cor(status_error_cor_int[1]),
+    .status_error_uncor(status_error_uncor_int[1])
+);
+
+pulse_merge #(
+    .INPUT_WIDTH(2),
+    .COUNT_WIDTH(4)
+)
+status_error_cor_pm_inst (
+    .clk(clk_250mhz),
+    .rst(rst_250mhz),
+
+    .pulse_in(status_error_cor_int),
+    .count_out(),
+    .pulse_out(status_error_cor)
+);
+
+pulse_merge #(
+    .INPUT_WIDTH(2),
+    .COUNT_WIDTH(4)
+)
+status_error_uncor_pm_inst (
+    .clk(clk_250mhz),
+    .rst(rst_250mhz),
+
+    .pulse_in(status_error_uncor_int),
+    .count_out(),
+    .pulse_out(status_error_uncor)
+);
+
+pcie_us_msi #(
+    .MSI_COUNT(32)
+)
+pcie_us_msi_inst (
+    .clk(clk_250mhz),
+    .rst(rst_250mhz),
+
+    .msi_irq(msi_irq),
+
+    .cfg_interrupt_msi_enable(cfg_interrupt_msi_enable),
+    .cfg_interrupt_msi_vf_enable(0),
+    .cfg_interrupt_msi_mmenable(cfg_interrupt_msi_mmenable),
+    .cfg_interrupt_msi_mask_update(cfg_interrupt_msi_mask_update),
+    .cfg_interrupt_msi_data(cfg_interrupt_msi_data),
+    .cfg_interrupt_msi_select(cfg_interrupt_msi_select),
+    .cfg_interrupt_msi_int(cfg_interrupt_msi_int),
+    .cfg_interrupt_msi_pending_status(cfg_interrupt_msi_pending_status),
+    .cfg_interrupt_msi_pending_status_data_enable(cfg_interrupt_msi_pending_status_data_enable),
+    .cfg_interrupt_msi_pending_status_function_num(cfg_interrupt_msi_pending_status_function_num),
+    .cfg_interrupt_msi_sent(cfg_interrupt_msi_sent),
+    .cfg_interrupt_msi_fail(cfg_interrupt_msi_fail),
+    .cfg_interrupt_msi_attr(cfg_interrupt_msi_attr),
+    .cfg_interrupt_msi_tph_present(cfg_interrupt_msi_tph_present),
+    .cfg_interrupt_msi_tph_type(cfg_interrupt_msi_tph_type),
+    .cfg_interrupt_msi_tph_st_tag(cfg_interrupt_msi_tph_st_tag),
+    .cfg_interrupt_msi_function_number(cfg_interrupt_msi_function_number)
+);
+
+wire [IF_COUNT*AXIL_ADDR_WIDTH-1:0] axil_if_awaddr;
+wire [IF_COUNT*3-1:0]               axil_if_awprot;
+wire [IF_COUNT-1:0]                 axil_if_awvalid;
+wire [IF_COUNT-1:0]                 axil_if_awready;
+wire [IF_COUNT*AXIL_DATA_WIDTH-1:0] axil_if_wdata;
+wire [IF_COUNT*AXIL_STRB_WIDTH-1:0] axil_if_wstrb;
+wire [IF_COUNT-1:0]                 axil_if_wvalid;
+wire [IF_COUNT-1:0]                 axil_if_wready;
+wire [IF_COUNT*2-1:0]               axil_if_bresp;
+wire [IF_COUNT-1:0]                 axil_if_bvalid;
+wire [IF_COUNT-1:0]                 axil_if_bready;
+wire [IF_COUNT*AXIL_ADDR_WIDTH-1:0] axil_if_araddr;
+wire [IF_COUNT*3-1:0]               axil_if_arprot;
+wire [IF_COUNT-1:0]                 axil_if_arvalid;
+wire [IF_COUNT-1:0]                 axil_if_arready;
+wire [IF_COUNT*AXIL_DATA_WIDTH-1:0] axil_if_rdata;
+wire [IF_COUNT*2-1:0]               axil_if_rresp;
+wire [IF_COUNT-1:0]                 axil_if_rvalid;
+wire [IF_COUNT-1:0]                 axil_if_rready;
+
+wire [IF_COUNT*AXIL_CSR_ADDR_WIDTH-1:0] axil_if_csr_awaddr;
+wire [IF_COUNT*3-1:0]                   axil_if_csr_awprot;
+wire [IF_COUNT-1:0]                     axil_if_csr_awvalid;
+wire [IF_COUNT-1:0]                     axil_if_csr_awready;
+wire [IF_COUNT*AXIL_DATA_WIDTH-1:0]     axil_if_csr_wdata;
+wire [IF_COUNT*AXIL_STRB_WIDTH-1:0]     axil_if_csr_wstrb;
+wire [IF_COUNT-1:0]                     axil_if_csr_wvalid;
+wire [IF_COUNT-1:0]                     axil_if_csr_wready;
+wire [IF_COUNT*2-1:0]                   axil_if_csr_bresp;
+wire [IF_COUNT-1:0]                     axil_if_csr_bvalid;
+wire [IF_COUNT-1:0]                     axil_if_csr_bready;
+wire [IF_COUNT*AXIL_CSR_ADDR_WIDTH-1:0] axil_if_csr_araddr;
+wire [IF_COUNT*3-1:0]                   axil_if_csr_arprot;
+wire [IF_COUNT-1:0]                     axil_if_csr_arvalid;
+wire [IF_COUNT-1:0]                     axil_if_csr_arready;
+wire [IF_COUNT*AXIL_DATA_WIDTH-1:0]     axil_if_csr_rdata;
+wire [IF_COUNT*2-1:0]                   axil_if_csr_rresp;
+wire [IF_COUNT-1:0]                     axil_if_csr_rvalid;
+wire [IF_COUNT-1:0]                     axil_if_csr_rready;
+
+axil_interconnect #(
+    .DATA_WIDTH(AXIL_DATA_WIDTH),
+    .ADDR_WIDTH(AXIL_ADDR_WIDTH),
+    .S_COUNT(1),
+    .M_COUNT(IF_COUNT),
+    .M_BASE_ADDR(0),
+    .M_ADDR_WIDTH({IF_COUNT{w_32(IF_AXIL_ADDR_WIDTH)}}),
+    .M_CONNECT_READ({IF_COUNT{1'b1}}),
+    .M_CONNECT_WRITE({IF_COUNT{1'b1}})
+)
+axil_interconnect_inst (
+    .clk(clk_250mhz),
+    .rst(rst_250mhz),
+    .s_axil_awaddr(axil_pcie_awaddr),
+    .s_axil_awprot(axil_pcie_awprot),
+    .s_axil_awvalid(axil_pcie_awvalid),
+    .s_axil_awready(axil_pcie_awready),
+    .s_axil_wdata(axil_pcie_wdata),
+    .s_axil_wstrb(axil_pcie_wstrb),
+    .s_axil_wvalid(axil_pcie_wvalid),
+    .s_axil_wready(axil_pcie_wready),
+    .s_axil_bresp(axil_pcie_bresp),
+    .s_axil_bvalid(axil_pcie_bvalid),
+    .s_axil_bready(axil_pcie_bready),
+    .s_axil_araddr(axil_pcie_araddr),
+    .s_axil_arprot(axil_pcie_arprot),
+    .s_axil_arvalid(axil_pcie_arvalid),
+    .s_axil_arready(axil_pcie_arready),
+    .s_axil_rdata(axil_pcie_rdata),
+    .s_axil_rresp(axil_pcie_rresp),
+    .s_axil_rvalid(axil_pcie_rvalid),
+    .s_axil_rready(axil_pcie_rready),
+    .m_axil_awaddr(axil_if_awaddr),
+    .m_axil_awprot(axil_if_awprot),
+    .m_axil_awvalid(axil_if_awvalid),
+    .m_axil_awready(axil_if_awready),
+    .m_axil_wdata(axil_if_wdata),
+    .m_axil_wstrb(axil_if_wstrb),
+    .m_axil_wvalid(axil_if_wvalid),
+    .m_axil_wready(axil_if_wready),
+    .m_axil_bresp(axil_if_bresp),
+    .m_axil_bvalid(axil_if_bvalid),
+    .m_axil_bready(axil_if_bready),
+    .m_axil_araddr(axil_if_araddr),
+    .m_axil_arprot(axil_if_arprot),
+    .m_axil_arvalid(axil_if_arvalid),
+    .m_axil_arready(axil_if_arready),
+    .m_axil_rdata(axil_if_rdata),
+    .m_axil_rresp(axil_if_rresp),
+    .m_axil_rvalid(axil_if_rvalid),
+    .m_axil_rready(axil_if_rready)
+);
+
+axil_interconnect #(
+    .DATA_WIDTH(AXIL_DATA_WIDTH),
+    .ADDR_WIDTH(AXIL_CSR_ADDR_WIDTH),
+    .S_COUNT(IF_COUNT),
+    .M_COUNT(1),
+    .M_BASE_ADDR(0),
+    .M_ADDR_WIDTH({w_32(AXIL_CSR_ADDR_WIDTH-1)}),
+    .M_CONNECT_READ({1{{IF_COUNT{1'b1}}}}),
+    .M_CONNECT_WRITE({1{{IF_COUNT{1'b1}}}})
+)
+axil_csr_interconnect_inst (
+    .clk(clk_250mhz),
+    .rst(rst_250mhz),
+    .s_axil_awaddr(axil_if_csr_awaddr),
+    .s_axil_awprot(axil_if_csr_awprot),
+    .s_axil_awvalid(axil_if_csr_awvalid),
+    .s_axil_awready(axil_if_csr_awready),
+    .s_axil_wdata(axil_if_csr_wdata),
+    .s_axil_wstrb(axil_if_csr_wstrb),
+    .s_axil_wvalid(axil_if_csr_wvalid),
+    .s_axil_wready(axil_if_csr_wready),
+    .s_axil_bresp(axil_if_csr_bresp),
+    .s_axil_bvalid(axil_if_csr_bvalid),
+    .s_axil_bready(axil_if_csr_bready),
+    .s_axil_araddr(axil_if_csr_araddr),
+    .s_axil_arprot(axil_if_csr_arprot),
+    .s_axil_arvalid(axil_if_csr_arvalid),
+    .s_axil_arready(axil_if_csr_arready),
+    .s_axil_rdata(axil_if_csr_rdata),
+    .s_axil_rresp(axil_if_csr_rresp),
+    .s_axil_rvalid(axil_if_csr_rvalid),
+    .s_axil_rready(axil_if_csr_rready),
+    .m_axil_awaddr(  {axil_csr_awaddr}),
+    .m_axil_awprot(  {axil_csr_awprot}),
+    .m_axil_awvalid( {axil_csr_awvalid}),
+    .m_axil_awready( {axil_csr_awready}),
+    .m_axil_wdata(   {axil_csr_wdata}),
+    .m_axil_wstrb(   {axil_csr_wstrb}),
+    .m_axil_wvalid(  {axil_csr_wvalid}),
+    .m_axil_wready(  {axil_csr_wready}),
+    .m_axil_bresp(   {axil_csr_bresp}),
+    .m_axil_bvalid(  {axil_csr_bvalid}),
+    .m_axil_bready(  {axil_csr_bready}),
+    .m_axil_araddr(  {axil_csr_araddr}),
+    .m_axil_arprot(  {axil_csr_arprot}),
+    .m_axil_arvalid( {axil_csr_arvalid}),
+    .m_axil_arready( {axil_csr_arready}),
+    .m_axil_rdata(   {axil_csr_rdata}),
+    .m_axil_rresp(   {axil_csr_rresp}),
+    .m_axil_rvalid(  {axil_csr_rvalid}),
+    .m_axil_rready(  {axil_csr_rready})
+);
+
+wire [PCIE_ADDR_WIDTH-1:0]     pcie_ctrl_dma_read_desc_pcie_addr;
+wire [RAM_SEL_WIDTH-2:0]       pcie_ctrl_dma_read_desc_ram_sel;
+wire [RAM_ADDR_WIDTH-1:0]      pcie_ctrl_dma_read_desc_ram_addr;
+wire [PCIE_DMA_LEN_WIDTH-1:0]  pcie_ctrl_dma_read_desc_len;
+wire [PCIE_DMA_TAG_WIDTH-2:0]  pcie_ctrl_dma_read_desc_tag;
+wire                           pcie_ctrl_dma_read_desc_valid;
+wire                           pcie_ctrl_dma_read_desc_ready;
+
+wire [PCIE_DMA_TAG_WIDTH-2:0]  pcie_ctrl_dma_read_desc_status_tag;
+wire                           pcie_ctrl_dma_read_desc_status_valid;
+
+wire [PCIE_ADDR_WIDTH-1:0]     pcie_ctrl_dma_write_desc_pcie_addr;
+wire [RAM_SEL_WIDTH-2:0]       pcie_ctrl_dma_write_desc_ram_sel;
+wire [RAM_ADDR_WIDTH-1:0]      pcie_ctrl_dma_write_desc_ram_addr;
+wire [PCIE_DMA_LEN_WIDTH-1:0]  pcie_ctrl_dma_write_desc_len;
+wire [PCIE_DMA_TAG_WIDTH-2:0]  pcie_ctrl_dma_write_desc_tag;
+wire                           pcie_ctrl_dma_write_desc_valid;
+wire                           pcie_ctrl_dma_write_desc_ready;
+
+wire [PCIE_DMA_TAG_WIDTH-2:0]  pcie_ctrl_dma_write_desc_status_tag;
+wire                           pcie_ctrl_dma_write_desc_status_valid;
+
+wire [PCIE_ADDR_WIDTH-1:0]     pcie_data_dma_read_desc_pcie_addr;
+wire [RAM_SEL_WIDTH-2:0]       pcie_data_dma_read_desc_ram_sel;
+wire [RAM_ADDR_WIDTH-1:0]      pcie_data_dma_read_desc_ram_addr;
+wire [PCIE_DMA_LEN_WIDTH-1:0]  pcie_data_dma_read_desc_len;
+wire [PCIE_DMA_TAG_WIDTH-2:0]  pcie_data_dma_read_desc_tag;
+wire                           pcie_data_dma_read_desc_valid;
+wire                           pcie_data_dma_read_desc_ready;
+
+wire [PCIE_DMA_TAG_WIDTH-2:0]  pcie_data_dma_read_desc_status_tag;
+wire                           pcie_data_dma_read_desc_status_valid;
+
+wire [PCIE_ADDR_WIDTH-1:0]     pcie_data_dma_write_desc_pcie_addr;
+wire [RAM_SEL_WIDTH-2:0]       pcie_data_dma_write_desc_ram_sel;
+wire [RAM_ADDR_WIDTH-1:0]      pcie_data_dma_write_desc_ram_addr;
+wire [PCIE_DMA_LEN_WIDTH-1:0]  pcie_data_dma_write_desc_len;
+wire [PCIE_DMA_TAG_WIDTH-2:0]  pcie_data_dma_write_desc_tag;
+wire                           pcie_data_dma_write_desc_valid;
+wire                           pcie_data_dma_write_desc_ready;
+
+wire [PCIE_DMA_TAG_WIDTH-2:0]  pcie_data_dma_write_desc_status_tag;
+wire                           pcie_data_dma_write_desc_status_valid;
+
+wire [SEG_COUNT*(RAM_SEL_WIDTH-1)-1:0]  ctrl_dma_ram_wr_cmd_sel;
+wire [SEG_COUNT*SEG_BE_WIDTH-1:0]       ctrl_dma_ram_wr_cmd_be;
+wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0]     ctrl_dma_ram_wr_cmd_addr;
+wire [SEG_COUNT*SEG_DATA_WIDTH-1:0]     ctrl_dma_ram_wr_cmd_data;
+wire [SEG_COUNT-1:0]                    ctrl_dma_ram_wr_cmd_valid;
+wire [SEG_COUNT-1:0]                    ctrl_dma_ram_wr_cmd_ready;
+wire [SEG_COUNT*(RAM_SEL_WIDTH-1)-1:0]  ctrl_dma_ram_rd_cmd_sel;
+wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0]     ctrl_dma_ram_rd_cmd_addr;
+wire [SEG_COUNT-1:0]                    ctrl_dma_ram_rd_cmd_valid;
+wire [SEG_COUNT-1:0]                    ctrl_dma_ram_rd_cmd_ready;
+wire [SEG_COUNT*SEG_DATA_WIDTH-1:0]     ctrl_dma_ram_rd_resp_data;
+wire [SEG_COUNT-1:0]                    ctrl_dma_ram_rd_resp_valid;
+wire [SEG_COUNT-1:0]                    ctrl_dma_ram_rd_resp_ready;
+
+wire [SEG_COUNT*(RAM_SEL_WIDTH-1)-1:0]  data_dma_ram_wr_cmd_sel;
+wire [SEG_COUNT*SEG_BE_WIDTH-1:0]       data_dma_ram_wr_cmd_be;
+wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0]     data_dma_ram_wr_cmd_addr;
+wire [SEG_COUNT*SEG_DATA_WIDTH-1:0]     data_dma_ram_wr_cmd_data;
+wire [SEG_COUNT-1:0]                    data_dma_ram_wr_cmd_valid;
+wire [SEG_COUNT-1:0]                    data_dma_ram_wr_cmd_ready;
+wire [SEG_COUNT*(RAM_SEL_WIDTH-1)-1:0]  data_dma_ram_rd_cmd_sel;
+wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0]     data_dma_ram_rd_cmd_addr;
+wire [SEG_COUNT-1:0]                    data_dma_ram_rd_cmd_valid;
+wire [SEG_COUNT-1:0]                    data_dma_ram_rd_cmd_ready;
+wire [SEG_COUNT*SEG_DATA_WIDTH-1:0]     data_dma_ram_rd_resp_data;
+wire [SEG_COUNT-1:0]                    data_dma_ram_rd_resp_valid;
+wire [SEG_COUNT-1:0]                    data_dma_ram_rd_resp_ready;
+
+dma_if_mux #
+(
+    .PORTS(2),
+    .SEG_COUNT(SEG_COUNT),
+    .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+    .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+    .SEG_BE_WIDTH(SEG_BE_WIDTH),
+    .S_RAM_SEL_WIDTH(RAM_SEL_WIDTH-1),
+    .M_RAM_SEL_WIDTH(RAM_SEL_WIDTH),
+    .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+    .DMA_ADDR_WIDTH(PCIE_ADDR_WIDTH),
+    .LEN_WIDTH(PCIE_DMA_LEN_WIDTH),
+    .S_TAG_WIDTH(PCIE_DMA_TAG_WIDTH-1),
+    .M_TAG_WIDTH(PCIE_DMA_TAG_WIDTH),
+    .ARB_TYPE("PRIORITY"),
+    .LSB_PRIORITY("HIGH")
+)
+dma_if_mux_inst (
+    .clk(clk_250mhz),
+    .rst(rst_250mhz),
+
+    /*
+     * Read descriptor output (to DMA interface)
+     */
+    .m_axis_read_desc_dma_addr(pcie_dma_read_desc_pcie_addr),
+    .m_axis_read_desc_ram_sel(pcie_dma_read_desc_ram_sel),
+    .m_axis_read_desc_ram_addr(pcie_dma_read_desc_ram_addr),
+    .m_axis_read_desc_len(pcie_dma_read_desc_len),
+    .m_axis_read_desc_tag(pcie_dma_read_desc_tag),
+    .m_axis_read_desc_valid(pcie_dma_read_desc_valid),
+    .m_axis_read_desc_ready(pcie_dma_read_desc_ready),
+
+    /*
+     * Read descriptor status input (from DMA interface)
+     */
+    .s_axis_read_desc_status_tag(pcie_dma_read_desc_status_tag),
+    .s_axis_read_desc_status_valid(pcie_dma_read_desc_status_valid),
+
+    /*
+     * Read descriptor input
+     */
+    .s_axis_read_desc_dma_addr({pcie_data_dma_read_desc_pcie_addr, pcie_ctrl_dma_read_desc_pcie_addr}),
+    .s_axis_read_desc_ram_sel({pcie_data_dma_read_desc_ram_sel, pcie_ctrl_dma_read_desc_ram_sel}),
+    .s_axis_read_desc_ram_addr({pcie_data_dma_read_desc_ram_addr, pcie_ctrl_dma_read_desc_ram_addr}),
+    .s_axis_read_desc_len({pcie_data_dma_read_desc_len, pcie_ctrl_dma_read_desc_len}),
+    .s_axis_read_desc_tag({pcie_data_dma_read_desc_tag, pcie_ctrl_dma_read_desc_tag}),
+    .s_axis_read_desc_valid({pcie_data_dma_read_desc_valid, pcie_ctrl_dma_read_desc_valid}),
+    .s_axis_read_desc_ready({pcie_data_dma_read_desc_ready, pcie_ctrl_dma_read_desc_ready}),
+
+    /*
+     * Read descriptor status output
+     */
+    .m_axis_read_desc_status_tag({pcie_data_dma_read_desc_status_tag, pcie_ctrl_dma_read_desc_status_tag}),
+    .m_axis_read_desc_status_valid({pcie_data_dma_read_desc_status_valid, pcie_ctrl_dma_read_desc_status_valid}),
+
+    /*
+     * Write descriptor output (to DMA interface)
+     */
+    .m_axis_write_desc_dma_addr(pcie_dma_write_desc_pcie_addr),
+    .m_axis_write_desc_ram_sel(pcie_dma_write_desc_ram_sel),
+    .m_axis_write_desc_ram_addr(pcie_dma_write_desc_ram_addr),
+    .m_axis_write_desc_len(pcie_dma_write_desc_len),
+    .m_axis_write_desc_tag(pcie_dma_write_desc_tag),
+    .m_axis_write_desc_valid(pcie_dma_write_desc_valid),
+    .m_axis_write_desc_ready(pcie_dma_write_desc_ready),
+
+    /*
+     * Write descriptor status input (from DMA interface)
+     */
+    .s_axis_write_desc_status_tag(pcie_dma_write_desc_status_tag),
+    .s_axis_write_desc_status_valid(pcie_dma_write_desc_status_valid),
+
+    /*
+     * Write descriptor input
+     */
+    .s_axis_write_desc_dma_addr({pcie_data_dma_write_desc_pcie_addr, pcie_ctrl_dma_write_desc_pcie_addr}),
+    .s_axis_write_desc_ram_sel({pcie_data_dma_write_desc_ram_sel, pcie_ctrl_dma_write_desc_ram_sel}),
+    .s_axis_write_desc_ram_addr({pcie_data_dma_write_desc_ram_addr, pcie_ctrl_dma_write_desc_ram_addr}),
+    .s_axis_write_desc_len({pcie_data_dma_write_desc_len, pcie_ctrl_dma_write_desc_len}),
+    .s_axis_write_desc_tag({pcie_data_dma_write_desc_tag, pcie_ctrl_dma_write_desc_tag}),
+    .s_axis_write_desc_valid({pcie_data_dma_write_desc_valid, pcie_ctrl_dma_write_desc_valid}),
+    .s_axis_write_desc_ready({pcie_data_dma_write_desc_ready, pcie_ctrl_dma_write_desc_ready}),
+
+    /*
+     * Write descriptor status output
+     */
+    .m_axis_write_desc_status_tag({pcie_data_dma_write_desc_status_tag, pcie_ctrl_dma_write_desc_status_tag}),
+    .m_axis_write_desc_status_valid({pcie_data_dma_write_desc_status_valid, pcie_ctrl_dma_write_desc_status_valid}),
+
+    /*
+     * RAM interface (from DMA interface)
+     */
+    .if_ram_wr_cmd_sel(dma_ram_wr_cmd_sel),
+    .if_ram_wr_cmd_be(dma_ram_wr_cmd_be),
+    .if_ram_wr_cmd_addr(dma_ram_wr_cmd_addr),
+    .if_ram_wr_cmd_data(dma_ram_wr_cmd_data),
+    .if_ram_wr_cmd_valid(dma_ram_wr_cmd_valid),
+    .if_ram_wr_cmd_ready(dma_ram_wr_cmd_ready),
+    .if_ram_rd_cmd_sel(dma_ram_rd_cmd_sel),
+    .if_ram_rd_cmd_addr(dma_ram_rd_cmd_addr),
+    .if_ram_rd_cmd_valid(dma_ram_rd_cmd_valid),
+    .if_ram_rd_cmd_ready(dma_ram_rd_cmd_ready),
+    .if_ram_rd_resp_data(dma_ram_rd_resp_data),
+    .if_ram_rd_resp_valid(dma_ram_rd_resp_valid),
+    .if_ram_rd_resp_ready(dma_ram_rd_resp_ready),
+
+    /*
+     * RAM interface
+     */
+    .ram_wr_cmd_sel({data_dma_ram_wr_cmd_sel, ctrl_dma_ram_wr_cmd_sel}),
+    .ram_wr_cmd_be({data_dma_ram_wr_cmd_be, ctrl_dma_ram_wr_cmd_be}),
+    .ram_wr_cmd_addr({data_dma_ram_wr_cmd_addr, ctrl_dma_ram_wr_cmd_addr}),
+    .ram_wr_cmd_data({data_dma_ram_wr_cmd_data, ctrl_dma_ram_wr_cmd_data}),
+    .ram_wr_cmd_valid({data_dma_ram_wr_cmd_valid, ctrl_dma_ram_wr_cmd_valid}),
+    .ram_wr_cmd_ready({data_dma_ram_wr_cmd_ready, ctrl_dma_ram_wr_cmd_ready}),
+    .ram_rd_cmd_sel({data_dma_ram_rd_cmd_sel, ctrl_dma_ram_rd_cmd_sel}),
+    .ram_rd_cmd_addr({data_dma_ram_rd_cmd_addr, ctrl_dma_ram_rd_cmd_addr}),
+    .ram_rd_cmd_valid({data_dma_ram_rd_cmd_valid, ctrl_dma_ram_rd_cmd_valid}),
+    .ram_rd_cmd_ready({data_dma_ram_rd_cmd_ready, ctrl_dma_ram_rd_cmd_ready}),
+    .ram_rd_resp_data({data_dma_ram_rd_resp_data, ctrl_dma_ram_rd_resp_data}),
+    .ram_rd_resp_valid({data_dma_ram_rd_resp_valid, ctrl_dma_ram_rd_resp_valid}),
+    .ram_rd_resp_ready({data_dma_ram_rd_resp_ready, ctrl_dma_ram_rd_resp_ready})
+);
+
+wire [IF_COUNT*PCIE_ADDR_WIDTH-1:0]        if_pcie_ctrl_dma_read_desc_pcie_addr;
+wire [IF_COUNT*IF_RAM_SEL_WIDTH-1:0]       if_pcie_ctrl_dma_read_desc_ram_sel;
+wire [IF_COUNT*RAM_ADDR_WIDTH-1:0]         if_pcie_ctrl_dma_read_desc_ram_addr;
+wire [IF_COUNT*PCIE_DMA_LEN_WIDTH-1:0]     if_pcie_ctrl_dma_read_desc_len;
+wire [IF_COUNT*IF_PCIE_DMA_TAG_WIDTH-1:0]  if_pcie_ctrl_dma_read_desc_tag;
+wire [IF_COUNT-1:0]                        if_pcie_ctrl_dma_read_desc_valid;
+wire [IF_COUNT-1:0]                        if_pcie_ctrl_dma_read_desc_ready;
+
+wire [IF_COUNT*IF_PCIE_DMA_TAG_WIDTH-1:0]  if_pcie_ctrl_dma_read_desc_status_tag;
+wire [IF_COUNT-1:0]                        if_pcie_ctrl_dma_read_desc_status_valid;
+
+wire [IF_COUNT*PCIE_ADDR_WIDTH-1:0]        if_pcie_ctrl_dma_write_desc_pcie_addr;
+wire [IF_COUNT*IF_RAM_SEL_WIDTH-1:0]       if_pcie_ctrl_dma_write_desc_ram_sel;
+wire [IF_COUNT*RAM_ADDR_WIDTH-1:0]         if_pcie_ctrl_dma_write_desc_ram_addr;
+wire [IF_COUNT*PCIE_DMA_LEN_WIDTH-1:0]     if_pcie_ctrl_dma_write_desc_len;
+wire [IF_COUNT*IF_PCIE_DMA_TAG_WIDTH-1:0]  if_pcie_ctrl_dma_write_desc_tag;
+wire [IF_COUNT-1:0]                        if_pcie_ctrl_dma_write_desc_valid;
+wire [IF_COUNT-1:0]                        if_pcie_ctrl_dma_write_desc_ready;
+
+wire [IF_COUNT*IF_PCIE_DMA_TAG_WIDTH-1:0]  if_pcie_ctrl_dma_write_desc_status_tag;
+wire [IF_COUNT-1:0]                        if_pcie_ctrl_dma_write_desc_status_valid;
+
+wire [IF_COUNT*PCIE_ADDR_WIDTH-1:0]        if_pcie_data_dma_read_desc_pcie_addr;
+wire [IF_COUNT*IF_RAM_SEL_WIDTH-1:0]       if_pcie_data_dma_read_desc_ram_sel;
+wire [IF_COUNT*RAM_ADDR_WIDTH-1:0]         if_pcie_data_dma_read_desc_ram_addr;
+wire [IF_COUNT*PCIE_DMA_LEN_WIDTH-1:0]     if_pcie_data_dma_read_desc_len;
+wire [IF_COUNT*IF_PCIE_DMA_TAG_WIDTH-1:0]  if_pcie_data_dma_read_desc_tag;
+wire [IF_COUNT-1:0]                        if_pcie_data_dma_read_desc_valid;
+wire [IF_COUNT-1:0]                        if_pcie_data_dma_read_desc_ready;
+
+wire [IF_COUNT*IF_PCIE_DMA_TAG_WIDTH-1:0]  if_pcie_data_dma_read_desc_status_tag;
+wire [IF_COUNT-1:0]                        if_pcie_data_dma_read_desc_status_valid;
+
+wire [IF_COUNT*PCIE_ADDR_WIDTH-1:0]        if_pcie_data_dma_write_desc_pcie_addr;
+wire [IF_COUNT*IF_RAM_SEL_WIDTH-1:0]       if_pcie_data_dma_write_desc_ram_sel;
+wire [IF_COUNT*RAM_ADDR_WIDTH-1:0]         if_pcie_data_dma_write_desc_ram_addr;
+wire [IF_COUNT*PCIE_DMA_LEN_WIDTH-1:0]     if_pcie_data_dma_write_desc_len;
+wire [IF_COUNT*IF_PCIE_DMA_TAG_WIDTH-1:0]  if_pcie_data_dma_write_desc_tag;
+wire [IF_COUNT-1:0]                        if_pcie_data_dma_write_desc_valid;
+wire [IF_COUNT-1:0]                        if_pcie_data_dma_write_desc_ready;
+
+wire [IF_COUNT*IF_PCIE_DMA_TAG_WIDTH-1:0]  if_pcie_data_dma_write_desc_status_tag;
+wire [IF_COUNT-1:0]                        if_pcie_data_dma_write_desc_status_valid;
+
+wire [IF_COUNT*SEG_COUNT*IF_RAM_SEL_WIDTH-1:0] if_ctrl_dma_ram_wr_cmd_sel;
+wire [IF_COUNT*SEG_COUNT*SEG_BE_WIDTH-1:0]     if_ctrl_dma_ram_wr_cmd_be;
+wire [IF_COUNT*SEG_COUNT*SEG_ADDR_WIDTH-1:0]   if_ctrl_dma_ram_wr_cmd_addr;
+wire [IF_COUNT*SEG_COUNT*SEG_DATA_WIDTH-1:0]   if_ctrl_dma_ram_wr_cmd_data;
+wire [IF_COUNT*SEG_COUNT-1:0]                  if_ctrl_dma_ram_wr_cmd_valid;
+wire [IF_COUNT*SEG_COUNT-1:0]                  if_ctrl_dma_ram_wr_cmd_ready;
+wire [IF_COUNT*SEG_COUNT*IF_RAM_SEL_WIDTH-1:0] if_ctrl_dma_ram_rd_cmd_sel;
+wire [IF_COUNT*SEG_COUNT*SEG_ADDR_WIDTH-1:0]   if_ctrl_dma_ram_rd_cmd_addr;
+wire [IF_COUNT*SEG_COUNT-1:0]                  if_ctrl_dma_ram_rd_cmd_valid;
+wire [IF_COUNT*SEG_COUNT-1:0]                  if_ctrl_dma_ram_rd_cmd_ready;
+wire [IF_COUNT*SEG_COUNT*SEG_DATA_WIDTH-1:0]   if_ctrl_dma_ram_rd_resp_data;
+wire [IF_COUNT*SEG_COUNT-1:0]                  if_ctrl_dma_ram_rd_resp_valid;
+wire [IF_COUNT*SEG_COUNT-1:0]                  if_ctrl_dma_ram_rd_resp_ready;
+
+wire [IF_COUNT*SEG_COUNT*IF_RAM_SEL_WIDTH-1:0] if_data_dma_ram_wr_cmd_sel;
+wire [IF_COUNT*SEG_COUNT*SEG_BE_WIDTH-1:0]     if_data_dma_ram_wr_cmd_be;
+wire [IF_COUNT*SEG_COUNT*SEG_ADDR_WIDTH-1:0]   if_data_dma_ram_wr_cmd_addr;
+wire [IF_COUNT*SEG_COUNT*SEG_DATA_WIDTH-1:0]   if_data_dma_ram_wr_cmd_data;
+wire [IF_COUNT*SEG_COUNT-1:0]                  if_data_dma_ram_wr_cmd_valid;
+wire [IF_COUNT*SEG_COUNT-1:0]                  if_data_dma_ram_wr_cmd_ready;
+wire [IF_COUNT*SEG_COUNT*IF_RAM_SEL_WIDTH-1:0] if_data_dma_ram_rd_cmd_sel;
+wire [IF_COUNT*SEG_COUNT*SEG_ADDR_WIDTH-1:0]   if_data_dma_ram_rd_cmd_addr;
+wire [IF_COUNT*SEG_COUNT-1:0]                  if_data_dma_ram_rd_cmd_valid;
+wire [IF_COUNT*SEG_COUNT-1:0]                  if_data_dma_ram_rd_cmd_ready;
+wire [IF_COUNT*SEG_COUNT*SEG_DATA_WIDTH-1:0]   if_data_dma_ram_rd_resp_data;
+wire [IF_COUNT*SEG_COUNT-1:0]                  if_data_dma_ram_rd_resp_valid;
+wire [IF_COUNT*SEG_COUNT-1:0]                  if_data_dma_ram_rd_resp_ready;
+
+if (IF_COUNT > 1) begin
+
+    dma_if_mux #
+    (
+        .PORTS(IF_COUNT),
+        .SEG_COUNT(SEG_COUNT),
+        .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+        .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+        .SEG_BE_WIDTH(SEG_BE_WIDTH),
+        .S_RAM_SEL_WIDTH(IF_RAM_SEL_WIDTH),
+        .M_RAM_SEL_WIDTH(RAM_SEL_WIDTH-1),
+        .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+        .DMA_ADDR_WIDTH(PCIE_ADDR_WIDTH),
+        .LEN_WIDTH(PCIE_DMA_LEN_WIDTH),
+        .S_TAG_WIDTH(IF_PCIE_DMA_TAG_WIDTH),
+        .M_TAG_WIDTH(PCIE_DMA_TAG_WIDTH-1),
+        .ARB_TYPE("ROUND_ROBIN"),
+        .LSB_PRIORITY("HIGH")
+    )
+    dma_if_mux_ctrl_inst (
+        .clk(clk_250mhz),
+        .rst(rst_250mhz),
+
+        /*
+         * Read descriptor output (to DMA interface)
+         */
+        .m_axis_read_desc_dma_addr(pcie_ctrl_dma_read_desc_pcie_addr),
+        .m_axis_read_desc_ram_sel(pcie_ctrl_dma_read_desc_ram_sel),
+        .m_axis_read_desc_ram_addr(pcie_ctrl_dma_read_desc_ram_addr),
+        .m_axis_read_desc_len(pcie_ctrl_dma_read_desc_len),
+        .m_axis_read_desc_tag(pcie_ctrl_dma_read_desc_tag),
+        .m_axis_read_desc_valid(pcie_ctrl_dma_read_desc_valid),
+        .m_axis_read_desc_ready(pcie_ctrl_dma_read_desc_ready),
+
+        /*
+         * Read descriptor status input (from DMA interface)
+         */
+        .s_axis_read_desc_status_tag(pcie_ctrl_dma_read_desc_status_tag),
+        .s_axis_read_desc_status_valid(pcie_ctrl_dma_read_desc_status_valid),
+
+        /*
+         * Read descriptor input
+         */
+        .s_axis_read_desc_dma_addr(if_pcie_ctrl_dma_read_desc_pcie_addr),
+        .s_axis_read_desc_ram_sel(if_pcie_ctrl_dma_read_desc_ram_sel),
+        .s_axis_read_desc_ram_addr(if_pcie_ctrl_dma_read_desc_ram_addr),
+        .s_axis_read_desc_len(if_pcie_ctrl_dma_read_desc_len),
+        .s_axis_read_desc_tag(if_pcie_ctrl_dma_read_desc_tag),
+        .s_axis_read_desc_valid(if_pcie_ctrl_dma_read_desc_valid),
+        .s_axis_read_desc_ready(if_pcie_ctrl_dma_read_desc_ready),
+
+        /*
+         * Read descriptor status output
+         */
+        .m_axis_read_desc_status_tag(if_pcie_ctrl_dma_read_desc_status_tag),
+        .m_axis_read_desc_status_valid(if_pcie_ctrl_dma_read_desc_status_valid),
+
+        /*
+         * Write descriptor output (to DMA interface)
+         */
+        .m_axis_write_desc_dma_addr(pcie_ctrl_dma_write_desc_pcie_addr),
+        .m_axis_write_desc_ram_sel(pcie_ctrl_dma_write_desc_ram_sel),
+        .m_axis_write_desc_ram_addr(pcie_ctrl_dma_write_desc_ram_addr),
+        .m_axis_write_desc_len(pcie_ctrl_dma_write_desc_len),
+        .m_axis_write_desc_tag(pcie_ctrl_dma_write_desc_tag),
+        .m_axis_write_desc_valid(pcie_ctrl_dma_write_desc_valid),
+        .m_axis_write_desc_ready(pcie_ctrl_dma_write_desc_ready),
+
+        /*
+         * Write descriptor status input (from DMA interface)
+         */
+        .s_axis_write_desc_status_tag(pcie_ctrl_dma_write_desc_status_tag),
+        .s_axis_write_desc_status_valid(pcie_ctrl_dma_write_desc_status_valid),
+
+        /*
+         * Write descriptor input
+         */
+        .s_axis_write_desc_dma_addr(if_pcie_ctrl_dma_write_desc_pcie_addr),
+        .s_axis_write_desc_ram_sel(if_pcie_ctrl_dma_write_desc_ram_sel),
+        .s_axis_write_desc_ram_addr(if_pcie_ctrl_dma_write_desc_ram_addr),
+        .s_axis_write_desc_len(if_pcie_ctrl_dma_write_desc_len),
+        .s_axis_write_desc_tag(if_pcie_ctrl_dma_write_desc_tag),
+        .s_axis_write_desc_valid(if_pcie_ctrl_dma_write_desc_valid),
+        .s_axis_write_desc_ready(if_pcie_ctrl_dma_write_desc_ready),
+
+        /*
+         * Write descriptor status output
+         */
+        .m_axis_write_desc_status_tag(if_pcie_ctrl_dma_write_desc_status_tag),
+        .m_axis_write_desc_status_valid(if_pcie_ctrl_dma_write_desc_status_valid),
+
+        /*
+         * RAM interface (from DMA interface)
+         */
+        .if_ram_wr_cmd_sel(ctrl_dma_ram_wr_cmd_sel),
+        .if_ram_wr_cmd_be(ctrl_dma_ram_wr_cmd_be),
+        .if_ram_wr_cmd_addr(ctrl_dma_ram_wr_cmd_addr),
+        .if_ram_wr_cmd_data(ctrl_dma_ram_wr_cmd_data),
+        .if_ram_wr_cmd_valid(ctrl_dma_ram_wr_cmd_valid),
+        .if_ram_wr_cmd_ready(ctrl_dma_ram_wr_cmd_ready),
+        .if_ram_rd_cmd_sel(ctrl_dma_ram_rd_cmd_sel),
+        .if_ram_rd_cmd_addr(ctrl_dma_ram_rd_cmd_addr),
+        .if_ram_rd_cmd_valid(ctrl_dma_ram_rd_cmd_valid),
+        .if_ram_rd_cmd_ready(ctrl_dma_ram_rd_cmd_ready),
+        .if_ram_rd_resp_data(ctrl_dma_ram_rd_resp_data),
+        .if_ram_rd_resp_valid(ctrl_dma_ram_rd_resp_valid),
+        .if_ram_rd_resp_ready(ctrl_dma_ram_rd_resp_ready),
+
+        /*
+         * RAM interface
+         */
+        .ram_wr_cmd_sel(if_ctrl_dma_ram_wr_cmd_sel),
+        .ram_wr_cmd_be(if_ctrl_dma_ram_wr_cmd_be),
+        .ram_wr_cmd_addr(if_ctrl_dma_ram_wr_cmd_addr),
+        .ram_wr_cmd_data(if_ctrl_dma_ram_wr_cmd_data),
+        .ram_wr_cmd_valid(if_ctrl_dma_ram_wr_cmd_valid),
+        .ram_wr_cmd_ready(if_ctrl_dma_ram_wr_cmd_ready),
+        .ram_rd_cmd_sel(if_ctrl_dma_ram_rd_cmd_sel),
+        .ram_rd_cmd_addr(if_ctrl_dma_ram_rd_cmd_addr),
+        .ram_rd_cmd_valid(if_ctrl_dma_ram_rd_cmd_valid),
+        .ram_rd_cmd_ready(if_ctrl_dma_ram_rd_cmd_ready),
+        .ram_rd_resp_data(if_ctrl_dma_ram_rd_resp_data),
+        .ram_rd_resp_valid(if_ctrl_dma_ram_rd_resp_valid),
+        .ram_rd_resp_ready(if_ctrl_dma_ram_rd_resp_ready)
+    );
+
+    dma_if_mux #
+    (
+        .PORTS(IF_COUNT),
+        .SEG_COUNT(SEG_COUNT),
+        .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+        .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+        .SEG_BE_WIDTH(SEG_BE_WIDTH),
+        .S_RAM_SEL_WIDTH(IF_RAM_SEL_WIDTH),
+        .M_RAM_SEL_WIDTH(RAM_SEL_WIDTH-1),
+        .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+        .DMA_ADDR_WIDTH(PCIE_ADDR_WIDTH),
+        .LEN_WIDTH(PCIE_DMA_LEN_WIDTH),
+        .S_TAG_WIDTH(IF_PCIE_DMA_TAG_WIDTH),
+        .M_TAG_WIDTH(PCIE_DMA_TAG_WIDTH-1),
+        .ARB_TYPE("ROUND_ROBIN"),
+        .LSB_PRIORITY("HIGH")
+    )
+    dma_if_mux_data_inst (
+        .clk(clk_250mhz),
+        .rst(rst_250mhz),
+
+        /*
+         * Read descriptor output (to DMA interface)
+         */
+        .m_axis_read_desc_dma_addr(pcie_data_dma_read_desc_pcie_addr),
+        .m_axis_read_desc_ram_sel(pcie_data_dma_read_desc_ram_sel),
+        .m_axis_read_desc_ram_addr(pcie_data_dma_read_desc_ram_addr),
+        .m_axis_read_desc_len(pcie_data_dma_read_desc_len),
+        .m_axis_read_desc_tag(pcie_data_dma_read_desc_tag),
+        .m_axis_read_desc_valid(pcie_data_dma_read_desc_valid),
+        .m_axis_read_desc_ready(pcie_data_dma_read_desc_ready),
+
+        /*
+         * Read descriptor status input (from DMA interface)
+         */
+        .s_axis_read_desc_status_tag(pcie_data_dma_read_desc_status_tag),
+        .s_axis_read_desc_status_valid(pcie_data_dma_read_desc_status_valid),
+
+        /*
+         * Read descriptor input
+         */
+        .s_axis_read_desc_dma_addr(if_pcie_data_dma_read_desc_pcie_addr),
+        .s_axis_read_desc_ram_sel(if_pcie_data_dma_read_desc_ram_sel),
+        .s_axis_read_desc_ram_addr(if_pcie_data_dma_read_desc_ram_addr),
+        .s_axis_read_desc_len(if_pcie_data_dma_read_desc_len),
+        .s_axis_read_desc_tag(if_pcie_data_dma_read_desc_tag),
+        .s_axis_read_desc_valid(if_pcie_data_dma_read_desc_valid),
+        .s_axis_read_desc_ready(if_pcie_data_dma_read_desc_ready),
+
+        /*
+         * Read descriptor status output
+         */
+        .m_axis_read_desc_status_tag(if_pcie_data_dma_read_desc_status_tag),
+        .m_axis_read_desc_status_valid(if_pcie_data_dma_read_desc_status_valid),
+
+        /*
+         * Write descriptor output (to DMA interface)
+         */
+        .m_axis_write_desc_dma_addr(pcie_data_dma_write_desc_pcie_addr),
+        .m_axis_write_desc_ram_sel(pcie_data_dma_write_desc_ram_sel),
+        .m_axis_write_desc_ram_addr(pcie_data_dma_write_desc_ram_addr),
+        .m_axis_write_desc_len(pcie_data_dma_write_desc_len),
+        .m_axis_write_desc_tag(pcie_data_dma_write_desc_tag),
+        .m_axis_write_desc_valid(pcie_data_dma_write_desc_valid),
+        .m_axis_write_desc_ready(pcie_data_dma_write_desc_ready),
+
+        /*
+         * Write descriptor status input (from DMA interface)
+         */
+        .s_axis_write_desc_status_tag(pcie_data_dma_write_desc_status_tag),
+        .s_axis_write_desc_status_valid(pcie_data_dma_write_desc_status_valid),
+
+        /*
+         * Write descriptor input
+         */
+        .s_axis_write_desc_dma_addr(if_pcie_data_dma_write_desc_pcie_addr),
+        .s_axis_write_desc_ram_sel(if_pcie_data_dma_write_desc_ram_sel),
+        .s_axis_write_desc_ram_addr(if_pcie_data_dma_write_desc_ram_addr),
+        .s_axis_write_desc_len(if_pcie_data_dma_write_desc_len),
+        .s_axis_write_desc_tag(if_pcie_data_dma_write_desc_tag),
+        .s_axis_write_desc_valid(if_pcie_data_dma_write_desc_valid),
+        .s_axis_write_desc_ready(if_pcie_data_dma_write_desc_ready),
+
+        /*
+         * Write descriptor status output
+         */
+        .m_axis_write_desc_status_tag(if_pcie_data_dma_write_desc_status_tag),
+        .m_axis_write_desc_status_valid(if_pcie_data_dma_write_desc_status_valid),
+
+        /*
+         * RAM interface (from DMA interface)
+         */
+        .if_ram_wr_cmd_sel(data_dma_ram_wr_cmd_sel),
+        .if_ram_wr_cmd_be(data_dma_ram_wr_cmd_be),
+        .if_ram_wr_cmd_addr(data_dma_ram_wr_cmd_addr),
+        .if_ram_wr_cmd_data(data_dma_ram_wr_cmd_data),
+        .if_ram_wr_cmd_valid(data_dma_ram_wr_cmd_valid),
+        .if_ram_wr_cmd_ready(data_dma_ram_wr_cmd_ready),
+        .if_ram_rd_cmd_sel(data_dma_ram_rd_cmd_sel),
+        .if_ram_rd_cmd_addr(data_dma_ram_rd_cmd_addr),
+        .if_ram_rd_cmd_valid(data_dma_ram_rd_cmd_valid),
+        .if_ram_rd_cmd_ready(data_dma_ram_rd_cmd_ready),
+        .if_ram_rd_resp_data(data_dma_ram_rd_resp_data),
+        .if_ram_rd_resp_valid(data_dma_ram_rd_resp_valid),
+        .if_ram_rd_resp_ready(data_dma_ram_rd_resp_ready),
+
+        /*
+         * RAM interface
+         */
+        .ram_wr_cmd_sel(if_data_dma_ram_wr_cmd_sel),
+        .ram_wr_cmd_be(if_data_dma_ram_wr_cmd_be),
+        .ram_wr_cmd_addr(if_data_dma_ram_wr_cmd_addr),
+        .ram_wr_cmd_data(if_data_dma_ram_wr_cmd_data),
+        .ram_wr_cmd_valid(if_data_dma_ram_wr_cmd_valid),
+        .ram_wr_cmd_ready(if_data_dma_ram_wr_cmd_ready),
+        .ram_rd_cmd_sel(if_data_dma_ram_rd_cmd_sel),
+        .ram_rd_cmd_addr(if_data_dma_ram_rd_cmd_addr),
+        .ram_rd_cmd_valid(if_data_dma_ram_rd_cmd_valid),
+        .ram_rd_cmd_ready(if_data_dma_ram_rd_cmd_ready),
+        .ram_rd_resp_data(if_data_dma_ram_rd_resp_data),
+        .ram_rd_resp_valid(if_data_dma_ram_rd_resp_valid),
+        .ram_rd_resp_ready(if_data_dma_ram_rd_resp_ready)
+    );
+
+end else begin
+
+    assign pcie_ctrl_dma_read_desc_pcie_addr = if_pcie_ctrl_dma_read_desc_pcie_addr;
+    assign pcie_ctrl_dma_read_desc_ram_sel = if_pcie_ctrl_dma_read_desc_ram_sel;
+    assign pcie_ctrl_dma_read_desc_ram_addr = if_pcie_ctrl_dma_read_desc_ram_addr;
+    assign pcie_ctrl_dma_read_desc_len = if_pcie_ctrl_dma_read_desc_len;
+    assign pcie_ctrl_dma_read_desc_tag = if_pcie_ctrl_dma_read_desc_tag;
+    assign pcie_ctrl_dma_read_desc_valid = if_pcie_ctrl_dma_read_desc_valid;
+    assign if_pcie_ctrl_dma_read_desc_ready = pcie_ctrl_dma_read_desc_ready;
+
+    assign if_pcie_ctrl_dma_read_desc_status_tag = pcie_ctrl_dma_read_desc_status_tag;
+    assign if_pcie_ctrl_dma_read_desc_status_valid = pcie_ctrl_dma_read_desc_status_valid;
+
+    assign pcie_ctrl_dma_write_desc_pcie_addr = if_pcie_ctrl_dma_write_desc_pcie_addr;
+    assign pcie_ctrl_dma_write_desc_ram_sel = if_pcie_ctrl_dma_write_desc_ram_sel;
+    assign pcie_ctrl_dma_write_desc_ram_addr = if_pcie_ctrl_dma_write_desc_ram_addr;
+    assign pcie_ctrl_dma_write_desc_len = if_pcie_ctrl_dma_write_desc_len;
+    assign pcie_ctrl_dma_write_desc_tag = if_pcie_ctrl_dma_write_desc_tag;
+    assign pcie_ctrl_dma_write_desc_valid = if_pcie_ctrl_dma_write_desc_valid;
+    assign if_pcie_ctrl_dma_write_desc_ready = pcie_ctrl_dma_write_desc_ready;
+
+    assign if_pcie_ctrl_dma_write_desc_status_tag = pcie_ctrl_dma_write_desc_status_tag;
+    assign if_pcie_ctrl_dma_write_desc_status_valid = pcie_ctrl_dma_write_desc_status_valid;
+
+    assign if_ctrl_dma_ram_wr_cmd_sel = ctrl_dma_ram_wr_cmd_sel;
+    assign if_ctrl_dma_ram_wr_cmd_be = ctrl_dma_ram_wr_cmd_be;
+    assign if_ctrl_dma_ram_wr_cmd_addr = ctrl_dma_ram_wr_cmd_addr;
+    assign if_ctrl_dma_ram_wr_cmd_data = ctrl_dma_ram_wr_cmd_data;
+    assign if_ctrl_dma_ram_wr_cmd_valid = ctrl_dma_ram_wr_cmd_valid;
+    assign ctrl_dma_ram_wr_cmd_ready = if_ctrl_dma_ram_wr_cmd_ready;
+    assign if_ctrl_dma_ram_rd_cmd_sel = ctrl_dma_ram_rd_cmd_sel;
+    assign if_ctrl_dma_ram_rd_cmd_addr = ctrl_dma_ram_rd_cmd_addr;
+    assign if_ctrl_dma_ram_rd_cmd_valid = ctrl_dma_ram_rd_cmd_valid;
+    assign ctrl_dma_ram_rd_cmd_ready = if_ctrl_dma_ram_rd_cmd_ready;
+    assign ctrl_dma_ram_rd_resp_data = if_ctrl_dma_ram_rd_resp_data;
+    assign ctrl_dma_ram_rd_resp_valid = if_ctrl_dma_ram_rd_resp_valid;
+    assign if_ctrl_dma_ram_rd_resp_ready = ctrl_dma_ram_rd_resp_ready;
+
+    assign pcie_data_dma_read_desc_pcie_addr = if_pcie_data_dma_read_desc_pcie_addr;
+    assign pcie_data_dma_read_desc_ram_sel = if_pcie_data_dma_read_desc_ram_sel;
+    assign pcie_data_dma_read_desc_ram_addr = if_pcie_data_dma_read_desc_ram_addr;
+    assign pcie_data_dma_read_desc_len = if_pcie_data_dma_read_desc_len;
+    assign pcie_data_dma_read_desc_tag = if_pcie_data_dma_read_desc_tag;
+    assign pcie_data_dma_read_desc_valid = if_pcie_data_dma_read_desc_valid;
+    assign if_pcie_data_dma_read_desc_ready = pcie_data_dma_read_desc_ready;
+
+    assign if_pcie_data_dma_read_desc_status_tag = pcie_data_dma_read_desc_status_tag;
+    assign if_pcie_data_dma_read_desc_status_valid = pcie_data_dma_read_desc_status_valid;
+
+    assign pcie_data_dma_write_desc_pcie_addr = if_pcie_data_dma_write_desc_pcie_addr;
+    assign pcie_data_dma_write_desc_ram_sel = if_pcie_data_dma_write_desc_ram_sel;
+    assign pcie_data_dma_write_desc_ram_addr = if_pcie_data_dma_write_desc_ram_addr;
+    assign pcie_data_dma_write_desc_len = if_pcie_data_dma_write_desc_len;
+    assign pcie_data_dma_write_desc_tag = if_pcie_data_dma_write_desc_tag;
+    assign pcie_data_dma_write_desc_valid = if_pcie_data_dma_write_desc_valid;
+    assign if_pcie_data_dma_write_desc_ready = pcie_data_dma_write_desc_ready;
+
+    assign if_pcie_data_dma_write_desc_status_tag = pcie_data_dma_write_desc_status_tag;
+    assign if_pcie_data_dma_write_desc_status_valid = pcie_data_dma_write_desc_status_valid;
+
+    assign if_data_dma_ram_wr_cmd_sel = data_dma_ram_wr_cmd_sel;
+    assign if_data_dma_ram_wr_cmd_be = data_dma_ram_wr_cmd_be;
+    assign if_data_dma_ram_wr_cmd_addr = data_dma_ram_wr_cmd_addr;
+    assign if_data_dma_ram_wr_cmd_data = data_dma_ram_wr_cmd_data;
+    assign if_data_dma_ram_wr_cmd_valid = data_dma_ram_wr_cmd_valid;
+    assign data_dma_ram_wr_cmd_ready = if_data_dma_ram_wr_cmd_ready;
+    assign if_data_dma_ram_rd_cmd_sel = data_dma_ram_rd_cmd_sel;
+    assign if_data_dma_ram_rd_cmd_addr = data_dma_ram_rd_cmd_addr;
+    assign if_data_dma_ram_rd_cmd_valid = data_dma_ram_rd_cmd_valid;
+    assign data_dma_ram_rd_cmd_ready = if_data_dma_ram_rd_cmd_ready;
+    assign data_dma_ram_rd_resp_data = if_data_dma_ram_rd_resp_data;
+    assign data_dma_ram_rd_resp_valid = if_data_dma_ram_rd_resp_valid;
+    assign if_data_dma_ram_rd_resp_ready = data_dma_ram_rd_resp_ready;
+
+end
+
+// PTP clock
+ptp_clock #(
+    .PERIOD_NS_WIDTH(PTP_PERIOD_NS_WIDTH),
+    .OFFSET_NS_WIDTH(PTP_OFFSET_NS_WIDTH),
+    .FNS_WIDTH(PTP_FNS_WIDTH),
+    .PERIOD_NS(PTP_PERIOD_NS),
+    .PERIOD_FNS(PTP_PERIOD_FNS),
+    .DRIFT_ENABLE(0)
+)
+ptp_clock_inst (
+    .clk(clk_250mhz),
+    .rst(rst_250mhz),
+
+    /*
+     * Timestamp inputs for synchronization
+     */
+    .input_ts_96(set_ptp_ts_96_reg),
+    .input_ts_96_valid(set_ptp_ts_96_valid_reg),
+    .input_ts_64(0),
+    .input_ts_64_valid(1'b0),
+
+    /*
+     * Period adjustment
+     */
+    .input_period_ns(set_ptp_period_ns_reg),
+    .input_period_fns(set_ptp_period_fns_reg),
+    .input_period_valid(set_ptp_period_valid_reg),
+
+    /*
+     * Offset adjustment
+     */
+    .input_adj_ns(set_ptp_offset_ns_reg),
+    .input_adj_fns(set_ptp_offset_fns_reg),
+    .input_adj_count(set_ptp_offset_count_reg),
+    .input_adj_valid(set_ptp_offset_valid_reg),
+    .input_adj_active(set_ptp_offset_active),
+
+    /*
+     * Drift adjustment
+     */
+    .input_drift_ns(0),
+    .input_drift_fns(0),
+    .input_drift_rate(0),
+    .input_drift_valid(0),
+
+    /*
+     * Timestamp outputs
+     */
+    .output_ts_96(ptp_ts_96),
+    .output_ts_64(),
+    .output_ts_step(ptp_ts_step),
+
+    /*
+     * PPS output
+     */
+    .output_pps(ptp_pps)
+);
+
+reg [26:0] pps_led_counter_reg = 0;
+reg pps_led_reg = 0;
+
+always @(posedge clk_250mhz) begin
+    if (ptp_pps) begin
+        pps_led_counter_reg <= 125000000;
+    end else if (pps_led_counter_reg > 0) begin
+        pps_led_counter_reg <= pps_led_counter_reg - 1;
+    end
+
+    pps_led_reg <= pps_led_counter_reg > 0;
+end
+
+wire [PORT_COUNT-1:0] port_tx_clk;
+wire [PORT_COUNT-1:0] port_tx_rst;
+wire [PORT_COUNT*AXIS_ETH_DATA_WIDTH-1:0] port_tx_axis_tdata;
+wire [PORT_COUNT*AXIS_ETH_KEEP_WIDTH-1:0] port_tx_axis_tkeep;
+wire [PORT_COUNT-1:0] port_tx_axis_tvalid;
+wire [PORT_COUNT-1:0] port_tx_axis_tready;
+wire [PORT_COUNT-1:0] port_tx_axis_tlast;
+wire [PORT_COUNT-1:0] port_tx_axis_tuser;
+
+wire [PORT_COUNT-1:0] port_rx_clk;
+wire [PORT_COUNT-1:0] port_rx_rst;
+wire [PORT_COUNT*AXIS_ETH_DATA_WIDTH-1:0] port_rx_axis_tdata;
+wire [PORT_COUNT*AXIS_ETH_KEEP_WIDTH-1:0] port_rx_axis_tkeep;
+wire [PORT_COUNT-1:0] port_rx_axis_tvalid;
+wire [PORT_COUNT-1:0] port_rx_axis_tlast;
+wire [PORT_COUNT-1:0] port_rx_axis_tuser;
+
+assign led[0] = pps_led_reg;
+assign led[2:1] = 0;
+
+wire [IF_COUNT*32-1:0] if_msi_irq;
+
+//  counts    QSFP 0   QSFP 1
+// IF  PORT   0_1234   1_1234
+// 1   1      0 (0.0)
+// 1   2      0 (0.0)  1 (0.1)
+// 2   1      0 (0.0)  1 (1.0)
+
+localparam QSFP0_IND = 0;
+localparam QSFP1_IND = 1;
+
+generate
+    genvar m, n;
+
+    if (QSFP0_IND >= 0 && QSFP0_IND < PORT_COUNT) begin
+        assign port_tx_clk[QSFP0_IND] = qsfp0_tx_clk;
+        assign port_tx_rst[QSFP0_IND] = qsfp0_tx_rst;
+        assign qsfp0_tx_axis_tdata = port_tx_axis_tdata[QSFP0_IND*AXIS_ETH_DATA_WIDTH +: AXIS_ETH_DATA_WIDTH];
+        assign qsfp0_tx_axis_tkeep = port_tx_axis_tkeep[QSFP0_IND*AXIS_ETH_KEEP_WIDTH +: AXIS_ETH_KEEP_WIDTH];
+        assign qsfp0_tx_axis_tvalid = port_tx_axis_tvalid[QSFP0_IND];
+        assign port_tx_axis_tready[QSFP0_IND] = qsfp0_tx_axis_tready;
+        assign qsfp0_tx_axis_tlast = port_tx_axis_tlast[QSFP0_IND];
+        assign qsfp0_tx_axis_tuser = port_tx_axis_tuser[QSFP0_IND];
+
+        assign port_rx_clk[QSFP0_IND] = qsfp0_rx_clk;
+        assign port_rx_rst[QSFP0_IND] = qsfp0_rx_rst;
+        assign port_rx_axis_tdata[QSFP0_IND*AXIS_ETH_DATA_WIDTH +: AXIS_ETH_DATA_WIDTH] = qsfp0_rx_axis_tdata;
+        assign port_rx_axis_tkeep[QSFP0_IND*AXIS_ETH_KEEP_WIDTH +: AXIS_ETH_KEEP_WIDTH] = qsfp0_rx_axis_tkeep;
+        assign port_rx_axis_tvalid[QSFP0_IND] = qsfp0_rx_axis_tvalid;
+        assign port_rx_axis_tlast[QSFP0_IND] = qsfp0_rx_axis_tlast;
+        assign port_rx_axis_tuser[QSFP0_IND] = qsfp0_rx_axis_tuser;
+    end else begin
+        assign qsfp0_tx_axis_tdata = {AXIS_ETH_DATA_WIDTH{1'b0}};
+        assign qsfp0_tx_axis_tkeep = {AXIS_ETH_KEEP_WIDTH{1'b0}};
+        assign qsfp0_tx_axis_tvalid = 1'b0;
+        assign qsfp0_tx_axis_tlast = 1'b0;
+        assign qsfp0_tx_axis_tuser = 1'b0;
+    end
+
+    if (QSFP1_IND >= 0 && QSFP1_IND < PORT_COUNT) begin
+        assign port_tx_clk[QSFP1_IND] = qsfp1_tx_clk;
+        assign port_tx_rst[QSFP1_IND] = qsfp1_tx_rst;
+        assign qsfp1_tx_axis_tdata = port_tx_axis_tdata[QSFP1_IND*AXIS_ETH_DATA_WIDTH +: AXIS_ETH_DATA_WIDTH];
+        assign qsfp1_tx_axis_tkeep = port_tx_axis_tkeep[QSFP1_IND*AXIS_ETH_KEEP_WIDTH +: AXIS_ETH_KEEP_WIDTH];
+        assign qsfp1_tx_axis_tvalid = port_tx_axis_tvalid[QSFP1_IND];
+        assign port_tx_axis_tready[QSFP1_IND] = qsfp1_tx_axis_tready;
+        assign qsfp1_tx_axis_tlast = port_tx_axis_tlast[QSFP1_IND];
+        assign qsfp1_tx_axis_tuser = port_tx_axis_tuser[QSFP1_IND];
+
+        assign port_rx_clk[QSFP1_IND] = qsfp1_rx_clk;
+        assign port_rx_rst[QSFP1_IND] = qsfp1_rx_rst;
+        assign port_rx_axis_tdata[QSFP1_IND*AXIS_ETH_DATA_WIDTH +: AXIS_ETH_DATA_WIDTH] = qsfp1_rx_axis_tdata;
+        assign port_rx_axis_tkeep[QSFP1_IND*AXIS_ETH_KEEP_WIDTH +: AXIS_ETH_KEEP_WIDTH] = qsfp1_rx_axis_tkeep;
+        assign port_rx_axis_tvalid[QSFP1_IND] = qsfp1_rx_axis_tvalid;
+        assign port_rx_axis_tlast[QSFP1_IND] = qsfp1_rx_axis_tlast;
+        assign port_rx_axis_tuser[QSFP1_IND] = qsfp1_rx_axis_tuser;
+    end else begin
+        assign qsfp1_tx_axis_tdata = {AXIS_ETH_DATA_WIDTH{1'b0}};
+        assign qsfp1_tx_axis_tkeep = {AXIS_ETH_KEEP_WIDTH{1'b0}};
+        assign qsfp1_tx_axis_tvalid = 1'b0;
+        assign qsfp1_tx_axis_tlast = 1'b0;
+        assign qsfp1_tx_axis_tuser = 1'b0;
+    end
+
+    case (IF_COUNT)
+        1: assign msi_irq = if_msi_irq[0*32+:32];
+        2: assign msi_irq = if_msi_irq[0*32+:32] | if_msi_irq[1*32+:32];
+    endcase
+
+    for (n = 0; n < IF_COUNT; n = n + 1) begin : iface
+
+        wire [PORTS_PER_IF*AXIS_DATA_WIDTH-1:0] tx_axis_tdata;
+        wire [PORTS_PER_IF*AXIS_KEEP_WIDTH-1:0] tx_axis_tkeep;
+        wire [PORTS_PER_IF-1:0] tx_axis_tvalid;
+        wire [PORTS_PER_IF-1:0] tx_axis_tready;
+        wire [PORTS_PER_IF-1:0] tx_axis_tlast;
+        wire [PORTS_PER_IF-1:0] tx_axis_tuser;
+
+        wire [PORTS_PER_IF*PTP_TS_WIDTH-1:0] tx_ptp_ts_96;
+        wire [PORTS_PER_IF-1:0] tx_ptp_ts_valid;
+        wire [PORTS_PER_IF-1:0] tx_ptp_ts_ready;
+
+        wire [PORTS_PER_IF*AXIS_DATA_WIDTH-1:0] rx_axis_tdata;
+        wire [PORTS_PER_IF*AXIS_KEEP_WIDTH-1:0] rx_axis_tkeep;
+        wire [PORTS_PER_IF-1:0] rx_axis_tvalid;
+        wire [PORTS_PER_IF-1:0] rx_axis_tready;
+        wire [PORTS_PER_IF-1:0] rx_axis_tlast;
+        wire [PORTS_PER_IF-1:0] rx_axis_tuser;
+
+        wire [PORTS_PER_IF*PTP_TS_WIDTH-1:0] rx_ptp_ts_96;
+        wire [PORTS_PER_IF-1:0] rx_ptp_ts_valid;
+        wire [PORTS_PER_IF-1:0] rx_ptp_ts_ready;
+
+        interface #(
+            .PORTS(PORTS_PER_IF),
+            .DMA_ADDR_WIDTH(PCIE_ADDR_WIDTH),
+            .DMA_LEN_WIDTH(PCIE_DMA_LEN_WIDTH),
+            .DMA_TAG_WIDTH(IF_PCIE_DMA_TAG_WIDTH),
+            .EVENT_QUEUE_OP_TABLE_SIZE(EVENT_QUEUE_OP_TABLE_SIZE),
+            .TX_QUEUE_OP_TABLE_SIZE(TX_QUEUE_OP_TABLE_SIZE),
+            .RX_QUEUE_OP_TABLE_SIZE(RX_QUEUE_OP_TABLE_SIZE),
+            .TX_CPL_QUEUE_OP_TABLE_SIZE(TX_CPL_QUEUE_OP_TABLE_SIZE),
+            .RX_CPL_QUEUE_OP_TABLE_SIZE(RX_CPL_QUEUE_OP_TABLE_SIZE),
+            .TX_QUEUE_INDEX_WIDTH(TX_QUEUE_INDEX_WIDTH),
+            .RX_QUEUE_INDEX_WIDTH(RX_QUEUE_INDEX_WIDTH),
+            .TX_CPL_QUEUE_INDEX_WIDTH(TX_CPL_QUEUE_INDEX_WIDTH),
+            .RX_CPL_QUEUE_INDEX_WIDTH(RX_CPL_QUEUE_INDEX_WIDTH),
+            .EVENT_QUEUE_PIPELINE(EVENT_QUEUE_PIPELINE),
+            .TX_QUEUE_PIPELINE(TX_QUEUE_PIPELINE),
+            .RX_QUEUE_PIPELINE(RX_QUEUE_PIPELINE),
+            .TX_CPL_QUEUE_PIPELINE(TX_CPL_QUEUE_PIPELINE),
+            .RX_CPL_QUEUE_PIPELINE(RX_CPL_QUEUE_PIPELINE),
+            .TX_DESC_TABLE_SIZE(TX_DESC_TABLE_SIZE),
+            .TX_PKT_TABLE_SIZE(TX_PKT_TABLE_SIZE),
+            .RX_DESC_TABLE_SIZE(RX_DESC_TABLE_SIZE),
+            .RX_PKT_TABLE_SIZE(RX_PKT_TABLE_SIZE),
+            .TX_SCHEDULER(TX_SCHEDULER),
+            .TX_SCHEDULER_OP_TABLE_SIZE(TX_SCHEDULER_OP_TABLE_SIZE),
+            .TX_SCHEDULER_PIPELINE(TX_SCHEDULER_PIPELINE),
+            .TDMA_INDEX_WIDTH(TDMA_INDEX_WIDTH),
+            .INT_WIDTH(8),
+            .QUEUE_PTR_WIDTH(16),
+            .LOG_QUEUE_SIZE_WIDTH(4),
+            .PTP_TS_ENABLE(PTP_TS_ENABLE),
+            .PTP_TS_WIDTH(PTP_TS_WIDTH),
+            .TX_CHECKSUM_ENABLE(TX_CHECKSUM_ENABLE),
+            .RX_RSS_ENABLE(RX_RSS_ENABLE),
+            .RX_HASH_ENABLE(RX_HASH_ENABLE),
+            .RX_CHECKSUM_ENABLE(RX_CHECKSUM_ENABLE),
+            .AXIL_DATA_WIDTH(AXIL_DATA_WIDTH),
+            .AXIL_ADDR_WIDTH(IF_AXIL_ADDR_WIDTH),
+            .AXIL_STRB_WIDTH(AXIL_STRB_WIDTH),
+            .SEG_COUNT(SEG_COUNT),
+            .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+            .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+            .SEG_BE_WIDTH(SEG_BE_WIDTH),
+            .RAM_SEL_WIDTH(IF_RAM_SEL_WIDTH),
+            .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+            .RAM_PIPELINE(RAM_PIPELINE),
+            .AXIS_DATA_WIDTH(AXIS_DATA_WIDTH),
+            .AXIS_KEEP_WIDTH(AXIS_KEEP_WIDTH),
+            .MAX_TX_SIZE(MAX_TX_SIZE),
+            .MAX_RX_SIZE(MAX_RX_SIZE),
+            .TX_RAM_SIZE(TX_RAM_SIZE),
+            .RX_RAM_SIZE(RX_RAM_SIZE),
+            //enable RMT in interface 1
+            //disable RMT in interface 0
+            .RMT_TX_ENABLE(!n)
+        )
+        interface_inst (
+            .clk(clk_250mhz),
+            .rst(rst_250mhz),
+
+            /*
+             * DMA read descriptor output (control)
+             */
+            .m_axis_ctrl_dma_read_desc_dma_addr(if_pcie_ctrl_dma_read_desc_pcie_addr[n*PCIE_ADDR_WIDTH +: PCIE_ADDR_WIDTH]),
+            .m_axis_ctrl_dma_read_desc_ram_sel(if_pcie_ctrl_dma_read_desc_ram_sel[n*IF_RAM_SEL_WIDTH +: IF_RAM_SEL_WIDTH]),
+            .m_axis_ctrl_dma_read_desc_ram_addr(if_pcie_ctrl_dma_read_desc_ram_addr[n*RAM_ADDR_WIDTH +: RAM_ADDR_WIDTH]),
+            .m_axis_ctrl_dma_read_desc_len(if_pcie_ctrl_dma_read_desc_len[n*PCIE_DMA_LEN_WIDTH +: PCIE_DMA_LEN_WIDTH]),
+            .m_axis_ctrl_dma_read_desc_tag(if_pcie_ctrl_dma_read_desc_tag[n*IF_PCIE_DMA_TAG_WIDTH +: IF_PCIE_DMA_TAG_WIDTH]),
+            .m_axis_ctrl_dma_read_desc_valid(if_pcie_ctrl_dma_read_desc_valid[n]),
+            .m_axis_ctrl_dma_read_desc_ready(if_pcie_ctrl_dma_read_desc_ready[n]),
+
+            /*
+             * DMA read descriptor status input (control)
+             */
+            .s_axis_ctrl_dma_read_desc_status_tag(if_pcie_ctrl_dma_read_desc_status_tag[n*IF_PCIE_DMA_TAG_WIDTH +: IF_PCIE_DMA_TAG_WIDTH]),
+            .s_axis_ctrl_dma_read_desc_status_valid(if_pcie_ctrl_dma_read_desc_status_valid[n]),
+
+            /*
+             * DMA write descriptor output (control)
+             */
+            .m_axis_ctrl_dma_write_desc_dma_addr(if_pcie_ctrl_dma_write_desc_pcie_addr[n*PCIE_ADDR_WIDTH +: PCIE_ADDR_WIDTH]),
+            .m_axis_ctrl_dma_write_desc_ram_sel(if_pcie_ctrl_dma_write_desc_ram_sel[n*IF_RAM_SEL_WIDTH +: IF_RAM_SEL_WIDTH]),
+            .m_axis_ctrl_dma_write_desc_ram_addr(if_pcie_ctrl_dma_write_desc_ram_addr[n*RAM_ADDR_WIDTH +: RAM_ADDR_WIDTH]),
+            .m_axis_ctrl_dma_write_desc_len(if_pcie_ctrl_dma_write_desc_len[n*PCIE_DMA_LEN_WIDTH +: PCIE_DMA_LEN_WIDTH]),
+            .m_axis_ctrl_dma_write_desc_tag(if_pcie_ctrl_dma_write_desc_tag[n*IF_PCIE_DMA_TAG_WIDTH +: IF_PCIE_DMA_TAG_WIDTH]),
+            .m_axis_ctrl_dma_write_desc_valid(if_pcie_ctrl_dma_write_desc_valid[n]),
+            .m_axis_ctrl_dma_write_desc_ready(if_pcie_ctrl_dma_write_desc_ready[n]),
+
+            /*
+             * DMA write descriptor status input (control)
+             */
+            .s_axis_ctrl_dma_write_desc_status_tag(if_pcie_ctrl_dma_write_desc_status_tag[n*IF_PCIE_DMA_TAG_WIDTH +: IF_PCIE_DMA_TAG_WIDTH]),
+            .s_axis_ctrl_dma_write_desc_status_valid(if_pcie_ctrl_dma_write_desc_status_valid[n]),
+
+            /*
+             * DMA read descriptor output (data)
+             */
+            .m_axis_data_dma_read_desc_dma_addr(if_pcie_data_dma_read_desc_pcie_addr[n*PCIE_ADDR_WIDTH +: PCIE_ADDR_WIDTH]),
+            .m_axis_data_dma_read_desc_ram_sel(if_pcie_data_dma_read_desc_ram_sel[n*IF_RAM_SEL_WIDTH +: IF_RAM_SEL_WIDTH]),
+            .m_axis_data_dma_read_desc_ram_addr(if_pcie_data_dma_read_desc_ram_addr[n*RAM_ADDR_WIDTH +: RAM_ADDR_WIDTH]),
+            .m_axis_data_dma_read_desc_len(if_pcie_data_dma_read_desc_len[n*PCIE_DMA_LEN_WIDTH +: PCIE_DMA_LEN_WIDTH]),
+            .m_axis_data_dma_read_desc_tag(if_pcie_data_dma_read_desc_tag[n*IF_PCIE_DMA_TAG_WIDTH +: IF_PCIE_DMA_TAG_WIDTH]),
+            .m_axis_data_dma_read_desc_valid(if_pcie_data_dma_read_desc_valid[n]),
+            .m_axis_data_dma_read_desc_ready(if_pcie_data_dma_read_desc_ready[n]),
+
+            /*
+             * DMA read descriptor status input (data)
+             */
+            .s_axis_data_dma_read_desc_status_tag(if_pcie_data_dma_read_desc_status_tag[n*IF_PCIE_DMA_TAG_WIDTH +: IF_PCIE_DMA_TAG_WIDTH]),
+            .s_axis_data_dma_read_desc_status_valid(if_pcie_data_dma_read_desc_status_valid[n]),
+
+            /*
+             * DMA write descriptor output (data)
+             */
+            .m_axis_data_dma_write_desc_dma_addr(if_pcie_data_dma_write_desc_pcie_addr[n*PCIE_ADDR_WIDTH +: PCIE_ADDR_WIDTH]),
+            .m_axis_data_dma_write_desc_ram_sel(if_pcie_data_dma_write_desc_ram_sel[n*IF_RAM_SEL_WIDTH +: IF_RAM_SEL_WIDTH]),
+            .m_axis_data_dma_write_desc_ram_addr(if_pcie_data_dma_write_desc_ram_addr[n*RAM_ADDR_WIDTH +: RAM_ADDR_WIDTH]),
+            .m_axis_data_dma_write_desc_len(if_pcie_data_dma_write_desc_len[n*PCIE_DMA_LEN_WIDTH +: PCIE_DMA_LEN_WIDTH]),
+            .m_axis_data_dma_write_desc_tag(if_pcie_data_dma_write_desc_tag[n*IF_PCIE_DMA_TAG_WIDTH +: IF_PCIE_DMA_TAG_WIDTH]),
+            .m_axis_data_dma_write_desc_valid(if_pcie_data_dma_write_desc_valid[n]),
+            .m_axis_data_dma_write_desc_ready(if_pcie_data_dma_write_desc_ready[n]),
+
+            /*
+             * DMA write descriptor status input (data)
+             */
+            .s_axis_data_dma_write_desc_status_tag(if_pcie_data_dma_write_desc_status_tag[n*IF_PCIE_DMA_TAG_WIDTH +: IF_PCIE_DMA_TAG_WIDTH]),
+            .s_axis_data_dma_write_desc_status_valid(if_pcie_data_dma_write_desc_status_valid[n]),
+
+            /*
+             * AXI-Lite slave interface
+             */
+            .s_axil_awaddr(axil_if_awaddr[n*AXIL_ADDR_WIDTH +: AXIL_ADDR_WIDTH]),
+            .s_axil_awprot(axil_if_awprot[n*3 +: 3]),
+            .s_axil_awvalid(axil_if_awvalid[n]),
+            .s_axil_awready(axil_if_awready[n]),
+            .s_axil_wdata(axil_if_wdata[n*AXIL_DATA_WIDTH +: AXIL_DATA_WIDTH]),
+            .s_axil_wstrb(axil_if_wstrb[n*AXIL_STRB_WIDTH +: AXIL_STRB_WIDTH]),
+            .s_axil_wvalid(axil_if_wvalid[n]),
+            .s_axil_wready(axil_if_wready[n]),
+            .s_axil_bresp(axil_if_bresp[n*2 +: 2]),
+            .s_axil_bvalid(axil_if_bvalid[n]),
+            .s_axil_bready(axil_if_bready[n]),
+            .s_axil_araddr(axil_if_araddr[n*AXIL_ADDR_WIDTH +: AXIL_ADDR_WIDTH]),
+            .s_axil_arprot(axil_if_arprot[n*3 +: 3]),
+            .s_axil_arvalid(axil_if_arvalid[n]),
+            .s_axil_arready(axil_if_arready[n]),
+            .s_axil_rdata(axil_if_rdata[n*AXIL_DATA_WIDTH +: AXIL_DATA_WIDTH]),
+            .s_axil_rresp(axil_if_rresp[n*2 +: 2]),
+            .s_axil_rvalid(axil_if_rvalid[n]),
+            .s_axil_rready(axil_if_rready[n]),
+
+            /*
+             * AXI-Lite master interface (passthrough for NIC control and status)
+             */
+            .m_axil_csr_awaddr(axil_if_csr_awaddr[n*AXIL_CSR_ADDR_WIDTH +: AXIL_CSR_ADDR_WIDTH]),
+            .m_axil_csr_awprot(axil_if_csr_awprot[n*3 +: 3]),
+            .m_axil_csr_awvalid(axil_if_csr_awvalid[n]),
+            .m_axil_csr_awready(axil_if_csr_awready[n]),
+            .m_axil_csr_wdata(axil_if_csr_wdata[n*AXIL_DATA_WIDTH +: AXIL_DATA_WIDTH]),
+            .m_axil_csr_wstrb(axil_if_csr_wstrb[n*AXIL_STRB_WIDTH +: AXIL_STRB_WIDTH]),
+            .m_axil_csr_wvalid(axil_if_csr_wvalid[n]),
+            .m_axil_csr_wready(axil_if_csr_wready[n]),
+            .m_axil_csr_bresp(axil_if_csr_bresp[n*2 +: 2]),
+            .m_axil_csr_bvalid(axil_if_csr_bvalid[n]),
+            .m_axil_csr_bready(axil_if_csr_bready[n]),
+            .m_axil_csr_araddr(axil_if_csr_araddr[n*AXIL_CSR_ADDR_WIDTH +: AXIL_CSR_ADDR_WIDTH]),
+            .m_axil_csr_arprot(axil_if_csr_arprot[n*3 +: 3]),
+            .m_axil_csr_arvalid(axil_if_csr_arvalid[n]),
+            .m_axil_csr_arready(axil_if_csr_arready[n]),
+            .m_axil_csr_rdata(axil_if_csr_rdata[n*AXIL_DATA_WIDTH +: AXIL_DATA_WIDTH]),
+            .m_axil_csr_rresp(axil_if_csr_rresp[n*2 +: 2]),
+            .m_axil_csr_rvalid(axil_if_csr_rvalid[n]),
+            .m_axil_csr_rready(axil_if_csr_rready[n]),
+
+            /*
+             * RAM interface (control)
+             */
+            .ctrl_dma_ram_wr_cmd_sel(if_ctrl_dma_ram_wr_cmd_sel[SEG_COUNT*IF_RAM_SEL_WIDTH*n +: SEG_COUNT*IF_RAM_SEL_WIDTH]),
+            .ctrl_dma_ram_wr_cmd_be(if_ctrl_dma_ram_wr_cmd_be[SEG_COUNT*SEG_BE_WIDTH*n +: SEG_COUNT*SEG_BE_WIDTH]),
+            .ctrl_dma_ram_wr_cmd_addr(if_ctrl_dma_ram_wr_cmd_addr[SEG_COUNT*SEG_ADDR_WIDTH*n +: SEG_COUNT*SEG_ADDR_WIDTH]),
+            .ctrl_dma_ram_wr_cmd_data(if_ctrl_dma_ram_wr_cmd_data[SEG_COUNT*SEG_DATA_WIDTH*n +: SEG_COUNT*SEG_DATA_WIDTH]),
+            .ctrl_dma_ram_wr_cmd_valid(if_ctrl_dma_ram_wr_cmd_valid[SEG_COUNT*n +: SEG_COUNT]),
+            .ctrl_dma_ram_wr_cmd_ready(if_ctrl_dma_ram_wr_cmd_ready[SEG_COUNT*n +: SEG_COUNT]),
+            .ctrl_dma_ram_rd_cmd_sel(if_ctrl_dma_ram_rd_cmd_sel[SEG_COUNT*IF_RAM_SEL_WIDTH*n +: SEG_COUNT*IF_RAM_SEL_WIDTH]),
+            .ctrl_dma_ram_rd_cmd_addr(if_ctrl_dma_ram_rd_cmd_addr[SEG_COUNT*SEG_ADDR_WIDTH*n +: SEG_COUNT*SEG_ADDR_WIDTH]),
+            .ctrl_dma_ram_rd_cmd_valid(if_ctrl_dma_ram_rd_cmd_valid[SEG_COUNT*n +: SEG_COUNT]),
+            .ctrl_dma_ram_rd_cmd_ready(if_ctrl_dma_ram_rd_cmd_ready[SEG_COUNT*n +: SEG_COUNT]),
+            .ctrl_dma_ram_rd_resp_data(if_ctrl_dma_ram_rd_resp_data[SEG_COUNT*SEG_DATA_WIDTH*n +: SEG_COUNT*SEG_DATA_WIDTH]),
+            .ctrl_dma_ram_rd_resp_valid(if_ctrl_dma_ram_rd_resp_valid[SEG_COUNT*n +: SEG_COUNT]),
+            .ctrl_dma_ram_rd_resp_ready(if_ctrl_dma_ram_rd_resp_ready[SEG_COUNT*n +: SEG_COUNT]),
+
+            /*
+             * RAM interface (data)
+             */
+            .data_dma_ram_wr_cmd_sel(if_data_dma_ram_wr_cmd_sel[SEG_COUNT*IF_RAM_SEL_WIDTH*n +: SEG_COUNT*IF_RAM_SEL_WIDTH]),
+            .data_dma_ram_wr_cmd_be(if_data_dma_ram_wr_cmd_be[SEG_COUNT*SEG_BE_WIDTH*n +: SEG_COUNT*SEG_BE_WIDTH]),
+            .data_dma_ram_wr_cmd_addr(if_data_dma_ram_wr_cmd_addr[SEG_COUNT*SEG_ADDR_WIDTH*n +: SEG_COUNT*SEG_ADDR_WIDTH]),
+            .data_dma_ram_wr_cmd_data(if_data_dma_ram_wr_cmd_data[SEG_COUNT*SEG_DATA_WIDTH*n +: SEG_COUNT*SEG_DATA_WIDTH]),
+            .data_dma_ram_wr_cmd_valid(if_data_dma_ram_wr_cmd_valid[SEG_COUNT*n +: SEG_COUNT]),
+            .data_dma_ram_wr_cmd_ready(if_data_dma_ram_wr_cmd_ready[SEG_COUNT*n +: SEG_COUNT]),
+            .data_dma_ram_rd_cmd_sel(if_data_dma_ram_rd_cmd_sel[SEG_COUNT*IF_RAM_SEL_WIDTH*n +: SEG_COUNT*IF_RAM_SEL_WIDTH]),
+            .data_dma_ram_rd_cmd_addr(if_data_dma_ram_rd_cmd_addr[SEG_COUNT*SEG_ADDR_WIDTH*n +: SEG_COUNT*SEG_ADDR_WIDTH]),
+            .data_dma_ram_rd_cmd_valid(if_data_dma_ram_rd_cmd_valid[SEG_COUNT*n +: SEG_COUNT]),
+            .data_dma_ram_rd_cmd_ready(if_data_dma_ram_rd_cmd_ready[SEG_COUNT*n +: SEG_COUNT]),
+            .data_dma_ram_rd_resp_data(if_data_dma_ram_rd_resp_data[SEG_COUNT*SEG_DATA_WIDTH*n +: SEG_COUNT*SEG_DATA_WIDTH]),
+            .data_dma_ram_rd_resp_valid(if_data_dma_ram_rd_resp_valid[SEG_COUNT*n +: SEG_COUNT]),
+            .data_dma_ram_rd_resp_ready(if_data_dma_ram_rd_resp_ready[SEG_COUNT*n +: SEG_COUNT]),
+
+            /*
+             * Transmit data output
+             */
+            .tx_axis_tdata(tx_axis_tdata),
+            .tx_axis_tkeep(tx_axis_tkeep),
+            .tx_axis_tvalid(tx_axis_tvalid),
+            .tx_axis_tready(tx_axis_tready),
+            .tx_axis_tlast(tx_axis_tlast),
+            .tx_axis_tuser(tx_axis_tuser),
+
+            /*
+             * Transmit timestamp input
+             */
+            .s_axis_tx_ptp_ts_96(tx_ptp_ts_96),
+            .s_axis_tx_ptp_ts_valid(tx_ptp_ts_valid),
+            .s_axis_tx_ptp_ts_ready(tx_ptp_ts_ready),
+
+            /*
+             * Receive data input
+             */
+            .rx_axis_tdata(rx_axis_tdata),
+            .rx_axis_tkeep(rx_axis_tkeep),
+            .rx_axis_tvalid(rx_axis_tvalid),
+            .rx_axis_tready(rx_axis_tready),
+            .rx_axis_tlast(rx_axis_tlast),
+            .rx_axis_tuser(rx_axis_tuser),
+
+            /*
+             * Receive timestamp input
+             */
+            .s_axis_rx_ptp_ts_96(rx_ptp_ts_96),
+            .s_axis_rx_ptp_ts_valid(rx_ptp_ts_valid),
+            .s_axis_rx_ptp_ts_ready(rx_ptp_ts_ready),
+
+            /*
+             * PTP clock
+             */
+            .ptp_ts_96(ptp_ts_96),
+            .ptp_ts_step(ptp_ts_step),
+
+            /*
+             * MSI interrupts
+             */
+            .msi_irq(if_msi_irq[n*32 +: 32])
+        );
+
+        for (m = 0; m < PORTS_PER_IF; m = m + 1) begin : mac
+
+            axis_async_fifo #(
+                .DEPTH(TX_FIFO_DEPTH),
+                .DATA_WIDTH(AXIS_ETH_DATA_WIDTH),
+                .KEEP_ENABLE(AXIS_ETH_KEEP_WIDTH > 1),
+                .KEEP_WIDTH(AXIS_ETH_KEEP_WIDTH),
+                .LAST_ENABLE(1),
+                .ID_ENABLE(0),
+                .DEST_ENABLE(0),
+                .USER_ENABLE(1),
+                .USER_WIDTH(1),
+                .FRAME_FIFO(1),
+                .USER_BAD_FRAME_VALUE(1'b1),
+                .USER_BAD_FRAME_MASK(1'b1),
+                .DROP_BAD_FRAME(1),
+                .DROP_WHEN_FULL(0)
+            )
+            mac_tx_fifo_inst (
+                // Common reset
+                .async_rst(rst_250mhz | port_tx_rst[n*PORTS_PER_IF+m]),
+                // AXI input
+                .s_clk(clk_250mhz),
+                .s_axis_tdata(tx_axis_tdata[m*AXIS_DATA_WIDTH +: AXIS_DATA_WIDTH]),
+                .s_axis_tkeep(tx_axis_tkeep[m*AXIS_KEEP_WIDTH +: AXIS_KEEP_WIDTH]),
+                .s_axis_tvalid(tx_axis_tvalid[m +: 1]),
+                .s_axis_tready(tx_axis_tready[m +: 1]),
+                .s_axis_tlast(tx_axis_tlast[m +: 1]),
+                .s_axis_tid(0),
+                .s_axis_tdest(0),
+                .s_axis_tuser(tx_axis_tuser[m +: 1]),
+                // AXI output
+                .m_clk(port_tx_clk[n*PORTS_PER_IF+m]),
+                .m_axis_tdata(port_tx_axis_tdata[(n*PORTS_PER_IF+m)*AXIS_ETH_DATA_WIDTH +: AXIS_ETH_DATA_WIDTH]),
+                .m_axis_tkeep(port_tx_axis_tkeep[(n*PORTS_PER_IF+m)*AXIS_ETH_KEEP_WIDTH +: AXIS_ETH_KEEP_WIDTH]),
+                .m_axis_tvalid(port_tx_axis_tvalid[n*PORTS_PER_IF+m]),
+                .m_axis_tready(port_tx_axis_tready[n*PORTS_PER_IF+m]),
+                .m_axis_tlast(port_tx_axis_tlast[n*PORTS_PER_IF+m]),
+                .m_axis_tid(),
+                .m_axis_tdest(),
+                .m_axis_tuser(port_tx_axis_tuser[n*PORTS_PER_IF+m]),
+                // Status
+                .s_status_overflow(),
+                .s_status_bad_frame(),
+                .s_status_good_frame(),
+                .m_status_overflow(),
+                .m_status_bad_frame(),
+                .m_status_good_frame()
+            );
+
+            axis_async_fifo #(
+                .DEPTH(RX_FIFO_DEPTH),
+                .DATA_WIDTH(AXIS_ETH_DATA_WIDTH),
+                .KEEP_ENABLE(AXIS_ETH_KEEP_WIDTH > 1),
+                .KEEP_WIDTH(AXIS_ETH_KEEP_WIDTH),
+                .LAST_ENABLE(1),
+                .ID_ENABLE(0),
+                .DEST_ENABLE(0),
+                .USER_ENABLE(1),
+                .USER_WIDTH(1),
+                .FRAME_FIFO(1),
+                .USER_BAD_FRAME_VALUE(1'b1),
+                .USER_BAD_FRAME_MASK(1'b1),
+                .DROP_BAD_FRAME(1),
+                .DROP_WHEN_FULL(1)
+            )
+            mac_rx_fifo_inst (
+                // Common reset
+                .async_rst(port_rx_rst[n*PORTS_PER_IF+m] | rst_250mhz),
+                // AXI input
+                .s_clk(port_rx_clk[n*PORTS_PER_IF+m]),
+                .s_axis_tdata(port_rx_axis_tdata[(n*PORTS_PER_IF+m)*AXIS_ETH_DATA_WIDTH +: AXIS_ETH_DATA_WIDTH]),
+                .s_axis_tkeep(port_rx_axis_tkeep[(n*PORTS_PER_IF+m)*AXIS_ETH_KEEP_WIDTH +: AXIS_ETH_KEEP_WIDTH]),
+                .s_axis_tvalid(port_rx_axis_tvalid[n*PORTS_PER_IF+m]),
+                .s_axis_tready(),
+                .s_axis_tlast(port_rx_axis_tlast[n*PORTS_PER_IF+m]),
+                .s_axis_tid(0),
+                .s_axis_tdest(0),
+                .s_axis_tuser(port_rx_axis_tuser[n*PORTS_PER_IF+m]),
+                // AXI output
+                .m_clk(clk_250mhz),
+                .m_axis_tdata(rx_axis_tdata[m*AXIS_DATA_WIDTH +: AXIS_DATA_WIDTH]),
+                .m_axis_tkeep(rx_axis_tkeep[m*AXIS_KEEP_WIDTH +: AXIS_KEEP_WIDTH]),
+                .m_axis_tvalid(rx_axis_tvalid[m +: 1]),
+                .m_axis_tready(rx_axis_tready[m +: 1]),
+                .m_axis_tlast(rx_axis_tlast[m +: 1]),
+                .m_axis_tid(),
+                .m_axis_tdest(),
+                .m_axis_tuser(rx_axis_tuser[m +: 1]),
+                // Status
+                .s_status_overflow(),
+                .s_status_bad_frame(),
+                .s_status_good_frame(),
+                .m_status_overflow(),
+                .m_status_bad_frame(),
+                .m_status_good_frame()
+            );
+
+        end
+
+    end
+
+endgenerate
+
+endmodule
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/rtl/one_in_one_out/interface-perf.v ./fpga/mqnic/AU250/fpga_100g/rtl/one_in_one_out/interface-perf.v
--- ./fpga-raw/mqnic/AU250/fpga_100g/rtl/one_in_one_out/interface-perf.v	1970-01-01 08:00:00.000000000 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/rtl/one_in_one_out/interface-perf.v	2022-01-31 13:02:15.010256655 +0800
@@ -0,0 +1,2583 @@
+/*
+
+Copyright 2019, The Regents of the University of California.
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+
+   1. Redistributions of source code must retain the above copyright notice,
+      this list of conditions and the following disclaimer.
+
+   2. Redistributions in binary form must reproduce the above copyright notice,
+      this list of conditions and the following disclaimer in the documentation
+      and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE REGENTS OF THE UNIVERSITY OF CALIFORNIA ''AS
+IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE REGENTS OF THE UNIVERSITY OF CALIFORNIA OR
+CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
+OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
+OF SUCH DAMAGE.
+
+The views and conclusions contained in the software and documentation are those
+of the authors and should not be interpreted as representing official policies,
+either expressed or implied, of The Regents of the University of California.
+
+*/
+
+// Language: Verilog 2001
+
+`timescale 1ns / 1ps
+
+/*
+ * NIC Interface
+ */
+module interface #
+(
+    // Number of ports
+    parameter PORTS = 1,
+    // DMA address width
+    parameter DMA_ADDR_WIDTH = 64,
+    // DMA length field width
+    parameter DMA_LEN_WIDTH = 16,
+    // DMA tag field width
+    parameter DMA_TAG_WIDTH = 8,
+    // Number of outstanding operations (event queue)
+    parameter EVENT_QUEUE_OP_TABLE_SIZE = 16,
+    // Number of outstanding operations (transmit queue)
+    parameter TX_QUEUE_OP_TABLE_SIZE = 16,
+    // Number of outstanding operations (receive queue)
+    parameter RX_QUEUE_OP_TABLE_SIZE = 16,
+    // Number of outstanding operations (transmit completion queue)
+    parameter TX_CPL_QUEUE_OP_TABLE_SIZE = 16,
+    // Number of outstanding operations (receive completion queue)
+    parameter RX_CPL_QUEUE_OP_TABLE_SIZE = 16,
+    // Event queue index width
+    parameter EVENT_QUEUE_INDEX_WIDTH = 5,
+    // Transmit queue index width
+    parameter TX_QUEUE_INDEX_WIDTH = 8,
+    // Receive queue index width
+    parameter RX_QUEUE_INDEX_WIDTH = 8,
+    // Transmit completion queue index width
+    parameter TX_CPL_QUEUE_INDEX_WIDTH = 8,
+    // Receive completion queue index width
+    parameter RX_CPL_QUEUE_INDEX_WIDTH = 8,
+    // Pipeline setting (event queue)
+    parameter EVENT_QUEUE_PIPELINE = 3,
+    // Pipeline setting (transmit queue)
+    parameter TX_QUEUE_PIPELINE = 3,
+    // Pipeline setting (receive queue)
+    parameter RX_QUEUE_PIPELINE = 3,
+    // Pipeline setting (transmit completion queue)
+    parameter TX_CPL_QUEUE_PIPELINE = 3,
+    // Pipeline setting (receive completion queue)
+    parameter RX_CPL_QUEUE_PIPELINE = 3,
+    // Transmit descriptor table size (number of in-flight operations)
+    parameter TX_DESC_TABLE_SIZE = 16,
+    // Transmit packet table size (number of in-progress packets)
+    parameter TX_PKT_TABLE_SIZE = 8,
+    // Receive descriptor table size (number of in-flight operations)
+    parameter RX_DESC_TABLE_SIZE = 16,
+    // Receive packet table size (number of in-progress packets)
+    parameter RX_PKT_TABLE_SIZE = 8,
+    // Max number of in-flight descriptor requests (transmit)
+    parameter TX_MAX_DESC_REQ = 16,
+    // Max number of in-flight descriptor requests (transmit)
+    parameter RX_MAX_DESC_REQ = 16,
+    // Transmit scheduler type
+    parameter TX_SCHEDULER = "RR",
+    // Scheduler operation table size
+    parameter TX_SCHEDULER_OP_TABLE_SIZE = 32,
+    // Scheduler pipeline setting
+    parameter TX_SCHEDULER_PIPELINE = 3,
+    // Scheduler TDMA index width
+    parameter TDMA_INDEX_WIDTH = 8,
+    // Interrupt number width
+    parameter INT_WIDTH = 8,
+    // Queue element pointer width
+    parameter QUEUE_PTR_WIDTH = 16,
+    // Queue log size field width
+    parameter LOG_QUEUE_SIZE_WIDTH = 4,
+    // Log desc block size field width
+    parameter LOG_BLOCK_SIZE_WIDTH = 2,
+    // Enable PTP timestamping
+    parameter PTP_TS_ENABLE = 1,
+    // PTP timestamp width
+    parameter PTP_TS_WIDTH = 96,
+    // Enable TX checksum offload
+    parameter TX_CHECKSUM_ENABLE = 1,
+    // Enable RX RSS
+    parameter RX_RSS_ENABLE = 1,
+    // Enable RX hashing
+    parameter RX_HASH_ENABLE = 1,
+    // Enable RX checksum offload
+    parameter RX_CHECKSUM_ENABLE = 1,
+    // Width of AXI lite data bus in bits
+    parameter AXIL_DATA_WIDTH = 32,
+    // Width of AXI lite address bus in bits
+    parameter AXIL_ADDR_WIDTH = 16,
+    // Width of AXI lite wstrb (width of data bus in words)
+    parameter AXIL_STRB_WIDTH = (AXIL_DATA_WIDTH/8),
+    // DMA RAM segment count
+    parameter SEG_COUNT = 2,
+    // DMA RAM segment data width
+    parameter SEG_DATA_WIDTH = 64,
+    // DMA RAM segment address width
+    parameter SEG_ADDR_WIDTH = 8,
+    // DMA RAM segment byte enable width
+    parameter SEG_BE_WIDTH = SEG_DATA_WIDTH/8,
+    // DMA RAM segment select width
+    parameter RAM_SEL_WIDTH = $clog2(PORTS),
+    // DMA RAM address width
+    parameter RAM_ADDR_WIDTH = SEG_ADDR_WIDTH+$clog2(SEG_COUNT)+$clog2(SEG_BE_WIDTH),
+    // DMA RAM pipeline stages
+    parameter RAM_PIPELINE = 2,
+    // Width of AXI stream interfaces in bits
+    parameter AXIS_DATA_WIDTH = 256,
+    // AXI stream tkeep signal width (words per cycle)
+    parameter AXIS_KEEP_WIDTH = AXIS_DATA_WIDTH/8,
+    // Max transmit packet size
+    parameter MAX_TX_SIZE = 2048,
+    // Max receive packet size
+    parameter MAX_RX_SIZE = 2048,
+    // DMA TX RAM size
+    parameter TX_RAM_SIZE = TX_PKT_TABLE_SIZE*MAX_TX_SIZE,
+    // DMA RX RAM size
+    parameter RX_RAM_SIZE = RX_PKT_TABLE_SIZE*MAX_RX_SIZE,
+    //whether RMT_pipeline is enabled
+    parameter RMT_TX_ENABLE = 1
+)
+(
+    input  wire                                clk,
+    input  wire                                rst,
+
+    /*
+     * DMA read descriptor output (control)
+     */
+    output wire [DMA_ADDR_WIDTH-1:0]           m_axis_ctrl_dma_read_desc_dma_addr,
+    output wire [RAM_SEL_WIDTH-1:0]            m_axis_ctrl_dma_read_desc_ram_sel,
+    output wire [RAM_ADDR_WIDTH-1:0]           m_axis_ctrl_dma_read_desc_ram_addr,
+    output wire [DMA_LEN_WIDTH-1:0]            m_axis_ctrl_dma_read_desc_len,
+    output wire [DMA_TAG_WIDTH-1:0]            m_axis_ctrl_dma_read_desc_tag,
+    output wire                                m_axis_ctrl_dma_read_desc_valid,
+    input  wire                                m_axis_ctrl_dma_read_desc_ready,
+
+    /*
+     * DMA read descriptor status input (control)
+     */
+    input  wire [DMA_TAG_WIDTH-1:0]            s_axis_ctrl_dma_read_desc_status_tag,
+    input  wire                                s_axis_ctrl_dma_read_desc_status_valid,
+
+    /*
+     * DMA write descriptor output (control)
+     */
+    output wire [DMA_ADDR_WIDTH-1:0]           m_axis_ctrl_dma_write_desc_dma_addr,
+    output wire [RAM_SEL_WIDTH-1:0]            m_axis_ctrl_dma_write_desc_ram_sel,
+    output wire [RAM_ADDR_WIDTH-1:0]           m_axis_ctrl_dma_write_desc_ram_addr,
+    output wire [DMA_LEN_WIDTH-1:0]            m_axis_ctrl_dma_write_desc_len,
+    output wire [DMA_TAG_WIDTH-1:0]            m_axis_ctrl_dma_write_desc_tag,
+    output wire                                m_axis_ctrl_dma_write_desc_valid,
+    input  wire                                m_axis_ctrl_dma_write_desc_ready,
+
+    /*
+     * DMA write descriptor status input (control)
+     */
+    input  wire [DMA_TAG_WIDTH-1:0]            s_axis_ctrl_dma_write_desc_status_tag,
+    input  wire                                s_axis_ctrl_dma_write_desc_status_valid,
+
+    /*
+     * DMA read descriptor output (data)
+     */
+    output wire [DMA_ADDR_WIDTH-1:0]           m_axis_data_dma_read_desc_dma_addr,
+    output wire [RAM_SEL_WIDTH-1:0]            m_axis_data_dma_read_desc_ram_sel,
+    output wire [RAM_ADDR_WIDTH-1:0]           m_axis_data_dma_read_desc_ram_addr,
+    output wire [DMA_LEN_WIDTH-1:0]            m_axis_data_dma_read_desc_len,
+    output wire [DMA_TAG_WIDTH-1:0]            m_axis_data_dma_read_desc_tag,
+    output wire                                m_axis_data_dma_read_desc_valid,
+    input  wire                                m_axis_data_dma_read_desc_ready,
+
+    /*
+     * DMA read descriptor status input (data)
+     */
+    input  wire [DMA_TAG_WIDTH-1:0]            s_axis_data_dma_read_desc_status_tag,
+    input  wire                                s_axis_data_dma_read_desc_status_valid,
+
+    /*
+     * DMA write descriptor output (data)
+     */
+    output wire [DMA_ADDR_WIDTH-1:0]           m_axis_data_dma_write_desc_dma_addr,
+    output wire [RAM_SEL_WIDTH-1:0]            m_axis_data_dma_write_desc_ram_sel,
+    output wire [RAM_ADDR_WIDTH-1:0]           m_axis_data_dma_write_desc_ram_addr,
+    output wire [DMA_LEN_WIDTH-1:0]            m_axis_data_dma_write_desc_len,
+    output wire [DMA_TAG_WIDTH-1:0]            m_axis_data_dma_write_desc_tag,
+    output wire                                m_axis_data_dma_write_desc_valid,
+    input  wire                                m_axis_data_dma_write_desc_ready,
+
+    /*
+     * DMA write descriptor status input (data)
+     */
+    input  wire [DMA_TAG_WIDTH-1:0]            s_axis_data_dma_write_desc_status_tag,
+    input  wire                                s_axis_data_dma_write_desc_status_valid,
+
+    /*
+     * AXI-Lite slave interface
+     */
+    input  wire [AXIL_ADDR_WIDTH-1:0]          s_axil_awaddr,
+    input  wire [2:0]                          s_axil_awprot,
+    input  wire                                s_axil_awvalid,
+    output wire                                s_axil_awready,
+    input  wire [AXIL_DATA_WIDTH-1:0]          s_axil_wdata,
+    input  wire [AXIL_STRB_WIDTH-1:0]          s_axil_wstrb,
+    input  wire                                s_axil_wvalid,
+    output wire                                s_axil_wready,
+    output wire [1:0]                          s_axil_bresp,
+    output wire                                s_axil_bvalid,
+    input  wire                                s_axil_bready,
+    input  wire [AXIL_ADDR_WIDTH-1:0]          s_axil_araddr,
+    input  wire [2:0]                          s_axil_arprot,
+    input  wire                                s_axil_arvalid,
+    output wire                                s_axil_arready,
+    output wire [AXIL_DATA_WIDTH-1:0]          s_axil_rdata,
+    output wire [1:0]                          s_axil_rresp,
+    output wire                                s_axil_rvalid,
+    input  wire                                s_axil_rready,
+
+    /*
+     * AXI-Lite master interface (passthrough for NIC control and status)
+     */
+    output wire [AXIL_ADDR_WIDTH-1:0]          m_axil_csr_awaddr,
+    output wire [2:0]                          m_axil_csr_awprot,
+    output wire                                m_axil_csr_awvalid,
+    input  wire                                m_axil_csr_awready,
+    output wire [AXIL_DATA_WIDTH-1:0]          m_axil_csr_wdata,
+    output wire [AXIL_STRB_WIDTH-1:0]          m_axil_csr_wstrb,
+    output wire                                m_axil_csr_wvalid,
+    input  wire                                m_axil_csr_wready,
+    input  wire [1:0]                          m_axil_csr_bresp,
+    input  wire                                m_axil_csr_bvalid,
+    output wire                                m_axil_csr_bready,
+    output wire [AXIL_ADDR_WIDTH-1:0]          m_axil_csr_araddr,
+    output wire [2:0]                          m_axil_csr_arprot,
+    output wire                                m_axil_csr_arvalid,
+    input  wire                                m_axil_csr_arready,
+    input  wire [AXIL_DATA_WIDTH-1:0]          m_axil_csr_rdata,
+    input  wire [1:0]                          m_axil_csr_rresp,
+    input  wire                                m_axil_csr_rvalid,
+    output wire                                m_axil_csr_rready,
+
+    /*
+     * RAM interface (control)
+     */
+    input  wire [SEG_COUNT*RAM_SEL_WIDTH-1:0]  ctrl_dma_ram_wr_cmd_sel,
+    input  wire [SEG_COUNT*SEG_BE_WIDTH-1:0]   ctrl_dma_ram_wr_cmd_be,
+    input  wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0] ctrl_dma_ram_wr_cmd_addr,
+    input  wire [SEG_COUNT*SEG_DATA_WIDTH-1:0] ctrl_dma_ram_wr_cmd_data,
+    input  wire [SEG_COUNT-1:0]                ctrl_dma_ram_wr_cmd_valid,
+    output wire [SEG_COUNT-1:0]                ctrl_dma_ram_wr_cmd_ready,
+    input  wire [SEG_COUNT*RAM_SEL_WIDTH-1:0]  ctrl_dma_ram_rd_cmd_sel,
+    input  wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0] ctrl_dma_ram_rd_cmd_addr,
+    input  wire [SEG_COUNT-1:0]                ctrl_dma_ram_rd_cmd_valid,
+    output wire [SEG_COUNT-1:0]                ctrl_dma_ram_rd_cmd_ready,
+    output wire [SEG_COUNT*SEG_DATA_WIDTH-1:0] ctrl_dma_ram_rd_resp_data,
+    output wire [SEG_COUNT-1:0]                ctrl_dma_ram_rd_resp_valid,
+    input  wire [SEG_COUNT-1:0]                ctrl_dma_ram_rd_resp_ready,
+
+    /*
+     * RAM interface (data)
+     */
+    input  wire [SEG_COUNT*RAM_SEL_WIDTH-1:0]  data_dma_ram_wr_cmd_sel,
+    input  wire [SEG_COUNT*SEG_BE_WIDTH-1:0]   data_dma_ram_wr_cmd_be,
+    input  wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0] data_dma_ram_wr_cmd_addr,
+    input  wire [SEG_COUNT*SEG_DATA_WIDTH-1:0] data_dma_ram_wr_cmd_data,
+    input  wire [SEG_COUNT-1:0]                data_dma_ram_wr_cmd_valid,
+    output wire [SEG_COUNT-1:0]                data_dma_ram_wr_cmd_ready,
+    input  wire [SEG_COUNT*RAM_SEL_WIDTH-1:0]  data_dma_ram_rd_cmd_sel,
+    input  wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0] data_dma_ram_rd_cmd_addr,
+    input  wire [SEG_COUNT-1:0]                data_dma_ram_rd_cmd_valid,
+    output wire [SEG_COUNT-1:0]                data_dma_ram_rd_cmd_ready,
+    output wire [SEG_COUNT*SEG_DATA_WIDTH-1:0] data_dma_ram_rd_resp_data,
+    output wire [SEG_COUNT-1:0]                data_dma_ram_rd_resp_valid,
+    input  wire [SEG_COUNT-1:0]                data_dma_ram_rd_resp_ready,
+
+    /*
+     * Transmit data output
+     */
+    output wire [PORTS*AXIS_DATA_WIDTH-1:0]    tx_axis_tdata,
+    output wire [PORTS*AXIS_KEEP_WIDTH-1:0]    tx_axis_tkeep,
+    output wire [PORTS-1:0]                    tx_axis_tvalid,
+    input  wire [PORTS-1:0]                    tx_axis_tready,
+    output wire [PORTS-1:0]                    tx_axis_tlast,
+    output wire [PORTS-1:0]                    tx_axis_tuser,
+
+    /*
+     * Transmit timestamp input
+     */
+    input  wire [PORTS*PTP_TS_WIDTH-1:0]       s_axis_tx_ptp_ts_96,
+    input  wire [PORTS-1:0]                    s_axis_tx_ptp_ts_valid,
+    output wire [PORTS-1:0]                    s_axis_tx_ptp_ts_ready,
+
+    /*
+     * Receive data input
+     */
+    input  wire [PORTS*AXIS_DATA_WIDTH-1:0]    rx_axis_tdata,
+    input  wire [PORTS*AXIS_KEEP_WIDTH-1:0]    rx_axis_tkeep,
+    input  wire [PORTS-1:0]                    rx_axis_tvalid,
+    output wire [PORTS-1:0]                    rx_axis_tready,
+    input  wire [PORTS-1:0]                    rx_axis_tlast,
+    input  wire [PORTS-1:0]                    rx_axis_tuser,
+
+    /*
+     * Receive timestamp input
+     */
+    input  wire [PORTS*PTP_TS_WIDTH-1:0]       s_axis_rx_ptp_ts_96,
+    input  wire [PORTS-1:0]                    s_axis_rx_ptp_ts_valid,
+    output wire [PORTS-1:0]                    s_axis_rx_ptp_ts_ready,
+
+    /*
+     * PTP clock
+     */
+    input  wire [95:0]                         ptp_ts_96,
+    input  wire                                ptp_ts_step,
+
+    /*
+     * MSI interrupts
+     */
+    output wire [31:0]                         msi_irq
+);
+
+parameter DESC_SIZE = 16;
+parameter CPL_SIZE = 32;
+parameter EVENT_SIZE = 32;
+
+parameter AXIS_DESC_DATA_WIDTH = DESC_SIZE*8;
+parameter AXIS_DESC_KEEP_WIDTH = AXIS_DESC_DATA_WIDTH/8;
+
+parameter EVENT_SOURCE_WIDTH = 16;
+parameter EVENT_TYPE_WIDTH = 16;
+
+parameter MAX_DESC_TABLE_SIZE = TX_DESC_TABLE_SIZE > RX_DESC_TABLE_SIZE ? TX_DESC_TABLE_SIZE : RX_DESC_TABLE_SIZE;
+
+parameter REQ_TAG_WIDTH = $clog2(MAX_DESC_TABLE_SIZE) + 1 + $clog2(PORTS+1);
+parameter DESC_REQ_TAG_WIDTH = $clog2(MAX_DESC_TABLE_SIZE) + 1 + $clog2(PORTS+1);
+
+parameter QUEUE_REQ_TAG_WIDTH = $clog2(MAX_DESC_TABLE_SIZE) + 1 + $clog2(PORTS+1);
+parameter QUEUE_OP_TAG_WIDTH = 6;
+
+parameter DMA_TAG_WIDTH_INT = DMA_TAG_WIDTH - $clog2(PORTS);
+
+parameter QUEUE_INDEX_WIDTH = TX_QUEUE_INDEX_WIDTH > RX_QUEUE_INDEX_WIDTH ? TX_QUEUE_INDEX_WIDTH : RX_QUEUE_INDEX_WIDTH;
+parameter CPL_QUEUE_INDEX_WIDTH = TX_CPL_QUEUE_INDEX_WIDTH > RX_CPL_QUEUE_INDEX_WIDTH ? TX_CPL_QUEUE_INDEX_WIDTH : RX_CPL_QUEUE_INDEX_WIDTH;
+
+parameter PORT_DESC_REQ_TAG_WIDTH = DESC_REQ_TAG_WIDTH - $clog2(PORTS+1);
+
+parameter AXIL_CSR_ADDR_WIDTH = AXIL_ADDR_WIDTH-5-$clog2((PORTS+3)/8);
+parameter AXIL_CTRL_ADDR_WIDTH = AXIL_ADDR_WIDTH-5-$clog2((PORTS+3)/8);
+parameter AXIL_EQM_ADDR_WIDTH = AXIL_ADDR_WIDTH-4-$clog2((PORTS+3)/8);
+parameter AXIL_TX_QM_ADDR_WIDTH = AXIL_ADDR_WIDTH-3-$clog2((PORTS+3)/8);
+parameter AXIL_TX_CQM_ADDR_WIDTH = AXIL_ADDR_WIDTH-3-$clog2((PORTS+3)/8);
+parameter AXIL_RX_QM_ADDR_WIDTH = AXIL_ADDR_WIDTH-4-$clog2((PORTS+3)/8);
+parameter AXIL_RX_CQM_ADDR_WIDTH = AXIL_ADDR_WIDTH-4-$clog2((PORTS+3)/8);
+parameter AXIL_PORT_ADDR_WIDTH = AXIL_ADDR_WIDTH-3-$clog2((PORTS+3)/8);
+
+parameter AXIL_CSR_BASE_ADDR = 0;
+parameter AXIL_CTRL_BASE_ADDR = AXIL_CSR_BASE_ADDR + 2**AXIL_CSR_ADDR_WIDTH;
+parameter AXIL_EQM_BASE_ADDR = AXIL_CTRL_BASE_ADDR + 2**AXIL_CTRL_ADDR_WIDTH;
+parameter AXIL_TX_QM_BASE_ADDR = AXIL_EQM_BASE_ADDR + 2**AXIL_EQM_ADDR_WIDTH;
+parameter AXIL_TX_CQM_BASE_ADDR = AXIL_TX_QM_BASE_ADDR + 2**AXIL_TX_QM_ADDR_WIDTH;
+parameter AXIL_RX_QM_BASE_ADDR = AXIL_TX_CQM_BASE_ADDR + 2**AXIL_TX_CQM_ADDR_WIDTH;
+parameter AXIL_RX_CQM_BASE_ADDR = AXIL_RX_QM_BASE_ADDR + 2**AXIL_RX_QM_ADDR_WIDTH;
+parameter AXIL_PORT_BASE_ADDR = AXIL_RX_CQM_BASE_ADDR + 2**AXIL_RX_CQM_ADDR_WIDTH;
+
+// parameter sizing helpers
+function [31:0] w_32(input [31:0] val);
+    w_32 = val;
+endfunction
+
+// RMT
+assign tx_axis_tuser = 0;
+
+wire [31:0]				vlan_drop_flags;
+reg [31:0]				vlan_drop_flags_r;
+wire [31:0]				ctrl_token;
+reg [31:0]				ctrl_token_r;
+
+always @(posedge clk) begin
+	if (rst) begin
+		ctrl_token_r <= 0;
+		vlan_drop_flags_r <= 0;
+	end
+	else begin
+		ctrl_token_r <= ctrl_token;
+		vlan_drop_flags_r <= vlan_drop_flags;
+	end
+end
+
+if (RMT_TX_ENABLE) begin
+    rmt_wrapper
+    rmt_wrapper_tx
+    (
+    	.clk(clk),		// axis clk
+    	.aresetn(~rst),	
+
+        .vlan_drop_flags(vlan_drop_flags_r),
+        .ctrl_token(ctrl_token),
+
+    	// input Slave AXI Stream
+    	.s_axis_tdata(rx_axis_tdata),
+    	.s_axis_tkeep(rx_axis_tkeep),
+    	.s_axis_tuser(rx_axis_tuser),
+    	.s_axis_tvalid(rx_axis_tvalid),
+    	.s_axis_tready(rx_axis_tready),
+    	.s_axis_tlast(rx_axis_tlast),
+
+    	// output Master AXI Stream
+    	.m_axis_tdata(tx_axis_tdata),
+    	.m_axis_tkeep(tx_axis_tkeep),
+    	.m_axis_tuser(0),
+    	.m_axis_tvalid(tx_axis_tvalid),
+    	.m_axis_tready(tx_axis_tready),
+    	.m_axis_tlast(tx_axis_tlast)
+    );
+end
+/*
+else begin
+    assign tx_axis_tdata = rx_axis_tdata;
+    assign tx_axis_tkeep = rx_axis_tkeep;
+    assign tx_axis_tlast = rx_axis_tlast;
+    //assign tx_axis_tuser = rx_axis_tuser;
+    assign tx_axis_tvalid = rx_axis_tvalid;
+    assign rx_axis_tready = tx_axis_tready;
+end*/
+
+// AXI lite connections
+wire [AXIL_ADDR_WIDTH-1:0] axil_ctrl_awaddr;
+wire [2:0]                 axil_ctrl_awprot;
+wire                       axil_ctrl_awvalid;
+wire                       axil_ctrl_awready;
+wire [AXIL_DATA_WIDTH-1:0] axil_ctrl_wdata;
+wire [AXIL_STRB_WIDTH-1:0] axil_ctrl_wstrb;
+wire                       axil_ctrl_wvalid;
+wire                       axil_ctrl_wready;
+wire [1:0]                 axil_ctrl_bresp;
+wire                       axil_ctrl_bvalid;
+wire                       axil_ctrl_bready;
+wire [AXIL_ADDR_WIDTH-1:0] axil_ctrl_araddr;
+wire [2:0]                 axil_ctrl_arprot;
+wire                       axil_ctrl_arvalid;
+wire                       axil_ctrl_arready;
+wire [AXIL_DATA_WIDTH-1:0] axil_ctrl_rdata;
+wire [1:0]                 axil_ctrl_rresp;
+wire                       axil_ctrl_rvalid;
+wire                       axil_ctrl_rready;
+
+wire [AXIL_ADDR_WIDTH-1:0] axil_event_queue_manager_awaddr;
+wire [2:0]                 axil_event_queue_manager_awprot;
+wire                       axil_event_queue_manager_awvalid;
+wire                       axil_event_queue_manager_awready;
+wire [AXIL_DATA_WIDTH-1:0] axil_event_queue_manager_wdata;
+wire [AXIL_STRB_WIDTH-1:0] axil_event_queue_manager_wstrb;
+wire                       axil_event_queue_manager_wvalid;
+wire                       axil_event_queue_manager_wready;
+wire [1:0]                 axil_event_queue_manager_bresp;
+wire                       axil_event_queue_manager_bvalid;
+wire                       axil_event_queue_manager_bready;
+wire [AXIL_ADDR_WIDTH-1:0] axil_event_queue_manager_araddr;
+wire [2:0]                 axil_event_queue_manager_arprot;
+wire                       axil_event_queue_manager_arvalid;
+wire                       axil_event_queue_manager_arready;
+wire [AXIL_DATA_WIDTH-1:0] axil_event_queue_manager_rdata;
+wire [1:0]                 axil_event_queue_manager_rresp;
+wire                       axil_event_queue_manager_rvalid;
+wire                       axil_event_queue_manager_rready;
+
+wire [AXIL_ADDR_WIDTH-1:0] axil_tx_queue_manager_awaddr;
+wire [2:0]                 axil_tx_queue_manager_awprot;
+wire                       axil_tx_queue_manager_awvalid;
+wire                       axil_tx_queue_manager_awready;
+wire [AXIL_DATA_WIDTH-1:0] axil_tx_queue_manager_wdata;
+wire [AXIL_STRB_WIDTH-1:0] axil_tx_queue_manager_wstrb;
+wire                       axil_tx_queue_manager_wvalid;
+wire                       axil_tx_queue_manager_wready;
+wire [1:0]                 axil_tx_queue_manager_bresp;
+wire                       axil_tx_queue_manager_bvalid;
+wire                       axil_tx_queue_manager_bready;
+wire [AXIL_ADDR_WIDTH-1:0] axil_tx_queue_manager_araddr;
+wire [2:0]                 axil_tx_queue_manager_arprot;
+wire                       axil_tx_queue_manager_arvalid;
+wire                       axil_tx_queue_manager_arready;
+wire [AXIL_DATA_WIDTH-1:0] axil_tx_queue_manager_rdata;
+wire [1:0]                 axil_tx_queue_manager_rresp;
+wire                       axil_tx_queue_manager_rvalid;
+wire                       axil_tx_queue_manager_rready;
+
+wire [AXIL_ADDR_WIDTH-1:0] axil_tx_cpl_queue_manager_awaddr;
+wire [2:0]                 axil_tx_cpl_queue_manager_awprot;
+wire                       axil_tx_cpl_queue_manager_awvalid;
+wire                       axil_tx_cpl_queue_manager_awready;
+wire [AXIL_DATA_WIDTH-1:0] axil_tx_cpl_queue_manager_wdata;
+wire [AXIL_STRB_WIDTH-1:0] axil_tx_cpl_queue_manager_wstrb;
+wire                       axil_tx_cpl_queue_manager_wvalid;
+wire                       axil_tx_cpl_queue_manager_wready;
+wire [1:0]                 axil_tx_cpl_queue_manager_bresp;
+wire                       axil_tx_cpl_queue_manager_bvalid;
+wire                       axil_tx_cpl_queue_manager_bready;
+wire [AXIL_ADDR_WIDTH-1:0] axil_tx_cpl_queue_manager_araddr;
+wire [2:0]                 axil_tx_cpl_queue_manager_arprot;
+wire                       axil_tx_cpl_queue_manager_arvalid;
+wire                       axil_tx_cpl_queue_manager_arready;
+wire [AXIL_DATA_WIDTH-1:0] axil_tx_cpl_queue_manager_rdata;
+wire [1:0]                 axil_tx_cpl_queue_manager_rresp;
+wire                       axil_tx_cpl_queue_manager_rvalid;
+wire                       axil_tx_cpl_queue_manager_rready;
+
+wire [AXIL_ADDR_WIDTH-1:0] axil_rx_queue_manager_awaddr;
+wire [2:0]                 axil_rx_queue_manager_awprot;
+wire                       axil_rx_queue_manager_awvalid;
+wire                       axil_rx_queue_manager_awready;
+wire [AXIL_DATA_WIDTH-1:0] axil_rx_queue_manager_wdata;
+wire [AXIL_STRB_WIDTH-1:0] axil_rx_queue_manager_wstrb;
+wire                       axil_rx_queue_manager_wvalid;
+wire                       axil_rx_queue_manager_wready;
+wire [1:0]                 axil_rx_queue_manager_bresp;
+wire                       axil_rx_queue_manager_bvalid;
+wire                       axil_rx_queue_manager_bready;
+wire [AXIL_ADDR_WIDTH-1:0] axil_rx_queue_manager_araddr;
+wire [2:0]                 axil_rx_queue_manager_arprot;
+wire                       axil_rx_queue_manager_arvalid;
+wire                       axil_rx_queue_manager_arready;
+wire [AXIL_DATA_WIDTH-1:0] axil_rx_queue_manager_rdata;
+wire [1:0]                 axil_rx_queue_manager_rresp;
+wire                       axil_rx_queue_manager_rvalid;
+wire                       axil_rx_queue_manager_rready;
+
+wire [AXIL_ADDR_WIDTH-1:0] axil_rx_cpl_queue_manager_awaddr;
+wire [2:0]                 axil_rx_cpl_queue_manager_awprot;
+wire                       axil_rx_cpl_queue_manager_awvalid;
+wire                       axil_rx_cpl_queue_manager_awready;
+wire [AXIL_DATA_WIDTH-1:0] axil_rx_cpl_queue_manager_wdata;
+wire [AXIL_STRB_WIDTH-1:0] axil_rx_cpl_queue_manager_wstrb;
+wire                       axil_rx_cpl_queue_manager_wvalid;
+wire                       axil_rx_cpl_queue_manager_wready;
+wire [1:0]                 axil_rx_cpl_queue_manager_bresp;
+wire                       axil_rx_cpl_queue_manager_bvalid;
+wire                       axil_rx_cpl_queue_manager_bready;
+wire [AXIL_ADDR_WIDTH-1:0] axil_rx_cpl_queue_manager_araddr;
+wire [2:0]                 axil_rx_cpl_queue_manager_arprot;
+wire                       axil_rx_cpl_queue_manager_arvalid;
+wire                       axil_rx_cpl_queue_manager_arready;
+wire [AXIL_DATA_WIDTH-1:0] axil_rx_cpl_queue_manager_rdata;
+wire [1:0]                 axil_rx_cpl_queue_manager_rresp;
+wire                       axil_rx_cpl_queue_manager_rvalid;
+wire                       axil_rx_cpl_queue_manager_rready;
+
+wire [PORTS*AXIL_ADDR_WIDTH-1:0] axil_port_awaddr;
+wire [PORTS*3-1:0]               axil_port_awprot;
+wire [PORTS-1:0]                 axil_port_awvalid;
+wire [PORTS-1:0]                 axil_port_awready;
+wire [PORTS*AXIL_DATA_WIDTH-1:0] axil_port_wdata;
+wire [PORTS*AXIL_STRB_WIDTH-1:0] axil_port_wstrb;
+wire [PORTS-1:0]                 axil_port_wvalid;
+wire [PORTS-1:0]                 axil_port_wready;
+wire [PORTS*2-1:0]               axil_port_bresp;
+wire [PORTS-1:0]                 axil_port_bvalid;
+wire [PORTS-1:0]                 axil_port_bready;
+wire [PORTS*AXIL_ADDR_WIDTH-1:0] axil_port_araddr;
+wire [PORTS*3-1:0]               axil_port_arprot;
+wire [PORTS-1:0]                 axil_port_arvalid;
+wire [PORTS-1:0]                 axil_port_arready;
+wire [PORTS*AXIL_DATA_WIDTH-1:0] axil_port_rdata;
+wire [PORTS*2-1:0]               axil_port_rresp;
+wire [PORTS-1:0]                 axil_port_rvalid;
+wire [PORTS-1:0]                 axil_port_rready;
+
+// DMA
+wire [PORTS*DMA_ADDR_WIDTH-1:0]    port_dma_read_desc_dma_addr;
+wire [PORTS*RAM_ADDR_WIDTH-1:0]    port_dma_read_desc_ram_addr;
+wire [PORTS*DMA_LEN_WIDTH-1:0]     port_dma_read_desc_len;
+wire [PORTS*DMA_TAG_WIDTH_INT-1:0] port_dma_read_desc_tag;
+wire [PORTS-1:0]                   port_dma_read_desc_valid;
+wire [PORTS-1:0]                   port_dma_read_desc_ready;
+
+wire [PORTS*DMA_TAG_WIDTH_INT-1:0] port_dma_read_desc_status_tag;
+wire [PORTS-1:0]                   port_dma_read_desc_status_valid;
+
+wire [PORTS*DMA_ADDR_WIDTH-1:0]    port_dma_write_desc_dma_addr;
+wire [PORTS*RAM_ADDR_WIDTH-1:0]    port_dma_write_desc_ram_addr;
+wire [PORTS*DMA_LEN_WIDTH-1:0]     port_dma_write_desc_len;
+wire [PORTS*DMA_TAG_WIDTH_INT-1:0] port_dma_write_desc_tag;
+wire [PORTS-1:0]                   port_dma_write_desc_valid;
+wire [PORTS-1:0]                   port_dma_write_desc_ready;
+
+wire [PORTS*DMA_TAG_WIDTH_INT-1:0] port_dma_write_desc_status_tag;
+wire [PORTS-1:0]                   port_dma_write_desc_status_valid;
+
+wire [PORTS*SEG_COUNT*SEG_BE_WIDTH-1:0]    port_dma_ram_wr_cmd_be;
+wire [PORTS*SEG_COUNT*SEG_ADDR_WIDTH-1:0]  port_dma_ram_wr_cmd_addr;
+wire [PORTS*SEG_COUNT*SEG_DATA_WIDTH-1:0]  port_dma_ram_wr_cmd_data;
+wire [PORTS*SEG_COUNT-1:0]                 port_dma_ram_wr_cmd_valid;
+wire [PORTS*SEG_COUNT-1:0]                 port_dma_ram_wr_cmd_ready;
+wire [PORTS*SEG_COUNT*SEG_ADDR_WIDTH-1:0]  port_dma_ram_rd_cmd_addr;
+wire [PORTS*SEG_COUNT-1:0]                 port_dma_ram_rd_cmd_valid;
+wire [PORTS*SEG_COUNT-1:0]                 port_dma_ram_rd_cmd_ready;
+wire [PORTS*SEG_COUNT*SEG_DATA_WIDTH-1:0]  port_dma_ram_rd_resp_data;
+wire [PORTS*SEG_COUNT-1:0]                 port_dma_ram_rd_resp_valid;
+wire [PORTS*SEG_COUNT-1:0]                 port_dma_ram_rd_resp_ready;
+
+// Queue management
+wire [CPL_QUEUE_INDEX_WIDTH-1:0]    event_enqueue_req_queue;
+wire [QUEUE_REQ_TAG_WIDTH-1:0]      event_enqueue_req_tag;
+wire                                event_enqueue_req_valid;
+wire                                event_enqueue_req_ready;
+
+wire [DMA_ADDR_WIDTH-1:0]           event_enqueue_resp_addr;
+wire [QUEUE_REQ_TAG_WIDTH-1:0]      event_enqueue_resp_tag;
+wire [QUEUE_OP_TAG_WIDTH-1:0]       event_enqueue_resp_op_tag;
+wire                                event_enqueue_resp_full;
+wire                                event_enqueue_resp_error;
+wire                                event_enqueue_resp_valid;
+wire                                event_enqueue_resp_ready;
+
+wire [QUEUE_OP_TAG_WIDTH-1:0]       event_enqueue_commit_op_tag;
+wire                                event_enqueue_commit_valid;
+wire                                event_enqueue_commit_ready;
+
+wire [QUEUE_INDEX_WIDTH-1:0]        tx_desc_dequeue_req_queue;
+wire [QUEUE_REQ_TAG_WIDTH-1:0]      tx_desc_dequeue_req_tag;
+wire                                tx_desc_dequeue_req_valid;
+wire                                tx_desc_dequeue_req_ready;
+
+wire [QUEUE_INDEX_WIDTH-1:0]        tx_desc_dequeue_resp_queue;
+wire [QUEUE_PTR_WIDTH-1:0]          tx_desc_dequeue_resp_ptr;
+wire [DMA_ADDR_WIDTH-1:0]           tx_desc_dequeue_resp_addr;
+wire [LOG_BLOCK_SIZE_WIDTH-1:0]     tx_desc_dequeue_resp_block_size;
+wire [CPL_QUEUE_INDEX_WIDTH-1:0]    tx_desc_dequeue_resp_cpl;
+wire [QUEUE_REQ_TAG_WIDTH-1:0]      tx_desc_dequeue_resp_tag;
+wire [QUEUE_OP_TAG_WIDTH-1:0]       tx_desc_dequeue_resp_op_tag;
+wire                                tx_desc_dequeue_resp_empty;
+wire                                tx_desc_dequeue_resp_error;
+wire                                tx_desc_dequeue_resp_valid;
+wire                                tx_desc_dequeue_resp_ready;
+
+wire [QUEUE_OP_TAG_WIDTH-1:0]       tx_desc_dequeue_commit_op_tag;
+wire                                tx_desc_dequeue_commit_valid;
+wire                                tx_desc_dequeue_commit_ready;
+
+wire [TX_QUEUE_INDEX_WIDTH-1:0]     tx_doorbell_queue;
+wire                                tx_doorbell_valid;
+
+wire [CPL_QUEUE_INDEX_WIDTH-1:0]    tx_cpl_enqueue_req_queue;
+wire [QUEUE_REQ_TAG_WIDTH-1:0]      tx_cpl_enqueue_req_tag;
+wire                                tx_cpl_enqueue_req_valid;
+wire                                tx_cpl_enqueue_req_ready;
+
+wire [DMA_ADDR_WIDTH-1:0]           tx_cpl_enqueue_resp_addr;
+wire [QUEUE_REQ_TAG_WIDTH-1:0]      tx_cpl_enqueue_resp_tag;
+wire [QUEUE_OP_TAG_WIDTH-1:0]       tx_cpl_enqueue_resp_op_tag;
+wire                                tx_cpl_enqueue_resp_full;
+wire                                tx_cpl_enqueue_resp_error;
+wire                                tx_cpl_enqueue_resp_valid;
+wire                                tx_cpl_enqueue_resp_ready;
+
+wire [QUEUE_OP_TAG_WIDTH-1:0]       tx_cpl_enqueue_commit_op_tag;
+wire                                tx_cpl_enqueue_commit_valid;
+wire                                tx_cpl_enqueue_commit_ready;
+
+wire [QUEUE_INDEX_WIDTH-1:0]        rx_desc_dequeue_req_queue;
+wire [QUEUE_REQ_TAG_WIDTH-1:0]      rx_desc_dequeue_req_tag;
+wire                                rx_desc_dequeue_req_valid;
+wire                                rx_desc_dequeue_req_ready;
+
+wire [QUEUE_INDEX_WIDTH-1:0]        rx_desc_dequeue_resp_queue;
+wire [QUEUE_PTR_WIDTH-1:0]          rx_desc_dequeue_resp_ptr;
+wire [DMA_ADDR_WIDTH-1:0]           rx_desc_dequeue_resp_addr;
+wire [LOG_BLOCK_SIZE_WIDTH-1:0]     rx_desc_dequeue_resp_block_size;
+wire [CPL_QUEUE_INDEX_WIDTH-1:0]    rx_desc_dequeue_resp_cpl;
+wire [QUEUE_REQ_TAG_WIDTH-1:0]      rx_desc_dequeue_resp_tag;
+wire [QUEUE_OP_TAG_WIDTH-1:0]       rx_desc_dequeue_resp_op_tag;
+wire                                rx_desc_dequeue_resp_empty;
+wire                                rx_desc_dequeue_resp_error;
+wire                                rx_desc_dequeue_resp_valid;
+wire                                rx_desc_dequeue_resp_ready;
+
+wire [QUEUE_OP_TAG_WIDTH-1:0]       rx_desc_dequeue_commit_op_tag;
+wire                                rx_desc_dequeue_commit_valid;
+wire                                rx_desc_dequeue_commit_ready;
+
+wire [CPL_QUEUE_INDEX_WIDTH-1:0]    rx_cpl_enqueue_req_queue;
+wire [QUEUE_REQ_TAG_WIDTH-1:0]      rx_cpl_enqueue_req_tag;
+wire                                rx_cpl_enqueue_req_valid;
+wire                                rx_cpl_enqueue_req_ready;
+
+wire [DMA_ADDR_WIDTH-1:0]           rx_cpl_enqueue_resp_addr;
+wire [QUEUE_REQ_TAG_WIDTH-1:0]      rx_cpl_enqueue_resp_tag;
+wire [QUEUE_OP_TAG_WIDTH-1:0]       rx_cpl_enqueue_resp_op_tag;
+wire                                rx_cpl_enqueue_resp_full;
+wire                                rx_cpl_enqueue_resp_error;
+wire                                rx_cpl_enqueue_resp_valid;
+wire                                rx_cpl_enqueue_resp_ready;
+
+wire [QUEUE_OP_TAG_WIDTH-1:0]       rx_cpl_enqueue_commit_op_tag;
+wire                                rx_cpl_enqueue_commit_valid;
+wire                                rx_cpl_enqueue_commit_ready;
+
+// descriptor and completion
+wire [0:0]                               desc_req_sel;
+wire [QUEUE_INDEX_WIDTH-1:0]             desc_req_queue;
+wire [DESC_REQ_TAG_WIDTH-1:0]            desc_req_tag;
+wire                                     desc_req_valid;
+wire                                     desc_req_ready;
+
+wire [QUEUE_INDEX_WIDTH-1:0]             desc_req_status_queue;
+wire [QUEUE_PTR_WIDTH-1:0]               desc_req_status_ptr;
+wire [CPL_QUEUE_INDEX_WIDTH-1:0]         desc_req_status_cpl;
+wire [DESC_REQ_TAG_WIDTH-1:0]            desc_req_status_tag;
+wire                                     desc_req_status_empty;
+wire                                     desc_req_status_error;
+wire                                     desc_req_status_valid;
+
+wire [AXIS_DESC_DATA_WIDTH-1:0]          axis_desc_tdata;
+wire [AXIS_DESC_KEEP_WIDTH-1:0]          axis_desc_tkeep;
+wire                                     axis_desc_tvalid;
+wire                                     axis_desc_tready;
+wire                                     axis_desc_tlast;
+wire [DESC_REQ_TAG_WIDTH-1:0]            axis_desc_tid;
+wire                                     axis_desc_tuser;
+
+wire [PORTS*1-1:0]                       port_desc_req_sel;
+wire [PORTS*QUEUE_INDEX_WIDTH-1:0]       port_desc_req_queue;
+wire [PORTS*PORT_DESC_REQ_TAG_WIDTH-1:0] port_desc_req_tag;
+wire [PORTS-1:0]                         port_desc_req_valid;
+wire [PORTS-1:0]                         port_desc_req_ready;
+
+wire [PORTS*QUEUE_INDEX_WIDTH-1:0]       port_desc_req_status_queue;
+wire [PORTS*QUEUE_PTR_WIDTH-1:0]         port_desc_req_status_ptr;
+wire [PORTS*CPL_QUEUE_INDEX_WIDTH-1:0]   port_desc_req_status_cpl;
+wire [PORTS*PORT_DESC_REQ_TAG_WIDTH-1:0] port_desc_req_status_tag;
+wire [PORTS-1:0]                         port_desc_req_status_empty;
+wire [PORTS-1:0]                         port_desc_req_status_error;
+wire [PORTS-1:0]                         port_desc_req_status_valid;
+
+wire [PORTS*AXIS_DESC_DATA_WIDTH-1:0]    port_axis_desc_tdata;
+wire [PORTS*AXIS_DESC_KEEP_WIDTH-1:0]    port_axis_desc_tkeep;
+wire [PORTS-1:0]                         port_axis_desc_tvalid;
+wire [PORTS-1:0]                         port_axis_desc_tready;
+wire [PORTS-1:0]                         port_axis_desc_tlast;
+wire [PORTS*PORT_DESC_REQ_TAG_WIDTH-1:0] port_axis_desc_tid;
+wire [PORTS-1:0]                         port_axis_desc_tuser;
+
+wire [1:0]                               cpl_req_sel;
+wire [QUEUE_INDEX_WIDTH-1:0]             cpl_req_queue;
+wire [DESC_REQ_TAG_WIDTH-1:0]            cpl_req_tag;
+wire [CPL_SIZE*8-1:0]                    cpl_req_data;
+wire                                     cpl_req_valid;
+wire                                     cpl_req_ready;
+
+wire [DESC_REQ_TAG_WIDTH-1:0]            cpl_req_status_tag;
+wire                                     cpl_req_status_full;
+wire                                     cpl_req_status_error;
+wire                                     cpl_req_status_valid;
+
+wire [1:0]                               event_cpl_req_sel = 2'd2;
+wire [QUEUE_INDEX_WIDTH-1:0]             event_cpl_req_queue;
+wire [PORT_DESC_REQ_TAG_WIDTH-1:0]       event_cpl_req_tag;
+wire [CPL_SIZE*8-1:0]                    event_cpl_req_data;
+wire                                     event_cpl_req_valid;
+wire                                     event_cpl_req_ready;
+
+wire [PORT_DESC_REQ_TAG_WIDTH-1:0]       event_cpl_req_status_tag;
+wire                                     event_cpl_req_status_full;
+wire                                     event_cpl_req_status_error;
+wire                                     event_cpl_req_status_valid;
+
+wire [PORTS*2-1:0]                       port_cpl_req_sel;
+wire [PORTS*QUEUE_INDEX_WIDTH-1:0]       port_cpl_req_queue;
+wire [PORTS*PORT_DESC_REQ_TAG_WIDTH-1:0] port_cpl_req_tag;
+wire [PORTS*CPL_SIZE*8-1:0]              port_cpl_req_data;
+wire [PORTS-1:0]                         port_cpl_req_valid;
+wire [PORTS-1:0]                         port_cpl_req_ready;
+
+wire [PORTS*PORT_DESC_REQ_TAG_WIDTH-1:0] port_cpl_req_status_tag;
+wire [PORTS-1:0]                         port_cpl_req_status_full;
+wire [PORTS-1:0]                         port_cpl_req_status_error;
+wire [PORTS-1:0]                         port_cpl_req_status_valid;
+
+// events
+wire [EVENT_QUEUE_INDEX_WIDTH-1:0]  axis_event_queue;
+wire [EVENT_TYPE_WIDTH-1:0]         axis_event_type;
+wire [EVENT_SOURCE_WIDTH-1:0]       axis_event_source;
+wire                                axis_event_valid;
+wire                                axis_event_ready;
+
+wire [EVENT_QUEUE_INDEX_WIDTH-1:0]  tx_fifo_event;
+wire [EVENT_TYPE_WIDTH-1:0]         tx_fifo_event_type;
+wire [EVENT_SOURCE_WIDTH-1:0]       tx_fifo_event_source;
+wire                                tx_fifo_event_valid;
+wire                                tx_fifo_event_ready;
+
+wire [EVENT_QUEUE_INDEX_WIDTH-1:0]  rx_fifo_event;
+wire [EVENT_TYPE_WIDTH-1:0]         rx_fifo_event_type;
+wire [EVENT_SOURCE_WIDTH-1:0]       rx_fifo_event_source;
+wire                                rx_fifo_event_valid;
+wire                                rx_fifo_event_ready;
+
+wire [EVENT_QUEUE_INDEX_WIDTH-1:0]  tx_event;
+wire [EVENT_TYPE_WIDTH-1:0]         tx_event_type = 16'd0;
+wire [EVENT_SOURCE_WIDTH-1:0]       tx_event_source;
+wire                                tx_event_valid;
+
+wire [EVENT_QUEUE_INDEX_WIDTH-1:0]  rx_event;
+wire [EVENT_TYPE_WIDTH-1:0]         rx_event_type = 16'd1;
+wire [EVENT_SOURCE_WIDTH-1:0]       rx_event_source;
+wire                                rx_event_valid;
+
+// interrupts
+wire [INT_WIDTH-1:0] event_int;
+wire event_int_valid;
+
+assign msi_irq = (event_int_valid << event_int);
+
+// Interface control registers
+reg axil_ctrl_awready_reg = 1'b0;
+reg axil_ctrl_wready_reg = 1'b0;
+reg [1:0] axil_ctrl_bresp_reg = 2'b00;
+reg axil_ctrl_bvalid_reg = 1'b0;
+reg axil_ctrl_arready_reg = 1'b0;
+reg [AXIL_DATA_WIDTH-1:0] axil_ctrl_rdata_reg = {AXIL_DATA_WIDTH{1'b0}};
+reg [1:0] axil_ctrl_rresp_reg = 2'b00;
+reg axil_ctrl_rvalid_reg = 1'b0;
+
+assign axil_ctrl_awready = axil_ctrl_awready_reg;
+assign axil_ctrl_wready = axil_ctrl_wready_reg;
+assign axil_ctrl_bresp = axil_ctrl_bresp_reg;
+assign axil_ctrl_bvalid = axil_ctrl_bvalid_reg;
+assign axil_ctrl_arready = axil_ctrl_arready_reg;
+assign axil_ctrl_rdata = axil_ctrl_rdata_reg;
+assign axil_ctrl_rresp = axil_ctrl_rresp_reg;
+assign axil_ctrl_rvalid = axil_ctrl_rvalid_reg;
+
+always @(posedge clk) begin
+    axil_ctrl_awready_reg <= 1'b0;
+    axil_ctrl_wready_reg <= 1'b0;
+    axil_ctrl_bresp_reg <= 2'b00;
+    axil_ctrl_bvalid_reg <= axil_ctrl_bvalid_reg && !axil_ctrl_bready;
+    axil_ctrl_arready_reg <= 1'b0;
+    axil_ctrl_rresp_reg <= 2'b00;
+    axil_ctrl_rvalid_reg <= axil_ctrl_rvalid_reg && !axil_ctrl_rready;
+
+    if (axil_ctrl_awvalid && axil_ctrl_wvalid && !axil_ctrl_bvalid) begin
+        // write operation
+        axil_ctrl_awready_reg <= 1'b1;
+        axil_ctrl_wready_reg <= 1'b1;
+        axil_ctrl_bresp_reg <= 2'b00;
+        axil_ctrl_bvalid_reg <= 1'b1;
+
+        // case ({axil_ctrl_awaddr[15:2], 2'b00})
+        //     16'h0000: 
+        // endcase
+    end
+
+    if (axil_ctrl_arvalid && !axil_ctrl_rvalid) begin
+        // read operation
+        axil_ctrl_arready_reg <= 1'b1;
+        axil_ctrl_rresp_reg <= 2'b00;
+        axil_ctrl_rvalid_reg <= 1'b1;
+        axil_ctrl_rdata_reg <= {AXIL_DATA_WIDTH{1'b0}};
+
+        case ({axil_ctrl_araddr[15:2], 2'b00})
+            16'h0000: axil_ctrl_rdata_reg <= 32'd0;                       // if_id
+            16'h0004: begin
+                // if_features
+                axil_ctrl_rdata_reg[0] <= RX_RSS_ENABLE && RX_HASH_ENABLE;
+                axil_ctrl_rdata_reg[4] <= PTP_TS_ENABLE;
+                axil_ctrl_rdata_reg[8] <= TX_CHECKSUM_ENABLE;
+                axil_ctrl_rdata_reg[9] <= RX_CHECKSUM_ENABLE;
+                axil_ctrl_rdata_reg[10] <= RX_HASH_ENABLE;
+            end
+            16'h0010: axil_ctrl_rdata_reg <= 2**EVENT_QUEUE_INDEX_WIDTH;  // event_queue_count
+            16'h0014: axil_ctrl_rdata_reg <= AXIL_EQM_BASE_ADDR;          // event_queue_offset
+            16'h0020: axil_ctrl_rdata_reg <= 2**TX_QUEUE_INDEX_WIDTH;     // tx_queue_count
+            16'h0024: axil_ctrl_rdata_reg <= AXIL_TX_QM_BASE_ADDR;        // tx_queue_offset
+            16'h0028: axil_ctrl_rdata_reg <= 2**TX_CPL_QUEUE_INDEX_WIDTH; // tx_cpl_queue_count
+            16'h002C: axil_ctrl_rdata_reg <= AXIL_TX_CQM_BASE_ADDR;       // tx_cpl_queue_offset
+            16'h0030: axil_ctrl_rdata_reg <= 2**RX_QUEUE_INDEX_WIDTH;     // rx_queue_count
+            16'h0034: axil_ctrl_rdata_reg <= AXIL_RX_QM_BASE_ADDR;        // rx_queue_offset
+            16'h0038: axil_ctrl_rdata_reg <= 2**RX_CPL_QUEUE_INDEX_WIDTH; // rx_cpl_queue_count
+            16'h003C: axil_ctrl_rdata_reg <= AXIL_RX_CQM_BASE_ADDR;       // rx_cpl_queue_offset
+            16'h0040: axil_ctrl_rdata_reg <= PORTS;                       // port_count
+            16'h0044: axil_ctrl_rdata_reg <= AXIL_PORT_BASE_ADDR;         // port_offset
+            16'h0048: axil_ctrl_rdata_reg <= 2**AXIL_PORT_ADDR_WIDTH;     // port_stride
+        endcase
+    end
+
+    if (rst) begin
+        axil_ctrl_awready_reg <= 1'b0;
+        axil_ctrl_wready_reg <= 1'b0;
+        axil_ctrl_bvalid_reg <= 1'b0;
+        axil_ctrl_arready_reg <= 1'b0;
+        axil_ctrl_rvalid_reg <= 1'b0;
+    end
+end
+
+// AXI lite interconnect
+parameter AXIL_S_COUNT = 1;
+parameter AXIL_M_COUNT = 7+PORTS;
+
+axil_interconnect #(
+    .DATA_WIDTH(AXIL_DATA_WIDTH),
+    .ADDR_WIDTH(AXIL_ADDR_WIDTH),
+    .STRB_WIDTH(AXIL_STRB_WIDTH),
+    .S_COUNT(AXIL_S_COUNT),
+    .M_COUNT(AXIL_M_COUNT),
+    .M_ADDR_WIDTH({{PORTS{w_32(AXIL_PORT_ADDR_WIDTH)}}, w_32(AXIL_RX_CQM_ADDR_WIDTH), w_32(AXIL_RX_QM_ADDR_WIDTH), w_32(AXIL_TX_CQM_ADDR_WIDTH), w_32(AXIL_TX_QM_ADDR_WIDTH), w_32(AXIL_EQM_ADDR_WIDTH), w_32(AXIL_CTRL_ADDR_WIDTH), w_32(AXIL_CSR_ADDR_WIDTH)}),
+    .M_CONNECT_READ({AXIL_M_COUNT{{AXIL_S_COUNT{1'b1}}}}),
+    .M_CONNECT_WRITE({AXIL_M_COUNT{{AXIL_S_COUNT{1'b1}}}})
+)
+axil_interconnect_inst (
+    .clk(clk),
+    .rst(rst),
+    .s_axil_awaddr(s_axil_awaddr),
+    .s_axil_awprot(s_axil_awprot),
+    .s_axil_awvalid(s_axil_awvalid),
+    .s_axil_awready(s_axil_awready),
+    .s_axil_wdata(s_axil_wdata),
+    .s_axil_wstrb(s_axil_wstrb),
+    .s_axil_wvalid(s_axil_wvalid),
+    .s_axil_wready(s_axil_wready),
+    .s_axil_bresp(s_axil_bresp),
+    .s_axil_bvalid(s_axil_bvalid),
+    .s_axil_bready(s_axil_bready),
+    .s_axil_araddr(s_axil_araddr),
+    .s_axil_arprot(s_axil_arprot),
+    .s_axil_arvalid(s_axil_arvalid),
+    .s_axil_arready(s_axil_arready),
+    .s_axil_rdata(s_axil_rdata),
+    .s_axil_rresp(s_axil_rresp),
+    .s_axil_rvalid(s_axil_rvalid),
+    .s_axil_rready(s_axil_rready),
+    .m_axil_awaddr( {axil_port_awaddr,  axil_rx_cpl_queue_manager_awaddr,  axil_rx_queue_manager_awaddr,  axil_tx_cpl_queue_manager_awaddr,  axil_tx_queue_manager_awaddr,  axil_event_queue_manager_awaddr,  axil_ctrl_awaddr,  m_axil_csr_awaddr}),
+    .m_axil_awprot( {axil_port_awprot,  axil_rx_cpl_queue_manager_awprot,  axil_rx_queue_manager_awprot,  axil_tx_cpl_queue_manager_awprot,  axil_tx_queue_manager_awprot,  axil_event_queue_manager_awprot,  axil_ctrl_awprot,  m_axil_csr_awprot}),
+    .m_axil_awvalid({axil_port_awvalid, axil_rx_cpl_queue_manager_awvalid, axil_rx_queue_manager_awvalid, axil_tx_cpl_queue_manager_awvalid, axil_tx_queue_manager_awvalid, axil_event_queue_manager_awvalid, axil_ctrl_awvalid, m_axil_csr_awvalid}),
+    .m_axil_awready({axil_port_awready, axil_rx_cpl_queue_manager_awready, axil_rx_queue_manager_awready, axil_tx_cpl_queue_manager_awready, axil_tx_queue_manager_awready, axil_event_queue_manager_awready, axil_ctrl_awready, m_axil_csr_awready}),
+    .m_axil_wdata(  {axil_port_wdata,   axil_rx_cpl_queue_manager_wdata,   axil_rx_queue_manager_wdata,   axil_tx_cpl_queue_manager_wdata,   axil_tx_queue_manager_wdata,   axil_event_queue_manager_wdata,   axil_ctrl_wdata,   m_axil_csr_wdata}),
+    .m_axil_wstrb(  {axil_port_wstrb,   axil_rx_cpl_queue_manager_wstrb,   axil_rx_queue_manager_wstrb,   axil_tx_cpl_queue_manager_wstrb,   axil_tx_queue_manager_wstrb,   axil_event_queue_manager_wstrb,   axil_ctrl_wstrb,   m_axil_csr_wstrb}),
+    .m_axil_wvalid( {axil_port_wvalid,  axil_rx_cpl_queue_manager_wvalid,  axil_rx_queue_manager_wvalid,  axil_tx_cpl_queue_manager_wvalid,  axil_tx_queue_manager_wvalid,  axil_event_queue_manager_wvalid,  axil_ctrl_wvalid,  m_axil_csr_wvalid}),
+    .m_axil_wready( {axil_port_wready,  axil_rx_cpl_queue_manager_wready,  axil_rx_queue_manager_wready,  axil_tx_cpl_queue_manager_wready,  axil_tx_queue_manager_wready,  axil_event_queue_manager_wready,  axil_ctrl_wready,  m_axil_csr_wready}),
+    .m_axil_bresp(  {axil_port_bresp,   axil_rx_cpl_queue_manager_bresp,   axil_rx_queue_manager_bresp,   axil_tx_cpl_queue_manager_bresp,   axil_tx_queue_manager_bresp,   axil_event_queue_manager_bresp,   axil_ctrl_bresp,   m_axil_csr_bresp}),
+    .m_axil_bvalid( {axil_port_bvalid,  axil_rx_cpl_queue_manager_bvalid,  axil_rx_queue_manager_bvalid,  axil_tx_cpl_queue_manager_bvalid,  axil_tx_queue_manager_bvalid,  axil_event_queue_manager_bvalid,  axil_ctrl_bvalid,  m_axil_csr_bvalid}),
+    .m_axil_bready( {axil_port_bready,  axil_rx_cpl_queue_manager_bready,  axil_rx_queue_manager_bready,  axil_tx_cpl_queue_manager_bready,  axil_tx_queue_manager_bready,  axil_event_queue_manager_bready,  axil_ctrl_bready,  m_axil_csr_bready}),
+    .m_axil_araddr( {axil_port_araddr,  axil_rx_cpl_queue_manager_araddr,  axil_rx_queue_manager_araddr,  axil_tx_cpl_queue_manager_araddr,  axil_tx_queue_manager_araddr,  axil_event_queue_manager_araddr,  axil_ctrl_araddr,  m_axil_csr_araddr}),
+    .m_axil_arprot( {axil_port_arprot,  axil_rx_cpl_queue_manager_arprot,  axil_rx_queue_manager_arprot,  axil_tx_cpl_queue_manager_arprot,  axil_tx_queue_manager_arprot,  axil_event_queue_manager_arprot,  axil_ctrl_arprot,  m_axil_csr_arprot}),
+    .m_axil_arvalid({axil_port_arvalid, axil_rx_cpl_queue_manager_arvalid, axil_rx_queue_manager_arvalid, axil_tx_cpl_queue_manager_arvalid, axil_tx_queue_manager_arvalid, axil_event_queue_manager_arvalid, axil_ctrl_arvalid, m_axil_csr_arvalid}),
+    .m_axil_arready({axil_port_arready, axil_rx_cpl_queue_manager_arready, axil_rx_queue_manager_arready, axil_tx_cpl_queue_manager_arready, axil_tx_queue_manager_arready, axil_event_queue_manager_arready, axil_ctrl_arready, m_axil_csr_arready}),
+    .m_axil_rdata(  {axil_port_rdata,   axil_rx_cpl_queue_manager_rdata,   axil_rx_queue_manager_rdata,   axil_tx_cpl_queue_manager_rdata,   axil_tx_queue_manager_rdata,   axil_event_queue_manager_rdata,   axil_ctrl_rdata,   m_axil_csr_rdata}),
+    .m_axil_rresp(  {axil_port_rresp,   axil_rx_cpl_queue_manager_rresp,   axil_rx_queue_manager_rresp,   axil_tx_cpl_queue_manager_rresp,   axil_tx_queue_manager_rresp,   axil_event_queue_manager_rresp,   axil_ctrl_rresp,   m_axil_csr_rresp}),
+    .m_axil_rvalid( {axil_port_rvalid,  axil_rx_cpl_queue_manager_rvalid,  axil_rx_queue_manager_rvalid,  axil_tx_cpl_queue_manager_rvalid,  axil_tx_queue_manager_rvalid,  axil_event_queue_manager_rvalid,  axil_ctrl_rvalid,  m_axil_csr_rvalid}),
+    .m_axil_rready( {axil_port_rready,  axil_rx_cpl_queue_manager_rready,  axil_rx_queue_manager_rready,  axil_tx_cpl_queue_manager_rready,  axil_tx_queue_manager_rready,  axil_event_queue_manager_rready,  axil_ctrl_rready,  m_axil_csr_rready})
+);
+
+// Queue managers
+
+cpl_queue_manager #(
+    .ADDR_WIDTH(DMA_ADDR_WIDTH),
+    .REQ_TAG_WIDTH(QUEUE_REQ_TAG_WIDTH),
+    .OP_TABLE_SIZE(EVENT_QUEUE_OP_TABLE_SIZE),
+    .OP_TAG_WIDTH(QUEUE_OP_TAG_WIDTH),
+    .QUEUE_INDEX_WIDTH(EVENT_QUEUE_INDEX_WIDTH),
+    .EVENT_WIDTH(INT_WIDTH),
+    .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+    .LOG_QUEUE_SIZE_WIDTH(LOG_QUEUE_SIZE_WIDTH),
+    .CPL_SIZE(EVENT_SIZE),
+    .PIPELINE(EVENT_QUEUE_PIPELINE),
+    .AXIL_DATA_WIDTH(AXIL_DATA_WIDTH),
+    .AXIL_ADDR_WIDTH(AXIL_EQM_ADDR_WIDTH),
+    .AXIL_STRB_WIDTH(AXIL_STRB_WIDTH)
+)
+event_queue_manager_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Enqueue request input
+     */
+    .s_axis_enqueue_req_queue(event_enqueue_req_queue),
+    .s_axis_enqueue_req_tag(event_enqueue_req_tag),
+    .s_axis_enqueue_req_valid(event_enqueue_req_valid),
+    .s_axis_enqueue_req_ready(event_enqueue_req_ready),
+
+    /*
+     * Enqueue response output
+     */
+    .m_axis_enqueue_resp_queue(),
+    .m_axis_enqueue_resp_ptr(),
+    .m_axis_enqueue_resp_addr(event_enqueue_resp_addr),
+    .m_axis_enqueue_resp_event(),
+    .m_axis_enqueue_resp_tag(event_enqueue_resp_tag),
+    .m_axis_enqueue_resp_op_tag(event_enqueue_resp_op_tag),
+    .m_axis_enqueue_resp_full(event_enqueue_resp_full),
+    .m_axis_enqueue_resp_error(event_enqueue_resp_error),
+    .m_axis_enqueue_resp_valid(event_enqueue_resp_valid),
+    .m_axis_enqueue_resp_ready(event_enqueue_resp_ready),
+
+    /*
+     * Enqueue commit input
+     */
+    .s_axis_enqueue_commit_op_tag(event_enqueue_commit_op_tag),
+    .s_axis_enqueue_commit_valid(event_enqueue_commit_valid),
+    .s_axis_enqueue_commit_ready(event_enqueue_commit_ready),
+
+    /*
+     * Event output
+     */
+    .m_axis_event(event_int),
+    .m_axis_event_source(),
+    .m_axis_event_valid(event_int_valid),
+
+    /*
+     * AXI-Lite slave interface
+     */
+    .s_axil_awaddr(axil_event_queue_manager_awaddr),
+    .s_axil_awprot(axil_event_queue_manager_awprot),
+    .s_axil_awvalid(axil_event_queue_manager_awvalid),
+    .s_axil_awready(axil_event_queue_manager_awready),
+    .s_axil_wdata(axil_event_queue_manager_wdata),
+    .s_axil_wstrb(axil_event_queue_manager_wstrb),
+    .s_axil_wvalid(axil_event_queue_manager_wvalid),
+    .s_axil_wready(axil_event_queue_manager_wready),
+    .s_axil_bresp(axil_event_queue_manager_bresp),
+    .s_axil_bvalid(axil_event_queue_manager_bvalid),
+    .s_axil_bready(axil_event_queue_manager_bready),
+    .s_axil_araddr(axil_event_queue_manager_araddr),
+    .s_axil_arprot(axil_event_queue_manager_arprot),
+    .s_axil_arvalid(axil_event_queue_manager_arvalid),
+    .s_axil_arready(axil_event_queue_manager_arready),
+    .s_axil_rdata(axil_event_queue_manager_rdata),
+    .s_axil_rresp(axil_event_queue_manager_rresp),
+    .s_axil_rvalid(axil_event_queue_manager_rvalid),
+    .s_axil_rready(axil_event_queue_manager_rready),
+
+    /*
+     * Configuration
+     */
+    .enable(1'b1)
+);
+
+queue_manager #(
+    .ADDR_WIDTH(DMA_ADDR_WIDTH),
+    .REQ_TAG_WIDTH(QUEUE_REQ_TAG_WIDTH),
+    .OP_TABLE_SIZE(TX_QUEUE_OP_TABLE_SIZE),
+    .OP_TAG_WIDTH(QUEUE_OP_TAG_WIDTH),
+    .QUEUE_INDEX_WIDTH(TX_QUEUE_INDEX_WIDTH),
+    .CPL_INDEX_WIDTH(TX_CPL_QUEUE_INDEX_WIDTH),
+    .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+    .LOG_QUEUE_SIZE_WIDTH(LOG_QUEUE_SIZE_WIDTH),
+    .DESC_SIZE(DESC_SIZE),
+    .LOG_BLOCK_SIZE_WIDTH(LOG_BLOCK_SIZE_WIDTH),
+    .PIPELINE(TX_QUEUE_PIPELINE),
+    .AXIL_DATA_WIDTH(AXIL_DATA_WIDTH),
+    .AXIL_ADDR_WIDTH(AXIL_TX_QM_ADDR_WIDTH),
+    .AXIL_STRB_WIDTH(AXIL_STRB_WIDTH)
+)
+tx_queue_manager_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Dequeue request input
+     */
+    .s_axis_dequeue_req_queue(tx_desc_dequeue_req_queue),
+    .s_axis_dequeue_req_tag(tx_desc_dequeue_req_tag),
+    .s_axis_dequeue_req_valid(tx_desc_dequeue_req_valid),
+    .s_axis_dequeue_req_ready(tx_desc_dequeue_req_ready),
+
+    /*
+     * Dequeue response output
+     */
+    .m_axis_dequeue_resp_queue(tx_desc_dequeue_resp_queue),
+    .m_axis_dequeue_resp_ptr(tx_desc_dequeue_resp_ptr),
+    .m_axis_dequeue_resp_addr(tx_desc_dequeue_resp_addr),
+    .m_axis_dequeue_resp_block_size(tx_desc_dequeue_resp_block_size),
+    .m_axis_dequeue_resp_cpl(tx_desc_dequeue_resp_cpl),
+    .m_axis_dequeue_resp_tag(tx_desc_dequeue_resp_tag),
+    .m_axis_dequeue_resp_op_tag(tx_desc_dequeue_resp_op_tag),
+    .m_axis_dequeue_resp_empty(tx_desc_dequeue_resp_empty),
+    .m_axis_dequeue_resp_error(tx_desc_dequeue_resp_error),
+    .m_axis_dequeue_resp_valid(tx_desc_dequeue_resp_valid),
+    .m_axis_dequeue_resp_ready(tx_desc_dequeue_resp_ready),
+
+    /*
+     * Dequeue commit input
+     */
+    .s_axis_dequeue_commit_op_tag(tx_desc_dequeue_commit_op_tag),
+    .s_axis_dequeue_commit_valid(tx_desc_dequeue_commit_valid),
+    .s_axis_dequeue_commit_ready(tx_desc_dequeue_commit_ready),
+
+    /*
+     * Doorbell output
+     */
+    .m_axis_doorbell_queue(tx_doorbell_queue),
+    .m_axis_doorbell_valid(tx_doorbell_valid),
+
+    /*
+     * AXI-Lite slave interface
+     */
+    .s_axil_awaddr(axil_tx_queue_manager_awaddr),
+    .s_axil_awprot(axil_tx_queue_manager_awprot),
+    .s_axil_awvalid(axil_tx_queue_manager_awvalid),
+    .s_axil_awready(axil_tx_queue_manager_awready),
+    .s_axil_wdata(axil_tx_queue_manager_wdata),
+    .s_axil_wstrb(axil_tx_queue_manager_wstrb),
+    .s_axil_wvalid(axil_tx_queue_manager_wvalid),
+    .s_axil_wready(axil_tx_queue_manager_wready),
+    .s_axil_bresp(axil_tx_queue_manager_bresp),
+    .s_axil_bvalid(axil_tx_queue_manager_bvalid),
+    .s_axil_bready(axil_tx_queue_manager_bready),
+    .s_axil_araddr(axil_tx_queue_manager_araddr),
+    .s_axil_arprot(axil_tx_queue_manager_arprot),
+    .s_axil_arvalid(axil_tx_queue_manager_arvalid),
+    .s_axil_arready(axil_tx_queue_manager_arready),
+    .s_axil_rdata(axil_tx_queue_manager_rdata),
+    .s_axil_rresp(axil_tx_queue_manager_rresp),
+    .s_axil_rvalid(axil_tx_queue_manager_rvalid),
+    .s_axil_rready(axil_tx_queue_manager_rready),
+
+    /*
+     * Configuration
+     */
+    .enable(1'b1)
+);
+
+cpl_queue_manager #(
+    .ADDR_WIDTH(DMA_ADDR_WIDTH),
+    .REQ_TAG_WIDTH(QUEUE_REQ_TAG_WIDTH),
+    .OP_TABLE_SIZE(TX_QUEUE_OP_TABLE_SIZE),
+    .OP_TAG_WIDTH(QUEUE_OP_TAG_WIDTH),
+    .QUEUE_INDEX_WIDTH(TX_CPL_QUEUE_INDEX_WIDTH),
+    .EVENT_WIDTH(EVENT_QUEUE_INDEX_WIDTH),
+    .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+    .LOG_QUEUE_SIZE_WIDTH(LOG_QUEUE_SIZE_WIDTH),
+    .CPL_SIZE(CPL_SIZE),
+    .PIPELINE(TX_CPL_QUEUE_PIPELINE),
+    .AXIL_DATA_WIDTH(AXIL_DATA_WIDTH),
+    .AXIL_ADDR_WIDTH(AXIL_TX_CQM_ADDR_WIDTH),
+    .AXIL_STRB_WIDTH(AXIL_STRB_WIDTH)
+)
+tx_cpl_queue_manager_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Enqueue request input
+     */
+    .s_axis_enqueue_req_queue(tx_cpl_enqueue_req_queue),
+    .s_axis_enqueue_req_tag(tx_cpl_enqueue_req_tag),
+    .s_axis_enqueue_req_valid(tx_cpl_enqueue_req_valid),
+    .s_axis_enqueue_req_ready(tx_cpl_enqueue_req_ready),
+
+    /*
+     * Enqueue response output
+     */
+    .m_axis_enqueue_resp_queue(),
+    .m_axis_enqueue_resp_ptr(),
+    .m_axis_enqueue_resp_addr(tx_cpl_enqueue_resp_addr),
+    .m_axis_enqueue_resp_event(),
+    .m_axis_enqueue_resp_tag(tx_cpl_enqueue_resp_tag),
+    .m_axis_enqueue_resp_op_tag(tx_cpl_enqueue_resp_op_tag),
+    .m_axis_enqueue_resp_full(tx_cpl_enqueue_resp_full),
+    .m_axis_enqueue_resp_error(tx_cpl_enqueue_resp_error),
+    .m_axis_enqueue_resp_valid(tx_cpl_enqueue_resp_valid),
+    .m_axis_enqueue_resp_ready(tx_cpl_enqueue_resp_ready),
+
+    /*
+     * Enqueue commit input
+     */
+    .s_axis_enqueue_commit_op_tag(tx_cpl_enqueue_commit_op_tag),
+    .s_axis_enqueue_commit_valid(tx_cpl_enqueue_commit_valid),
+    .s_axis_enqueue_commit_ready(tx_cpl_enqueue_commit_ready),
+
+    /*
+     * Event output
+     */
+    .m_axis_event(tx_event),
+    .m_axis_event_source(tx_event_source),
+    .m_axis_event_valid(tx_event_valid),
+
+    /*
+     * AXI-Lite slave interface
+     */
+    .s_axil_awaddr(axil_tx_cpl_queue_manager_awaddr),
+    .s_axil_awprot(axil_tx_cpl_queue_manager_awprot),
+    .s_axil_awvalid(axil_tx_cpl_queue_manager_awvalid),
+    .s_axil_awready(axil_tx_cpl_queue_manager_awready),
+    .s_axil_wdata(axil_tx_cpl_queue_manager_wdata),
+    .s_axil_wstrb(axil_tx_cpl_queue_manager_wstrb),
+    .s_axil_wvalid(axil_tx_cpl_queue_manager_wvalid),
+    .s_axil_wready(axil_tx_cpl_queue_manager_wready),
+    .s_axil_bresp(axil_tx_cpl_queue_manager_bresp),
+    .s_axil_bvalid(axil_tx_cpl_queue_manager_bvalid),
+    .s_axil_bready(axil_tx_cpl_queue_manager_bready),
+    .s_axil_araddr(axil_tx_cpl_queue_manager_araddr),
+    .s_axil_arprot(axil_tx_cpl_queue_manager_arprot),
+    .s_axil_arvalid(axil_tx_cpl_queue_manager_arvalid),
+    .s_axil_arready(axil_tx_cpl_queue_manager_arready),
+    .s_axil_rdata(axil_tx_cpl_queue_manager_rdata),
+    .s_axil_rresp(axil_tx_cpl_queue_manager_rresp),
+    .s_axil_rvalid(axil_tx_cpl_queue_manager_rvalid),
+    .s_axil_rready(axil_tx_cpl_queue_manager_rready),
+
+    /*
+     * Configuration
+     */
+    .enable(1'b1)
+);
+
+queue_manager #(
+    .ADDR_WIDTH(DMA_ADDR_WIDTH),
+    .REQ_TAG_WIDTH(QUEUE_REQ_TAG_WIDTH),
+    .OP_TABLE_SIZE(RX_QUEUE_OP_TABLE_SIZE),
+    .OP_TAG_WIDTH(QUEUE_OP_TAG_WIDTH),
+    .QUEUE_INDEX_WIDTH(RX_QUEUE_INDEX_WIDTH),
+    .CPL_INDEX_WIDTH(RX_CPL_QUEUE_INDEX_WIDTH),
+    .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+    .LOG_QUEUE_SIZE_WIDTH(LOG_QUEUE_SIZE_WIDTH),
+    .DESC_SIZE(DESC_SIZE),
+    .LOG_BLOCK_SIZE_WIDTH(LOG_BLOCK_SIZE_WIDTH),
+    .PIPELINE(RX_QUEUE_PIPELINE),
+    .AXIL_DATA_WIDTH(AXIL_DATA_WIDTH),
+    .AXIL_ADDR_WIDTH(AXIL_RX_QM_ADDR_WIDTH),
+    .AXIL_STRB_WIDTH(AXIL_STRB_WIDTH)
+)
+rx_queue_manager_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Dequeue request input
+     */
+    .s_axis_dequeue_req_queue(rx_desc_dequeue_req_queue),
+    .s_axis_dequeue_req_tag(rx_desc_dequeue_req_tag),
+    .s_axis_dequeue_req_valid(rx_desc_dequeue_req_valid),
+    .s_axis_dequeue_req_ready(rx_desc_dequeue_req_ready),
+
+    /*
+     * Dequeue response output
+     */
+    .m_axis_dequeue_resp_queue(rx_desc_dequeue_resp_queue),
+    .m_axis_dequeue_resp_ptr(rx_desc_dequeue_resp_ptr),
+    .m_axis_dequeue_resp_addr(rx_desc_dequeue_resp_addr),
+    .m_axis_dequeue_resp_block_size(rx_desc_dequeue_resp_block_size),
+    .m_axis_dequeue_resp_cpl(rx_desc_dequeue_resp_cpl),
+    .m_axis_dequeue_resp_tag(rx_desc_dequeue_resp_tag),
+    .m_axis_dequeue_resp_op_tag(rx_desc_dequeue_resp_op_tag),
+    .m_axis_dequeue_resp_empty(rx_desc_dequeue_resp_empty),
+    .m_axis_dequeue_resp_error(rx_desc_dequeue_resp_error),
+    .m_axis_dequeue_resp_valid(rx_desc_dequeue_resp_valid),
+    .m_axis_dequeue_resp_ready(rx_desc_dequeue_resp_ready),
+
+    /*
+     * Dequeue commit input
+     */
+    .s_axis_dequeue_commit_op_tag(rx_desc_dequeue_commit_op_tag),
+    .s_axis_dequeue_commit_valid(rx_desc_dequeue_commit_valid),
+    .s_axis_dequeue_commit_ready(rx_desc_dequeue_commit_ready),
+
+    /*
+     * Doorbell output
+     */
+    .m_axis_doorbell_queue(),
+    .m_axis_doorbell_valid(),
+
+    /*
+     * AXI-Lite slave interface
+     */
+    .s_axil_awaddr(axil_rx_queue_manager_awaddr),
+    .s_axil_awprot(axil_rx_queue_manager_awprot),
+    .s_axil_awvalid(axil_rx_queue_manager_awvalid),
+    .s_axil_awready(axil_rx_queue_manager_awready),
+    .s_axil_wdata(axil_rx_queue_manager_wdata),
+    .s_axil_wstrb(axil_rx_queue_manager_wstrb),
+    .s_axil_wvalid(axil_rx_queue_manager_wvalid),
+    .s_axil_wready(axil_rx_queue_manager_wready),
+    .s_axil_bresp(axil_rx_queue_manager_bresp),
+    .s_axil_bvalid(axil_rx_queue_manager_bvalid),
+    .s_axil_bready(axil_rx_queue_manager_bready),
+    .s_axil_araddr(axil_rx_queue_manager_araddr),
+    .s_axil_arprot(axil_rx_queue_manager_arprot),
+    .s_axil_arvalid(axil_rx_queue_manager_arvalid),
+    .s_axil_arready(axil_rx_queue_manager_arready),
+    .s_axil_rdata(axil_rx_queue_manager_rdata),
+    .s_axil_rresp(axil_rx_queue_manager_rresp),
+    .s_axil_rvalid(axil_rx_queue_manager_rvalid),
+    .s_axil_rready(axil_rx_queue_manager_rready),
+
+    /*
+     * Configuration
+     */
+    .enable(1'b1)
+);
+
+cpl_queue_manager #(
+    .ADDR_WIDTH(DMA_ADDR_WIDTH),
+    .REQ_TAG_WIDTH(QUEUE_REQ_TAG_WIDTH),
+    .OP_TABLE_SIZE(RX_QUEUE_OP_TABLE_SIZE),
+    .OP_TAG_WIDTH(QUEUE_OP_TAG_WIDTH),
+    .QUEUE_INDEX_WIDTH(RX_CPL_QUEUE_INDEX_WIDTH),
+    .EVENT_WIDTH(EVENT_QUEUE_INDEX_WIDTH),
+    .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+    .LOG_QUEUE_SIZE_WIDTH(LOG_QUEUE_SIZE_WIDTH),
+    .CPL_SIZE(CPL_SIZE),
+    .PIPELINE(RX_CPL_QUEUE_PIPELINE),
+    .AXIL_DATA_WIDTH(AXIL_DATA_WIDTH),
+    .AXIL_ADDR_WIDTH(AXIL_RX_CQM_ADDR_WIDTH),
+    .AXIL_STRB_WIDTH(AXIL_STRB_WIDTH)
+)
+rx_cpl_queue_manager_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Enqueue request input
+     */
+    .s_axis_enqueue_req_queue(rx_cpl_enqueue_req_queue),
+    .s_axis_enqueue_req_tag(rx_cpl_enqueue_req_tag),
+    .s_axis_enqueue_req_valid(rx_cpl_enqueue_req_valid),
+    .s_axis_enqueue_req_ready(rx_cpl_enqueue_req_ready),
+
+    /*
+     * Enqueue response output
+     */
+    .m_axis_enqueue_resp_queue(),
+    .m_axis_enqueue_resp_ptr(),
+    .m_axis_enqueue_resp_addr(rx_cpl_enqueue_resp_addr),
+    .m_axis_enqueue_resp_event(),
+    .m_axis_enqueue_resp_tag(rx_cpl_enqueue_resp_tag),
+    .m_axis_enqueue_resp_op_tag(rx_cpl_enqueue_resp_op_tag),
+    .m_axis_enqueue_resp_full(rx_cpl_enqueue_resp_full),
+    .m_axis_enqueue_resp_error(rx_cpl_enqueue_resp_error),
+    .m_axis_enqueue_resp_valid(rx_cpl_enqueue_resp_valid),
+    .m_axis_enqueue_resp_ready(rx_cpl_enqueue_resp_ready),
+
+    /*
+     * Enqueue commit input
+     */
+    .s_axis_enqueue_commit_op_tag(rx_cpl_enqueue_commit_op_tag),
+    .s_axis_enqueue_commit_valid(rx_cpl_enqueue_commit_valid),
+    .s_axis_enqueue_commit_ready(rx_cpl_enqueue_commit_ready),
+
+    /*
+     * Event output
+     */
+    .m_axis_event(rx_event),
+    .m_axis_event_source(rx_event_source),
+    .m_axis_event_valid(rx_event_valid),
+
+    /*
+     * AXI-Lite slave interface
+     */
+    .s_axil_awaddr(axil_rx_cpl_queue_manager_awaddr),
+    .s_axil_awprot(axil_rx_cpl_queue_manager_awprot),
+    .s_axil_awvalid(axil_rx_cpl_queue_manager_awvalid),
+    .s_axil_awready(axil_rx_cpl_queue_manager_awready),
+    .s_axil_wdata(axil_rx_cpl_queue_manager_wdata),
+    .s_axil_wstrb(axil_rx_cpl_queue_manager_wstrb),
+    .s_axil_wvalid(axil_rx_cpl_queue_manager_wvalid),
+    .s_axil_wready(axil_rx_cpl_queue_manager_wready),
+    .s_axil_bresp(axil_rx_cpl_queue_manager_bresp),
+    .s_axil_bvalid(axil_rx_cpl_queue_manager_bvalid),
+    .s_axil_bready(axil_rx_cpl_queue_manager_bready),
+    .s_axil_araddr(axil_rx_cpl_queue_manager_araddr),
+    .s_axil_arprot(axil_rx_cpl_queue_manager_arprot),
+    .s_axil_arvalid(axil_rx_cpl_queue_manager_arvalid),
+    .s_axil_arready(axil_rx_cpl_queue_manager_arready),
+    .s_axil_rdata(axil_rx_cpl_queue_manager_rdata),
+    .s_axil_rresp(axil_rx_cpl_queue_manager_rresp),
+    .s_axil_rvalid(axil_rx_cpl_queue_manager_rvalid),
+    .s_axil_rready(axil_rx_cpl_queue_manager_rready),
+
+    /*
+     * Configuration
+     */
+    .enable(1'b1)
+);
+
+if (PORTS > 1) begin
+
+    desc_op_mux #(
+        .PORTS(PORTS),
+        .SELECT_WIDTH(1),
+        .QUEUE_INDEX_WIDTH(QUEUE_INDEX_WIDTH),
+        .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+        .CPL_QUEUE_INDEX_WIDTH(CPL_QUEUE_INDEX_WIDTH),
+        .S_REQ_TAG_WIDTH(PORT_DESC_REQ_TAG_WIDTH),
+        .M_REQ_TAG_WIDTH(DESC_REQ_TAG_WIDTH),
+        .AXIS_DATA_WIDTH(AXIS_DESC_DATA_WIDTH),
+        .AXIS_KEEP_WIDTH(AXIS_DESC_KEEP_WIDTH),
+        .ARB_TYPE("ROUND_ROBIN"),
+        .LSB_PRIORITY("HIGH")
+    )
+    desc_op_mux_inst (
+        .clk(clk),
+        .rst(rst),
+
+        /*
+         * Descriptor request output
+         */
+        .m_axis_req_sel(desc_req_sel),
+        .m_axis_req_queue(desc_req_queue),
+        .m_axis_req_tag(desc_req_tag),
+        .m_axis_req_valid(desc_req_valid),
+        .m_axis_req_ready(desc_req_ready),
+
+        /*
+         * Descriptor request status input
+         */
+        .s_axis_req_status_queue(desc_req_status_queue),
+        .s_axis_req_status_ptr(desc_req_status_ptr),
+        .s_axis_req_status_cpl(desc_req_status_cpl),
+        .s_axis_req_status_tag(desc_req_status_tag),
+        .s_axis_req_status_empty(desc_req_status_empty),
+        .s_axis_req_status_error(desc_req_status_error),
+        .s_axis_req_status_valid(desc_req_status_valid),
+
+        /*
+         * Descriptor data input
+         */
+        .s_axis_desc_tdata(axis_desc_tdata),
+        .s_axis_desc_tkeep(axis_desc_tkeep),
+        .s_axis_desc_tvalid(axis_desc_tvalid),
+        .s_axis_desc_tready(axis_desc_tready),
+        .s_axis_desc_tlast(axis_desc_tlast),
+        .s_axis_desc_tid(axis_desc_tid),
+        .s_axis_desc_tuser(axis_desc_tuser),
+
+        /*
+         * Descriptor request input
+         */
+        .s_axis_req_sel(port_desc_req_sel),
+        .s_axis_req_queue(port_desc_req_queue),
+        .s_axis_req_tag(port_desc_req_tag),
+        .s_axis_req_valid(port_desc_req_valid),
+        .s_axis_req_ready(port_desc_req_ready),
+
+        /*
+         * Descriptor request status output
+         */
+        .m_axis_req_status_queue(port_desc_req_status_queue),
+        .m_axis_req_status_ptr(port_desc_req_status_ptr),
+        .m_axis_req_status_cpl(port_desc_req_status_cpl),
+        .m_axis_req_status_tag(port_desc_req_status_tag),
+        .m_axis_req_status_empty(port_desc_req_status_empty),
+        .m_axis_req_status_error(port_desc_req_status_error),
+        .m_axis_req_status_valid(port_desc_req_status_valid),
+
+        /*
+         * Descriptor data output
+         */
+        .m_axis_desc_tdata(port_axis_desc_tdata),
+        .m_axis_desc_tkeep(port_axis_desc_tkeep),
+        .m_axis_desc_tvalid(port_axis_desc_tvalid),
+        .m_axis_desc_tready(port_axis_desc_tready),
+        .m_axis_desc_tlast(port_axis_desc_tlast),
+        .m_axis_desc_tid(port_axis_desc_tid),
+        .m_axis_desc_tuser(port_axis_desc_tuser)
+    );
+
+end else begin
+
+    assign desc_req_sel = port_desc_req_sel;
+    assign desc_req_queue = port_desc_req_queue;
+    assign desc_req_tag = port_desc_req_tag;
+    assign desc_req_valid = port_desc_req_valid;
+    assign port_desc_req_ready = desc_req_ready;
+
+    assign port_desc_req_status_queue = desc_req_status_queue;
+    assign port_desc_req_status_ptr = desc_req_status_ptr;
+    assign port_desc_req_status_cpl = desc_req_status_cpl;
+    assign port_desc_req_status_tag = desc_req_status_tag;
+    assign port_desc_req_status_empty = desc_req_status_empty;
+    assign port_desc_req_status_error = desc_req_status_error;
+    assign port_desc_req_status_valid = desc_req_status_valid;
+
+    assign port_axis_desc_tdata = axis_desc_tdata;
+    assign port_axis_desc_tkeep = axis_desc_tkeep;
+    assign port_axis_desc_tvalid = axis_desc_tvalid;
+    assign axis_desc_tready = port_axis_desc_tready;
+    assign port_axis_desc_tlast = axis_desc_tlast;
+    assign port_axis_desc_tid = axis_desc_tid;
+    assign port_axis_desc_tuser = axis_desc_tuser;
+
+end
+
+desc_fetch #(
+    .PORTS(2),
+    .SELECT_WIDTH(1),
+    .SEG_COUNT(SEG_COUNT),
+    .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+    .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+    .SEG_BE_WIDTH(SEG_BE_WIDTH),
+    .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+    .RAM_PIPELINE(RAM_PIPELINE),
+    .AXIS_DATA_WIDTH(AXIS_DESC_DATA_WIDTH),
+    .AXIS_KEEP_WIDTH(AXIS_DESC_KEEP_WIDTH),
+    .DMA_ADDR_WIDTH(DMA_ADDR_WIDTH),
+    .DMA_LEN_WIDTH(DMA_LEN_WIDTH),
+    .DMA_TAG_WIDTH(DMA_TAG_WIDTH),
+    .REQ_TAG_WIDTH(DESC_REQ_TAG_WIDTH),
+    .QUEUE_REQ_TAG_WIDTH(QUEUE_REQ_TAG_WIDTH),
+    .QUEUE_OP_TAG_WIDTH(QUEUE_OP_TAG_WIDTH),
+    .QUEUE_INDEX_WIDTH(QUEUE_INDEX_WIDTH),
+    .CPL_QUEUE_INDEX_WIDTH(CPL_QUEUE_INDEX_WIDTH),
+    .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+    .DESC_SIZE(DESC_SIZE),
+    .LOG_BLOCK_SIZE_WIDTH(LOG_BLOCK_SIZE_WIDTH),
+    .DESC_TABLE_SIZE(32)
+)
+desc_fetch_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Descriptor read request input
+     */
+    .s_axis_req_sel(desc_req_sel),
+    .s_axis_req_queue(desc_req_queue),
+    .s_axis_req_tag(desc_req_tag),
+    .s_axis_req_valid(desc_req_valid),
+    .s_axis_req_ready(desc_req_ready),
+
+    /*
+     * Descriptor read request status output
+     */
+    .m_axis_req_status_queue(desc_req_status_queue),
+    .m_axis_req_status_ptr(desc_req_status_ptr),
+    .m_axis_req_status_cpl(desc_req_status_cpl),
+    .m_axis_req_status_tag(desc_req_status_tag),
+    .m_axis_req_status_empty(desc_req_status_empty),
+    .m_axis_req_status_error(desc_req_status_error),
+    .m_axis_req_status_valid(desc_req_status_valid),
+
+    /*
+     * Descriptor data output
+     */
+    .m_axis_desc_tdata(axis_desc_tdata),
+    .m_axis_desc_tkeep(axis_desc_tkeep),
+    .m_axis_desc_tvalid(axis_desc_tvalid),
+    .m_axis_desc_tready(axis_desc_tready),
+    .m_axis_desc_tlast(axis_desc_tlast),
+    .m_axis_desc_tid(axis_desc_tid),
+    .m_axis_desc_tuser(axis_desc_tuser),
+
+    /*
+     * Descriptor dequeue request output
+     */
+    .m_axis_desc_dequeue_req_queue({rx_desc_dequeue_req_queue, tx_desc_dequeue_req_queue}),
+    .m_axis_desc_dequeue_req_tag({rx_desc_dequeue_req_tag, tx_desc_dequeue_req_tag}),
+    .m_axis_desc_dequeue_req_valid({rx_desc_dequeue_req_valid, tx_desc_dequeue_req_valid}),
+    .m_axis_desc_dequeue_req_ready({rx_desc_dequeue_req_ready, tx_desc_dequeue_req_ready}),
+
+    /*
+     * Descriptor dequeue response input
+     */
+    .s_axis_desc_dequeue_resp_queue({rx_desc_dequeue_resp_queue, tx_desc_dequeue_resp_queue}),
+    .s_axis_desc_dequeue_resp_ptr({rx_desc_dequeue_resp_ptr, tx_desc_dequeue_resp_ptr}),
+    .s_axis_desc_dequeue_resp_addr({rx_desc_dequeue_resp_addr, tx_desc_dequeue_resp_addr}),
+    .s_axis_desc_dequeue_resp_block_size({rx_desc_dequeue_resp_block_size, tx_desc_dequeue_resp_block_size}),
+    .s_axis_desc_dequeue_resp_cpl({rx_desc_dequeue_resp_cpl, tx_desc_dequeue_resp_cpl}),
+    .s_axis_desc_dequeue_resp_tag({rx_desc_dequeue_resp_tag, tx_desc_dequeue_resp_tag}),
+    .s_axis_desc_dequeue_resp_op_tag({rx_desc_dequeue_resp_op_tag, tx_desc_dequeue_resp_op_tag}),
+    .s_axis_desc_dequeue_resp_empty({rx_desc_dequeue_resp_empty, tx_desc_dequeue_resp_empty}),
+    .s_axis_desc_dequeue_resp_error({rx_desc_dequeue_resp_error, tx_desc_dequeue_resp_error}),
+    .s_axis_desc_dequeue_resp_valid({rx_desc_dequeue_resp_valid, tx_desc_dequeue_resp_valid}),
+    .s_axis_desc_dequeue_resp_ready({rx_desc_dequeue_resp_ready, tx_desc_dequeue_resp_ready}),
+
+    /*
+     * Descriptor dequeue commit output
+     */
+    .m_axis_desc_dequeue_commit_op_tag({rx_desc_dequeue_commit_op_tag, tx_desc_dequeue_commit_op_tag}),
+    .m_axis_desc_dequeue_commit_valid({rx_desc_dequeue_commit_valid, tx_desc_dequeue_commit_valid}),
+    .m_axis_desc_dequeue_commit_ready({rx_desc_dequeue_commit_ready, tx_desc_dequeue_commit_ready}),
+
+    /*
+     * DMA read descriptor output
+     */
+    .m_axis_dma_read_desc_dma_addr(m_axis_ctrl_dma_read_desc_dma_addr),
+    .m_axis_dma_read_desc_ram_addr(m_axis_ctrl_dma_read_desc_ram_addr),
+    .m_axis_dma_read_desc_len(m_axis_ctrl_dma_read_desc_len),
+    .m_axis_dma_read_desc_tag(m_axis_ctrl_dma_read_desc_tag),
+    .m_axis_dma_read_desc_valid(m_axis_ctrl_dma_read_desc_valid),
+    .m_axis_dma_read_desc_ready(m_axis_ctrl_dma_read_desc_ready),
+
+    /*
+     * DMA read descriptor status input
+     */
+    .s_axis_dma_read_desc_status_tag(s_axis_ctrl_dma_read_desc_status_tag),
+    .s_axis_dma_read_desc_status_valid(s_axis_ctrl_dma_read_desc_status_valid),
+
+    /*
+     * RAM interface
+     */
+    .dma_ram_wr_cmd_be(ctrl_dma_ram_wr_cmd_be),
+    .dma_ram_wr_cmd_addr(ctrl_dma_ram_wr_cmd_addr),
+    .dma_ram_wr_cmd_data(ctrl_dma_ram_wr_cmd_data),
+    .dma_ram_wr_cmd_valid(ctrl_dma_ram_wr_cmd_valid),
+    .dma_ram_wr_cmd_ready(ctrl_dma_ram_wr_cmd_ready),
+
+    /*
+     * Configuration
+     */
+    .enable(1'b1)
+);
+
+assign m_axis_ctrl_dma_read_desc_ram_sel = 0;
+
+cpl_op_mux #(
+    .PORTS(PORTS+1),
+    .SELECT_WIDTH(2),
+    .QUEUE_INDEX_WIDTH(QUEUE_INDEX_WIDTH),
+    .S_REQ_TAG_WIDTH(PORT_DESC_REQ_TAG_WIDTH),
+    .M_REQ_TAG_WIDTH(DESC_REQ_TAG_WIDTH),
+    .CPL_SIZE(CPL_SIZE),
+    .ARB_TYPE("ROUND_ROBIN"),
+    .LSB_PRIORITY("HIGH")
+)
+cpl_op_mux_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Completion request output
+     */
+    .m_axis_req_sel(cpl_req_sel),
+    .m_axis_req_queue(cpl_req_queue),
+    .m_axis_req_tag(cpl_req_tag),
+    .m_axis_req_data(cpl_req_data),
+    .m_axis_req_valid(cpl_req_valid),
+    .m_axis_req_ready(cpl_req_ready),
+
+    /*
+     * Completion request status input
+     */
+    .s_axis_req_status_tag(cpl_req_status_tag),
+    .s_axis_req_status_full(cpl_req_status_full),
+    .s_axis_req_status_error(cpl_req_status_error),
+    .s_axis_req_status_valid(cpl_req_status_valid),
+
+    /*
+     * Completion request input
+     */
+    .s_axis_req_sel({port_cpl_req_sel, event_cpl_req_sel}),
+    .s_axis_req_queue({port_cpl_req_queue, event_cpl_req_queue}),
+    .s_axis_req_tag({port_cpl_req_tag, event_cpl_req_tag}),
+    .s_axis_req_data({port_cpl_req_data, event_cpl_req_data}),
+    .s_axis_req_valid({port_cpl_req_valid, event_cpl_req_valid}),
+    .s_axis_req_ready({port_cpl_req_ready, event_cpl_req_ready}),
+
+    /*
+     * Completion response output
+     */
+    .m_axis_req_status_tag({port_cpl_req_status_tag, event_cpl_req_status_tag}),
+    .m_axis_req_status_full({port_cpl_req_status_full, event_cpl_req_status_full}),
+    .m_axis_req_status_error({port_cpl_req_status_error, event_cpl_req_status_error}),
+    .m_axis_req_status_valid({port_cpl_req_status_valid, event_cpl_req_status_valid})
+);
+
+cpl_write #(
+    .PORTS(3),
+    .SELECT_WIDTH(2),
+    .SEG_COUNT(SEG_COUNT),
+    .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+    .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+    .SEG_BE_WIDTH(SEG_BE_WIDTH),
+    .RAM_PIPELINE(RAM_PIPELINE),
+    .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+    .DMA_ADDR_WIDTH(DMA_ADDR_WIDTH),
+    .DMA_LEN_WIDTH(DMA_LEN_WIDTH),
+    .DMA_TAG_WIDTH(DMA_TAG_WIDTH),
+    .REQ_TAG_WIDTH(DESC_REQ_TAG_WIDTH),
+    .QUEUE_REQ_TAG_WIDTH(QUEUE_REQ_TAG_WIDTH),
+    .QUEUE_OP_TAG_WIDTH(QUEUE_OP_TAG_WIDTH),
+    .QUEUE_INDEX_WIDTH(QUEUE_INDEX_WIDTH),
+    .CPL_SIZE(CPL_SIZE),
+    .DESC_TABLE_SIZE(32)
+)
+cpl_write_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Completion read request input
+     */
+    .s_axis_req_sel(cpl_req_sel),
+    .s_axis_req_queue(cpl_req_queue),
+    .s_axis_req_tag(cpl_req_tag),
+    .s_axis_req_data(cpl_req_data),
+    .s_axis_req_valid(cpl_req_valid),
+    .s_axis_req_ready(cpl_req_ready),
+
+    /*
+     * Completion read request status output
+     */
+    .m_axis_req_status_tag(cpl_req_status_tag),
+    .m_axis_req_status_full(cpl_req_status_full),
+    .m_axis_req_status_error(cpl_req_status_error),
+    .m_axis_req_status_valid(cpl_req_status_valid),
+
+    /*
+     * Completion enqueue request output
+     */
+    .m_axis_cpl_enqueue_req_queue({event_enqueue_req_queue, rx_cpl_enqueue_req_queue, tx_cpl_enqueue_req_queue}),
+    .m_axis_cpl_enqueue_req_tag({event_enqueue_req_tag, rx_cpl_enqueue_req_tag, tx_cpl_enqueue_req_tag}),
+    .m_axis_cpl_enqueue_req_valid({event_enqueue_req_valid, rx_cpl_enqueue_req_valid, tx_cpl_enqueue_req_valid}),
+    .m_axis_cpl_enqueue_req_ready({event_enqueue_req_ready, rx_cpl_enqueue_req_ready, tx_cpl_enqueue_req_ready}),
+
+    /*
+     * Completion enqueue response input
+     */
+    .s_axis_cpl_enqueue_resp_addr({event_enqueue_resp_addr, rx_cpl_enqueue_resp_addr, tx_cpl_enqueue_resp_addr}),
+    .s_axis_cpl_enqueue_resp_tag({event_enqueue_resp_tag, rx_cpl_enqueue_resp_tag, tx_cpl_enqueue_resp_tag}),
+    .s_axis_cpl_enqueue_resp_op_tag({event_enqueue_resp_op_tag, rx_cpl_enqueue_resp_op_tag, tx_cpl_enqueue_resp_op_tag}),
+    .s_axis_cpl_enqueue_resp_full({event_enqueue_resp_full, rx_cpl_enqueue_resp_full, tx_cpl_enqueue_resp_full}),
+    .s_axis_cpl_enqueue_resp_error({event_enqueue_resp_error, rx_cpl_enqueue_resp_error, tx_cpl_enqueue_resp_error}),
+    .s_axis_cpl_enqueue_resp_valid({event_enqueue_resp_valid, rx_cpl_enqueue_resp_valid, tx_cpl_enqueue_resp_valid}),
+    .s_axis_cpl_enqueue_resp_ready({event_enqueue_resp_ready, rx_cpl_enqueue_resp_ready, tx_cpl_enqueue_resp_ready}),
+
+    /*
+     * Completion enqueue commit output
+     */
+    .m_axis_cpl_enqueue_commit_op_tag({event_enqueue_commit_op_tag, rx_cpl_enqueue_commit_op_tag, tx_cpl_enqueue_commit_op_tag}),
+    .m_axis_cpl_enqueue_commit_valid({event_enqueue_commit_valid, rx_cpl_enqueue_commit_valid, tx_cpl_enqueue_commit_valid}),
+    .m_axis_cpl_enqueue_commit_ready({event_enqueue_commit_ready, rx_cpl_enqueue_commit_ready, tx_cpl_enqueue_commit_ready}),
+
+    /*
+     * DMA write descriptor output
+     */
+    .m_axis_dma_write_desc_dma_addr(m_axis_ctrl_dma_write_desc_dma_addr),
+    .m_axis_dma_write_desc_ram_addr(m_axis_ctrl_dma_write_desc_ram_addr),
+    .m_axis_dma_write_desc_len(m_axis_ctrl_dma_write_desc_len),
+    .m_axis_dma_write_desc_tag(m_axis_ctrl_dma_write_desc_tag),
+    .m_axis_dma_write_desc_valid(m_axis_ctrl_dma_write_desc_valid),
+    .m_axis_dma_write_desc_ready(m_axis_ctrl_dma_write_desc_ready),
+
+    /*
+     * DMA write descriptor status input
+     */
+    .s_axis_dma_write_desc_status_tag(s_axis_ctrl_dma_write_desc_status_tag),
+    .s_axis_dma_write_desc_status_valid(s_axis_ctrl_dma_write_desc_status_valid),
+
+    /*
+     * RAM interface
+     */
+    .dma_ram_rd_cmd_addr(ctrl_dma_ram_rd_cmd_addr),
+    .dma_ram_rd_cmd_valid(ctrl_dma_ram_rd_cmd_valid),
+    .dma_ram_rd_cmd_ready(ctrl_dma_ram_rd_cmd_ready),
+    .dma_ram_rd_resp_data(ctrl_dma_ram_rd_resp_data),
+    .dma_ram_rd_resp_valid(ctrl_dma_ram_rd_resp_valid),
+    .dma_ram_rd_resp_ready(ctrl_dma_ram_rd_resp_ready),
+
+    /*
+     * Configuration
+     */
+    .enable(1'b1)
+);
+
+assign m_axis_ctrl_dma_write_desc_ram_sel = 0;
+
+if (PORTS > 1) begin
+
+    dma_if_mux #
+    (
+        .PORTS(PORTS),
+        .SEG_COUNT(SEG_COUNT),
+        .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+        .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+        .SEG_BE_WIDTH(SEG_BE_WIDTH),
+        .S_RAM_SEL_WIDTH(0),
+        .M_RAM_SEL_WIDTH(RAM_SEL_WIDTH),
+        .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+        .DMA_ADDR_WIDTH(DMA_ADDR_WIDTH),
+        .LEN_WIDTH(DMA_LEN_WIDTH),
+        .S_TAG_WIDTH(DMA_TAG_WIDTH_INT),
+        .M_TAG_WIDTH(DMA_TAG_WIDTH),
+        .ARB_TYPE("ROUND_ROBIN"),
+        .LSB_PRIORITY("HIGH")
+    )
+    dma_if_mux_inst (
+        .clk(clk),
+        .rst(rst),
+
+        /*
+         * Read descriptor output (to DMA interface)
+         */
+        .m_axis_read_desc_dma_addr(m_axis_data_dma_read_desc_dma_addr),
+        .m_axis_read_desc_ram_sel(m_axis_data_dma_read_desc_ram_sel),
+        .m_axis_read_desc_ram_addr(m_axis_data_dma_read_desc_ram_addr),
+        .m_axis_read_desc_len(m_axis_data_dma_read_desc_len),
+        .m_axis_read_desc_tag(m_axis_data_dma_read_desc_tag),
+        .m_axis_read_desc_valid(m_axis_data_dma_read_desc_valid),
+        .m_axis_read_desc_ready(m_axis_data_dma_read_desc_ready),
+
+        /*
+         * Read descriptor status input (from DMA interface)
+         */
+        .s_axis_read_desc_status_tag(s_axis_data_dma_read_desc_status_tag),
+        .s_axis_read_desc_status_valid(s_axis_data_dma_read_desc_status_valid),
+
+        /*
+         * Read descriptor input
+         */
+        .s_axis_read_desc_dma_addr(port_dma_read_desc_dma_addr),
+        .s_axis_read_desc_ram_sel(0),
+        .s_axis_read_desc_ram_addr(port_dma_read_desc_ram_addr),
+        .s_axis_read_desc_len(port_dma_read_desc_len),
+        .s_axis_read_desc_tag(port_dma_read_desc_tag),
+        .s_axis_read_desc_valid(port_dma_read_desc_valid),
+        .s_axis_read_desc_ready(port_dma_read_desc_ready),
+
+        /*
+         * Read descriptor status output
+         */
+        .m_axis_read_desc_status_tag(port_dma_read_desc_status_tag),
+        .m_axis_read_desc_status_valid(port_dma_read_desc_status_valid),
+
+        /*
+         * Write descriptor output (to DMA interface)
+         */
+        .m_axis_write_desc_dma_addr(m_axis_data_dma_write_desc_dma_addr),
+        .m_axis_write_desc_ram_sel(m_axis_data_dma_write_desc_ram_sel),
+        .m_axis_write_desc_ram_addr(m_axis_data_dma_write_desc_ram_addr),
+        .m_axis_write_desc_len(m_axis_data_dma_write_desc_len),
+        .m_axis_write_desc_tag(m_axis_data_dma_write_desc_tag),
+        .m_axis_write_desc_valid(m_axis_data_dma_write_desc_valid),
+        .m_axis_write_desc_ready(m_axis_data_dma_write_desc_ready),
+
+        /*
+         * Write descriptor status input (from DMA interface)
+         */
+        .s_axis_write_desc_status_tag(s_axis_data_dma_write_desc_status_tag),
+        .s_axis_write_desc_status_valid(s_axis_data_dma_write_desc_status_valid),
+
+        /*
+         * Write descriptor input
+         */
+        .s_axis_write_desc_dma_addr(port_dma_write_desc_dma_addr),
+        .s_axis_write_desc_ram_sel(0),
+        .s_axis_write_desc_ram_addr(port_dma_write_desc_ram_addr),
+        .s_axis_write_desc_len(port_dma_write_desc_len),
+        .s_axis_write_desc_tag(port_dma_write_desc_tag),
+        .s_axis_write_desc_valid(port_dma_write_desc_valid),
+        .s_axis_write_desc_ready(port_dma_write_desc_ready),
+
+        /*
+         * Write descriptor status output
+         */
+        .m_axis_write_desc_status_tag(port_dma_write_desc_status_tag),
+        .m_axis_write_desc_status_valid(port_dma_write_desc_status_valid),
+
+        /*
+         * RAM interface (from DMA interface)
+         */
+        .if_ram_wr_cmd_sel(data_dma_ram_wr_cmd_sel),
+        .if_ram_wr_cmd_be(data_dma_ram_wr_cmd_be),
+        .if_ram_wr_cmd_addr(data_dma_ram_wr_cmd_addr),
+        .if_ram_wr_cmd_data(data_dma_ram_wr_cmd_data),
+        .if_ram_wr_cmd_valid(data_dma_ram_wr_cmd_valid),
+        .if_ram_wr_cmd_ready(data_dma_ram_wr_cmd_ready),
+        .if_ram_rd_cmd_sel(data_dma_ram_rd_cmd_sel),
+        .if_ram_rd_cmd_addr(data_dma_ram_rd_cmd_addr),
+        .if_ram_rd_cmd_valid(data_dma_ram_rd_cmd_valid),
+        .if_ram_rd_cmd_ready(data_dma_ram_rd_cmd_ready),
+        .if_ram_rd_resp_data(data_dma_ram_rd_resp_data),
+        .if_ram_rd_resp_valid(data_dma_ram_rd_resp_valid),
+        .if_ram_rd_resp_ready(data_dma_ram_rd_resp_ready),
+
+        /*
+         * RAM interface
+         */
+        .ram_wr_cmd_sel(),
+        .ram_wr_cmd_be(port_dma_ram_wr_cmd_be),
+        .ram_wr_cmd_addr(port_dma_ram_wr_cmd_addr),
+        .ram_wr_cmd_data(port_dma_ram_wr_cmd_data),
+        .ram_wr_cmd_valid(port_dma_ram_wr_cmd_valid),
+        .ram_wr_cmd_ready(port_dma_ram_wr_cmd_ready),
+        .ram_rd_cmd_sel(),
+        .ram_rd_cmd_addr(port_dma_ram_rd_cmd_addr),
+        .ram_rd_cmd_valid(port_dma_ram_rd_cmd_valid),
+        .ram_rd_cmd_ready(port_dma_ram_rd_cmd_ready),
+        .ram_rd_resp_data(port_dma_ram_rd_resp_data),
+        .ram_rd_resp_valid(port_dma_ram_rd_resp_valid),
+        .ram_rd_resp_ready(port_dma_ram_rd_resp_ready)
+    );
+
+end else begin
+
+    assign m_axis_data_dma_read_desc_dma_addr = port_dma_read_desc_dma_addr;
+    assign m_axis_data_dma_read_desc_ram_sel = 0;
+    assign m_axis_data_dma_read_desc_ram_addr = port_dma_read_desc_ram_addr;
+    assign m_axis_data_dma_read_desc_len = port_dma_read_desc_len;
+    assign m_axis_data_dma_read_desc_tag = port_dma_read_desc_tag;
+    assign m_axis_data_dma_read_desc_valid = port_dma_read_desc_valid;
+    assign port_dma_read_desc_ready = m_axis_data_dma_read_desc_ready;
+
+    assign port_dma_read_desc_status_tag = s_axis_data_dma_read_desc_status_tag;
+    assign port_dma_read_desc_status_valid = s_axis_data_dma_read_desc_status_valid;
+
+    assign m_axis_data_dma_write_desc_dma_addr = port_dma_write_desc_dma_addr;
+    assign m_axis_data_dma_write_desc_ram_sel = 0;
+    assign m_axis_data_dma_write_desc_ram_addr = port_dma_write_desc_ram_addr;
+    assign m_axis_data_dma_write_desc_len = port_dma_write_desc_len;
+    assign m_axis_data_dma_write_desc_tag = port_dma_write_desc_tag;
+    assign m_axis_data_dma_write_desc_valid = port_dma_write_desc_valid;
+    assign port_dma_write_desc_ready = m_axis_data_dma_write_desc_ready;
+
+    assign port_dma_write_desc_status_tag = s_axis_data_dma_write_desc_status_tag;
+    assign port_dma_write_desc_status_valid = s_axis_data_dma_write_desc_status_valid;
+
+    assign port_dma_ram_wr_cmd_be = data_dma_ram_wr_cmd_be;
+    assign port_dma_ram_wr_cmd_addr = data_dma_ram_wr_cmd_addr;
+    assign port_dma_ram_wr_cmd_data = data_dma_ram_wr_cmd_data;
+    assign port_dma_ram_wr_cmd_valid = data_dma_ram_wr_cmd_valid;
+    assign data_dma_ram_wr_cmd_ready = port_dma_ram_wr_cmd_ready;
+    assign port_dma_ram_rd_cmd_addr = data_dma_ram_rd_cmd_addr;
+    assign port_dma_ram_rd_cmd_valid = data_dma_ram_rd_cmd_valid;
+    assign data_dma_ram_rd_cmd_ready = port_dma_ram_rd_cmd_ready;
+    assign data_dma_ram_rd_resp_data = port_dma_ram_rd_resp_data;
+    assign data_dma_ram_rd_resp_valid = port_dma_ram_rd_resp_valid;
+    assign port_dma_ram_rd_resp_ready = data_dma_ram_rd_resp_ready;
+
+end
+
+event_mux #(
+    .PORTS(2),
+    .QUEUE_INDEX_WIDTH(EVENT_QUEUE_INDEX_WIDTH),
+    .EVENT_TYPE_WIDTH(EVENT_TYPE_WIDTH),
+    .EVENT_SOURCE_WIDTH(EVENT_SOURCE_WIDTH),
+    .ARB_TYPE("ROUND_ROBIN"),
+    .LSB_PRIORITY("HIGH")
+)
+event_mux_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Event output
+     */
+    .m_axis_event_queue(axis_event_queue),
+    .m_axis_event_type(axis_event_type),
+    .m_axis_event_source(axis_event_source),
+    .m_axis_event_valid(axis_event_valid),
+    .m_axis_event_ready(axis_event_ready),
+
+    /*
+     * Event input
+     */
+    .s_axis_event_queue({rx_fifo_event, tx_fifo_event}),
+    .s_axis_event_type({rx_fifo_event_type, tx_fifo_event_type}),
+    .s_axis_event_source({rx_fifo_event_source, tx_fifo_event_source}),
+    .s_axis_event_valid({rx_fifo_event_valid, tx_fifo_event_valid}),
+    .s_axis_event_ready({rx_fifo_event_ready, tx_fifo_event_ready})
+);
+
+assign event_cpl_req_queue = axis_event_queue;
+assign event_cpl_req_tag = 0;
+assign event_cpl_req_data[15:0] = axis_event_type;
+assign event_cpl_req_data[31:16] = axis_event_source;
+assign event_cpl_req_data[255:32] = 0;
+assign event_cpl_req_valid = axis_event_valid;
+assign axis_event_ready = event_cpl_req_ready;
+
+axis_fifo #(
+    .DEPTH(16),
+    .DATA_WIDTH(EVENT_SOURCE_WIDTH+EVENT_TYPE_WIDTH+EVENT_QUEUE_INDEX_WIDTH),
+    .KEEP_ENABLE(0),
+    .LAST_ENABLE(0),
+    .ID_ENABLE(0),
+    .DEST_ENABLE(0),
+    .USER_ENABLE(0),
+    .FRAME_FIFO(0)
+)
+tx_event_fifo (
+    .clk(clk),
+    .rst(rst),
+
+    // AXI input
+    .s_axis_tdata({tx_event_source, tx_event_type, tx_event}),
+    .s_axis_tkeep(0),
+    .s_axis_tvalid(tx_event_valid),
+    .s_axis_tready(),
+    .s_axis_tlast(0),
+    .s_axis_tid(0),
+    .s_axis_tdest(0),
+    .s_axis_tuser(0),
+
+    // AXI output
+    .m_axis_tdata({tx_fifo_event_source, tx_fifo_event_type, tx_fifo_event}),
+    .m_axis_tkeep(),
+    .m_axis_tvalid(tx_fifo_event_valid),
+    .m_axis_tready(tx_fifo_event_ready),
+    .m_axis_tlast(),
+    .m_axis_tid(),
+    .m_axis_tdest(),
+    .m_axis_tuser(),
+
+    // Status
+    .status_overflow(),
+    .status_bad_frame(),
+    .status_good_frame()
+);
+
+axis_fifo #(
+    .DEPTH(16),
+    .DATA_WIDTH(EVENT_SOURCE_WIDTH+EVENT_TYPE_WIDTH+EVENT_QUEUE_INDEX_WIDTH),
+    .KEEP_ENABLE(0),
+    .LAST_ENABLE(0),
+    .ID_ENABLE(0),
+    .DEST_ENABLE(0),
+    .USER_ENABLE(0),
+    .FRAME_FIFO(0)
+)
+rx_event_fifo (
+    .clk(clk),
+    .rst(rst),
+
+    // AXI input
+    .s_axis_tdata({rx_event_source, rx_event_type, rx_event}),
+    .s_axis_tkeep(0),
+    .s_axis_tvalid(rx_event_valid),
+    .s_axis_tready(),
+    .s_axis_tlast(0),
+    .s_axis_tid(0),
+    .s_axis_tdest(0),
+    .s_axis_tuser(0),
+
+    // AXI output
+    .m_axis_tdata({rx_fifo_event_source, rx_fifo_event_type, rx_fifo_event}),
+    .m_axis_tkeep(),
+    .m_axis_tvalid(rx_fifo_event_valid),
+    .m_axis_tready(rx_fifo_event_ready),
+    .m_axis_tlast(),
+    .m_axis_tid(),
+    .m_axis_tdest(),
+    .m_axis_tuser(),
+
+    // Status
+    .status_overflow(),
+    .status_bad_frame(),
+    .status_good_frame()
+);
+
+generate
+    genvar n;
+
+if (!RMT_TX_ENABLE) begin
+    for (n = 0; n < PORTS; n = n + 1) begin : port
+
+        assign port_cpl_req_sel[n*2+1 +: 1] = 1'b0;
+
+        port #(
+            .DMA_ADDR_WIDTH(DMA_ADDR_WIDTH),
+            .DMA_LEN_WIDTH(DMA_LEN_WIDTH),
+            .DMA_TAG_WIDTH(DMA_TAG_WIDTH_INT),
+            .REQ_TAG_WIDTH(REQ_TAG_WIDTH),
+            .DESC_REQ_TAG_WIDTH(PORT_DESC_REQ_TAG_WIDTH),
+            .QUEUE_REQ_TAG_WIDTH(QUEUE_REQ_TAG_WIDTH),
+            .QUEUE_OP_TAG_WIDTH(QUEUE_OP_TAG_WIDTH),
+            .TX_QUEUE_INDEX_WIDTH(TX_QUEUE_INDEX_WIDTH),
+            .RX_QUEUE_INDEX_WIDTH(RX_QUEUE_INDEX_WIDTH),
+            .QUEUE_INDEX_WIDTH(QUEUE_INDEX_WIDTH),
+            .TX_CPL_QUEUE_INDEX_WIDTH(TX_CPL_QUEUE_INDEX_WIDTH),
+            .RX_CPL_QUEUE_INDEX_WIDTH(RX_CPL_QUEUE_INDEX_WIDTH),
+            .CPL_QUEUE_INDEX_WIDTH(CPL_QUEUE_INDEX_WIDTH),
+            .TX_DESC_TABLE_SIZE(TX_DESC_TABLE_SIZE),
+            .TX_PKT_TABLE_SIZE(TX_PKT_TABLE_SIZE),
+            .RX_DESC_TABLE_SIZE(RX_DESC_TABLE_SIZE),
+            .RX_PKT_TABLE_SIZE(RX_PKT_TABLE_SIZE),
+            .DESC_TABLE_DMA_OP_COUNT_WIDTH(((2**LOG_BLOCK_SIZE_WIDTH)-1)+1),
+            .TX_MAX_DESC_REQ(TX_MAX_DESC_REQ),
+            .TX_DESC_FIFO_SIZE(TX_MAX_DESC_REQ*(2**((2**LOG_BLOCK_SIZE_WIDTH)-1))),
+            .RX_MAX_DESC_REQ(RX_MAX_DESC_REQ),
+            .RX_DESC_FIFO_SIZE(RX_MAX_DESC_REQ*(2**((2**LOG_BLOCK_SIZE_WIDTH)-1))),
+            .TX_SCHEDULER(TX_SCHEDULER),
+            .TX_SCHEDULER_OP_TABLE_SIZE(TX_SCHEDULER_OP_TABLE_SIZE),
+            .TX_SCHEDULER_PIPELINE(TX_SCHEDULER_PIPELINE),
+            .TDMA_INDEX_WIDTH(TDMA_INDEX_WIDTH),
+            .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+            .PTP_TS_ENABLE(PTP_TS_ENABLE),
+            .PTP_TS_WIDTH(PTP_TS_WIDTH),
+            .TX_CHECKSUM_ENABLE(TX_CHECKSUM_ENABLE),
+            .RX_RSS_ENABLE(RX_RSS_ENABLE),
+            .RX_HASH_ENABLE(RX_HASH_ENABLE),
+            .RX_CHECKSUM_ENABLE(RX_CHECKSUM_ENABLE),
+            .AXIL_DATA_WIDTH(AXIL_DATA_WIDTH),
+            .AXIL_ADDR_WIDTH(AXIL_PORT_ADDR_WIDTH),
+            .AXIL_STRB_WIDTH(AXIL_STRB_WIDTH),
+            .SEG_COUNT(SEG_COUNT),
+            .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+            .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+            .SEG_BE_WIDTH(SEG_BE_WIDTH),
+            .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+            .RAM_PIPELINE(RAM_PIPELINE),
+            .AXIS_DATA_WIDTH(AXIS_DATA_WIDTH),
+            .AXIS_KEEP_WIDTH(AXIS_KEEP_WIDTH),
+            .MAX_TX_SIZE(MAX_TX_SIZE),
+            .MAX_RX_SIZE(MAX_RX_SIZE),
+            .DESC_SIZE(DESC_SIZE),
+            .CPL_SIZE(CPL_SIZE),
+            .AXIS_DESC_DATA_WIDTH(AXIS_DESC_DATA_WIDTH),
+            .AXIS_DESC_KEEP_WIDTH(AXIS_DESC_KEEP_WIDTH),
+            .TX_RAM_SIZE(TX_RAM_SIZE),
+            .RX_RAM_SIZE(RX_RAM_SIZE),
+            .RMT_TX_ENABLE(0)
+        )
+        port_inst (
+            .clk(clk),
+            .rst(rst),
+
+            /*
+             * Descriptor request output
+             */
+            .m_axis_desc_req_sel(port_desc_req_sel[n*1 +: 1]),
+            .m_axis_desc_req_queue(port_desc_req_queue[n*QUEUE_INDEX_WIDTH +: QUEUE_INDEX_WIDTH]),
+            .m_axis_desc_req_tag(port_desc_req_tag[n*PORT_DESC_REQ_TAG_WIDTH +: PORT_DESC_REQ_TAG_WIDTH]),
+            .m_axis_desc_req_valid(port_desc_req_valid[n +: 1]),
+            .m_axis_desc_req_ready(port_desc_req_ready[n +: 1]),
+
+            /*
+             * Descriptor response input
+             */
+            .s_axis_desc_req_status_queue(port_desc_req_status_queue[n*QUEUE_INDEX_WIDTH +: QUEUE_INDEX_WIDTH]),
+            .s_axis_desc_req_status_ptr(port_desc_req_status_ptr[n*QUEUE_PTR_WIDTH +: QUEUE_PTR_WIDTH]),
+            .s_axis_desc_req_status_cpl(port_desc_req_status_cpl[n*CPL_QUEUE_INDEX_WIDTH +: CPL_QUEUE_INDEX_WIDTH]),
+            .s_axis_desc_req_status_tag(port_desc_req_status_tag[n*PORT_DESC_REQ_TAG_WIDTH +: PORT_DESC_REQ_TAG_WIDTH]),
+            .s_axis_desc_req_status_empty(port_desc_req_status_empty[n +: 1]),
+            .s_axis_desc_req_status_error(port_desc_req_status_error[n +: 1]),
+            .s_axis_desc_req_status_valid(port_desc_req_status_valid[n +: 1]),
+
+            /*
+             * Descriptor data input
+             */
+            .s_axis_desc_tdata(port_axis_desc_tdata[n*AXIS_DESC_DATA_WIDTH +: AXIS_DESC_DATA_WIDTH]),
+            .s_axis_desc_tkeep(port_axis_desc_tkeep[n*AXIS_DESC_KEEP_WIDTH +: AXIS_DESC_KEEP_WIDTH]),
+            .s_axis_desc_tvalid(port_axis_desc_tvalid[n +: 1]),
+            .s_axis_desc_tready(port_axis_desc_tready[n +: 1]),
+            .s_axis_desc_tlast(port_axis_desc_tlast[n +: 1]),
+            .s_axis_desc_tid(port_axis_desc_tid[n*PORT_DESC_REQ_TAG_WIDTH +: PORT_DESC_REQ_TAG_WIDTH]),
+            .s_axis_desc_tuser(port_axis_desc_tuser[n +: 1]),
+
+            /*
+             * Completion request output
+             */
+            .m_axis_cpl_req_sel(port_cpl_req_sel[n*2 +: 1]),
+            .m_axis_cpl_req_queue(port_cpl_req_queue[n*QUEUE_INDEX_WIDTH +: QUEUE_INDEX_WIDTH]),
+            .m_axis_cpl_req_tag(port_cpl_req_tag[n*PORT_DESC_REQ_TAG_WIDTH +: PORT_DESC_REQ_TAG_WIDTH]),
+            .m_axis_cpl_req_data(port_cpl_req_data[n*CPL_SIZE*8 +: CPL_SIZE*8]),
+            .m_axis_cpl_req_valid(port_cpl_req_valid[n +: 1]),
+            .m_axis_cpl_req_ready(port_cpl_req_ready[n +: 1]),
+
+            /*
+             * Completion response input
+             */
+            .s_axis_cpl_req_status_tag(port_cpl_req_status_tag[n*PORT_DESC_REQ_TAG_WIDTH +: PORT_DESC_REQ_TAG_WIDTH]),
+            .s_axis_cpl_req_status_full(port_cpl_req_status_full[n +: 1]),
+            .s_axis_cpl_req_status_error(port_cpl_req_status_error[n +: 1]),
+            .s_axis_cpl_req_status_valid(port_cpl_req_status_valid[n +: 1]),
+
+            /*
+             * TX doorbell input
+             */
+            .s_axis_tx_doorbell_queue(tx_doorbell_queue),
+            .s_axis_tx_doorbell_valid(tx_doorbell_valid),
+
+            /*
+             * DMA read descriptor output
+             */
+            .m_axis_dma_read_desc_dma_addr(port_dma_read_desc_dma_addr[n*DMA_ADDR_WIDTH +: DMA_ADDR_WIDTH]),
+            .m_axis_dma_read_desc_ram_addr(port_dma_read_desc_ram_addr[n*RAM_ADDR_WIDTH +: RAM_ADDR_WIDTH]),
+            .m_axis_dma_read_desc_len(port_dma_read_desc_len[n*DMA_LEN_WIDTH +: DMA_LEN_WIDTH]),
+            .m_axis_dma_read_desc_tag(port_dma_read_desc_tag[n*DMA_TAG_WIDTH_INT +: DMA_TAG_WIDTH_INT]),
+            .m_axis_dma_read_desc_valid(port_dma_read_desc_valid[n +: 1]),
+            .m_axis_dma_read_desc_ready(port_dma_read_desc_ready[n +: 1]),
+
+            /*
+             * DMA read descriptor status input
+             */
+            .s_axis_dma_read_desc_status_tag(port_dma_read_desc_status_tag[n*DMA_TAG_WIDTH_INT +: DMA_TAG_WIDTH_INT]),
+            .s_axis_dma_read_desc_status_valid(port_dma_read_desc_status_valid[n +: 1]),
+
+            /*
+             * DMA write descriptor output
+             */
+            .m_axis_dma_write_desc_dma_addr(port_dma_write_desc_dma_addr[n*DMA_ADDR_WIDTH +: DMA_ADDR_WIDTH]),
+            .m_axis_dma_write_desc_ram_addr(port_dma_write_desc_ram_addr[n*RAM_ADDR_WIDTH +: RAM_ADDR_WIDTH]),
+            .m_axis_dma_write_desc_len(port_dma_write_desc_len[n*DMA_LEN_WIDTH +: DMA_LEN_WIDTH]),
+            .m_axis_dma_write_desc_tag(port_dma_write_desc_tag[n*DMA_TAG_WIDTH_INT +: DMA_TAG_WIDTH_INT]),
+            .m_axis_dma_write_desc_valid(port_dma_write_desc_valid[n +: 1]),
+            .m_axis_dma_write_desc_ready(port_dma_write_desc_ready[n +: 1]),
+
+            /*
+             * DMA write descriptor status input
+             */
+            .s_axis_dma_write_desc_status_tag(port_dma_write_desc_status_tag[n*DMA_TAG_WIDTH_INT +: DMA_TAG_WIDTH_INT]),
+            .s_axis_dma_write_desc_status_valid(port_dma_write_desc_status_valid[n +: 1]),
+
+            /*
+             * AXI-Lite slave interface
+             */
+            .s_axil_awaddr(axil_port_awaddr[n*AXIL_ADDR_WIDTH +: AXIL_ADDR_WIDTH]),
+            .s_axil_awprot(axil_port_awprot[n*3 +: 3]),
+            .s_axil_awvalid(axil_port_awvalid[n +: 1]),
+            .s_axil_awready(axil_port_awready[n +: 1]),
+            .s_axil_wdata(axil_port_wdata[n*AXIL_DATA_WIDTH +: AXIL_DATA_WIDTH]),
+            .s_axil_wstrb(axil_port_wstrb[n*AXIL_STRB_WIDTH +: AXIL_STRB_WIDTH]),
+            .s_axil_wvalid(axil_port_wvalid[n +: 1]),
+            .s_axil_wready(axil_port_wready[n +: 1]),
+            .s_axil_bresp(axil_port_bresp[n*2 +: 2]),
+            .s_axil_bvalid(axil_port_bvalid[n +: 1]),
+            .s_axil_bready(axil_port_bready[n +: 1]),
+            .s_axil_araddr(axil_port_araddr[n*AXIL_ADDR_WIDTH +: AXIL_ADDR_WIDTH]),
+            .s_axil_arprot(axil_port_arprot[n*3 +: 3]),
+            .s_axil_arvalid(axil_port_arvalid[n +: 1]),
+            .s_axil_arready(axil_port_arready[n +: 1]),
+            .s_axil_rdata(axil_port_rdata[n*AXIL_DATA_WIDTH +: AXIL_DATA_WIDTH]),
+            .s_axil_rresp(axil_port_rresp[n*2 +: 2]),
+            .s_axil_rvalid(axil_port_rvalid[n +: 1]),
+            .s_axil_rready(axil_port_rready[n +: 1]),
+
+            /*
+             * RAM interface
+             */
+            .dma_ram_wr_cmd_be(port_dma_ram_wr_cmd_be[SEG_COUNT*SEG_BE_WIDTH*n +: SEG_COUNT*SEG_BE_WIDTH]),
+            .dma_ram_wr_cmd_addr(port_dma_ram_wr_cmd_addr[SEG_COUNT*SEG_ADDR_WIDTH*n +: SEG_COUNT*SEG_ADDR_WIDTH]),
+            .dma_ram_wr_cmd_data(port_dma_ram_wr_cmd_data[SEG_COUNT*SEG_DATA_WIDTH*n +: SEG_COUNT*SEG_DATA_WIDTH]),
+            .dma_ram_wr_cmd_valid(port_dma_ram_wr_cmd_valid[SEG_COUNT*n +: SEG_COUNT]),
+            .dma_ram_wr_cmd_ready(port_dma_ram_wr_cmd_ready[SEG_COUNT*n +: SEG_COUNT]),
+            .dma_ram_rd_cmd_addr(port_dma_ram_rd_cmd_addr[SEG_COUNT*SEG_ADDR_WIDTH*n +: SEG_COUNT*SEG_ADDR_WIDTH]),
+            .dma_ram_rd_cmd_valid(port_dma_ram_rd_cmd_valid[SEG_COUNT*n +: SEG_COUNT]),
+            .dma_ram_rd_cmd_ready(port_dma_ram_rd_cmd_ready[SEG_COUNT*n +: SEG_COUNT]),
+            .dma_ram_rd_resp_data(port_dma_ram_rd_resp_data[SEG_COUNT*SEG_DATA_WIDTH*n +: SEG_COUNT*SEG_DATA_WIDTH]),
+            .dma_ram_rd_resp_valid(port_dma_ram_rd_resp_valid[SEG_COUNT*n +: SEG_COUNT]),
+            .dma_ram_rd_resp_ready(port_dma_ram_rd_resp_ready[SEG_COUNT*n +: SEG_COUNT]),
+
+            /*
+             * Transmit data output
+             */
+            .tx_axis_tdata(tx_axis_tdata[n*AXIS_DATA_WIDTH +: AXIS_DATA_WIDTH]),
+            .tx_axis_tkeep(tx_axis_tkeep[n*AXIS_KEEP_WIDTH +: AXIS_KEEP_WIDTH]),
+            .tx_axis_tvalid(tx_axis_tvalid[n +: 1]),
+            .tx_axis_tready(tx_axis_tready[n +: 1]),
+            .tx_axis_tlast(tx_axis_tlast[n +: 1]),
+            //this is slightly different from NetFPGA since there is 1 bit in tuser
+            .tx_axis_tuser(tx_axis_tuser[n +: 1]),
+            // .tx_axis_tdata(),
+            // .tx_axis_tkeep(),
+            // .tx_axis_tvalid(),
+            // .tx_axis_tready(1),
+            // .tx_axis_tlast(),
+            // //this is slightly different from NetFPGA since there is 1 bit in tuser
+            // .tx_axis_tuser(),
+
+            /*
+             * Transmit timestamp input
+             */
+            .s_axis_tx_ptp_ts_96(s_axis_tx_ptp_ts_96[n*PTP_TS_WIDTH +: PTP_TS_WIDTH]),
+            .s_axis_tx_ptp_ts_valid(s_axis_tx_ptp_ts_valid[n +: 1]),
+            .s_axis_tx_ptp_ts_ready(s_axis_tx_ptp_ts_ready[n +: 1]),
+
+            /*
+             * Receive data input
+             */
+            .rx_axis_tdata(rx_axis_tdata[n*AXIS_DATA_WIDTH +: AXIS_DATA_WIDTH]),
+            .rx_axis_tkeep(rx_axis_tkeep[n*AXIS_KEEP_WIDTH +: AXIS_KEEP_WIDTH]),
+            .rx_axis_tvalid(rx_axis_tvalid[n +: 1]),
+            .rx_axis_tready(rx_axis_tready[n +: 1]),
+            .rx_axis_tlast(rx_axis_tlast[n +: 1]),
+            //this is slightly different from NetFPGA since there is 1 bit in tuser
+            .rx_axis_tuser(rx_axis_tuser[n +: 1]),
+            // .rx_axis_tdata(0),
+            // .rx_axis_tkeep(0),
+            // .rx_axis_tvalid(0),
+            // .rx_axis_tready(),
+            // .rx_axis_tlast(0),
+            // //this is slightly different from NetFPGA since there is 1 bit in tuser
+            // .rx_axis_tuser(0),
+
+            /*
+             * Receive timestamp input
+             */
+            .s_axis_rx_ptp_ts_96(s_axis_rx_ptp_ts_96[n*PTP_TS_WIDTH +: PTP_TS_WIDTH]),
+            .s_axis_rx_ptp_ts_valid(s_axis_rx_ptp_ts_valid[n +: 1]),
+            .s_axis_rx_ptp_ts_ready(s_axis_rx_ptp_ts_ready[n +: 1]),
+
+            /*
+             * PTP clock
+             */
+            .ptp_ts_96(ptp_ts_96),
+            .ptp_ts_step(ptp_ts_step),
+
+			//
+			.vlan_drop_flags(vlan_drop_flags),
+			.ctrl_token(ctrl_token_r)
+        );
+
+    end
+
+end // if (!RMT_TX_ENABLE)
+else begin
+    for (n = 0; n < PORTS; n = n + 1) begin : port
+
+        assign port_cpl_req_sel[n*2+1 +: 1] = 1'b0;
+
+        port #(
+            .DMA_ADDR_WIDTH(DMA_ADDR_WIDTH),
+            .DMA_LEN_WIDTH(DMA_LEN_WIDTH),
+            .DMA_TAG_WIDTH(DMA_TAG_WIDTH_INT),
+            .REQ_TAG_WIDTH(REQ_TAG_WIDTH),
+            .DESC_REQ_TAG_WIDTH(PORT_DESC_REQ_TAG_WIDTH),
+            .QUEUE_REQ_TAG_WIDTH(QUEUE_REQ_TAG_WIDTH),
+            .QUEUE_OP_TAG_WIDTH(QUEUE_OP_TAG_WIDTH),
+            .TX_QUEUE_INDEX_WIDTH(TX_QUEUE_INDEX_WIDTH),
+            .RX_QUEUE_INDEX_WIDTH(RX_QUEUE_INDEX_WIDTH),
+            .QUEUE_INDEX_WIDTH(QUEUE_INDEX_WIDTH),
+            .TX_CPL_QUEUE_INDEX_WIDTH(TX_CPL_QUEUE_INDEX_WIDTH),
+            .RX_CPL_QUEUE_INDEX_WIDTH(RX_CPL_QUEUE_INDEX_WIDTH),
+            .CPL_QUEUE_INDEX_WIDTH(CPL_QUEUE_INDEX_WIDTH),
+            .TX_DESC_TABLE_SIZE(TX_DESC_TABLE_SIZE),
+            .TX_PKT_TABLE_SIZE(TX_PKT_TABLE_SIZE),
+            .RX_DESC_TABLE_SIZE(RX_DESC_TABLE_SIZE),
+            .RX_PKT_TABLE_SIZE(RX_PKT_TABLE_SIZE),
+            .DESC_TABLE_DMA_OP_COUNT_WIDTH(((2**LOG_BLOCK_SIZE_WIDTH)-1)+1),
+            .TX_MAX_DESC_REQ(TX_MAX_DESC_REQ),
+            .TX_DESC_FIFO_SIZE(TX_MAX_DESC_REQ*(2**((2**LOG_BLOCK_SIZE_WIDTH)-1))),
+            .RX_MAX_DESC_REQ(RX_MAX_DESC_REQ),
+            .RX_DESC_FIFO_SIZE(RX_MAX_DESC_REQ*(2**((2**LOG_BLOCK_SIZE_WIDTH)-1))),
+            .TX_SCHEDULER(TX_SCHEDULER),
+            .TX_SCHEDULER_OP_TABLE_SIZE(TX_SCHEDULER_OP_TABLE_SIZE),
+            .TX_SCHEDULER_PIPELINE(TX_SCHEDULER_PIPELINE),
+            .TDMA_INDEX_WIDTH(TDMA_INDEX_WIDTH),
+            .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+            .PTP_TS_ENABLE(PTP_TS_ENABLE),
+            .PTP_TS_WIDTH(PTP_TS_WIDTH),
+            .TX_CHECKSUM_ENABLE(TX_CHECKSUM_ENABLE),
+            .RX_RSS_ENABLE(RX_RSS_ENABLE),
+            .RX_HASH_ENABLE(RX_HASH_ENABLE),
+            .RX_CHECKSUM_ENABLE(RX_CHECKSUM_ENABLE),
+            .AXIL_DATA_WIDTH(AXIL_DATA_WIDTH),
+            .AXIL_ADDR_WIDTH(AXIL_PORT_ADDR_WIDTH),
+            .AXIL_STRB_WIDTH(AXIL_STRB_WIDTH),
+            .SEG_COUNT(SEG_COUNT),
+            .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+            .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+            .SEG_BE_WIDTH(SEG_BE_WIDTH),
+            .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+            .RAM_PIPELINE(RAM_PIPELINE),
+            .AXIS_DATA_WIDTH(AXIS_DATA_WIDTH),
+            .AXIS_KEEP_WIDTH(AXIS_KEEP_WIDTH),
+            .MAX_TX_SIZE(MAX_TX_SIZE),
+            .MAX_RX_SIZE(MAX_RX_SIZE),
+            .DESC_SIZE(DESC_SIZE),
+            .CPL_SIZE(CPL_SIZE),
+            .AXIS_DESC_DATA_WIDTH(AXIS_DESC_DATA_WIDTH),
+            .AXIS_DESC_KEEP_WIDTH(AXIS_DESC_KEEP_WIDTH),
+            .TX_RAM_SIZE(TX_RAM_SIZE),
+            .RX_RAM_SIZE(RX_RAM_SIZE),
+            .RMT_TX_ENABLE(0)
+        )
+        port_inst (
+            .clk(clk),
+            .rst(rst),
+
+            /*
+             * Descriptor request output
+             */
+            .m_axis_desc_req_sel(port_desc_req_sel[n*1 +: 1]),
+            .m_axis_desc_req_queue(port_desc_req_queue[n*QUEUE_INDEX_WIDTH +: QUEUE_INDEX_WIDTH]),
+            .m_axis_desc_req_tag(port_desc_req_tag[n*PORT_DESC_REQ_TAG_WIDTH +: PORT_DESC_REQ_TAG_WIDTH]),
+            .m_axis_desc_req_valid(port_desc_req_valid[n +: 1]),
+            .m_axis_desc_req_ready(port_desc_req_ready[n +: 1]),
+
+            /*
+             * Descriptor response input
+             */
+            .s_axis_desc_req_status_queue(port_desc_req_status_queue[n*QUEUE_INDEX_WIDTH +: QUEUE_INDEX_WIDTH]),
+            .s_axis_desc_req_status_ptr(port_desc_req_status_ptr[n*QUEUE_PTR_WIDTH +: QUEUE_PTR_WIDTH]),
+            .s_axis_desc_req_status_cpl(port_desc_req_status_cpl[n*CPL_QUEUE_INDEX_WIDTH +: CPL_QUEUE_INDEX_WIDTH]),
+            .s_axis_desc_req_status_tag(port_desc_req_status_tag[n*PORT_DESC_REQ_TAG_WIDTH +: PORT_DESC_REQ_TAG_WIDTH]),
+            .s_axis_desc_req_status_empty(port_desc_req_status_empty[n +: 1]),
+            .s_axis_desc_req_status_error(port_desc_req_status_error[n +: 1]),
+            .s_axis_desc_req_status_valid(port_desc_req_status_valid[n +: 1]),
+
+            /*
+             * Descriptor data input
+             */
+            .s_axis_desc_tdata(port_axis_desc_tdata[n*AXIS_DESC_DATA_WIDTH +: AXIS_DESC_DATA_WIDTH]),
+            .s_axis_desc_tkeep(port_axis_desc_tkeep[n*AXIS_DESC_KEEP_WIDTH +: AXIS_DESC_KEEP_WIDTH]),
+            .s_axis_desc_tvalid(port_axis_desc_tvalid[n +: 1]),
+            .s_axis_desc_tready(port_axis_desc_tready[n +: 1]),
+            .s_axis_desc_tlast(port_axis_desc_tlast[n +: 1]),
+            .s_axis_desc_tid(port_axis_desc_tid[n*PORT_DESC_REQ_TAG_WIDTH +: PORT_DESC_REQ_TAG_WIDTH]),
+            .s_axis_desc_tuser(port_axis_desc_tuser[n +: 1]),
+
+            /*
+             * Completion request output
+             */
+            .m_axis_cpl_req_sel(port_cpl_req_sel[n*2 +: 1]),
+            .m_axis_cpl_req_queue(port_cpl_req_queue[n*QUEUE_INDEX_WIDTH +: QUEUE_INDEX_WIDTH]),
+            .m_axis_cpl_req_tag(port_cpl_req_tag[n*PORT_DESC_REQ_TAG_WIDTH +: PORT_DESC_REQ_TAG_WIDTH]),
+            .m_axis_cpl_req_data(port_cpl_req_data[n*CPL_SIZE*8 +: CPL_SIZE*8]),
+            .m_axis_cpl_req_valid(port_cpl_req_valid[n +: 1]),
+            .m_axis_cpl_req_ready(port_cpl_req_ready[n +: 1]),
+
+            /*
+             * Completion response input
+             */
+            .s_axis_cpl_req_status_tag(port_cpl_req_status_tag[n*PORT_DESC_REQ_TAG_WIDTH +: PORT_DESC_REQ_TAG_WIDTH]),
+            .s_axis_cpl_req_status_full(port_cpl_req_status_full[n +: 1]),
+            .s_axis_cpl_req_status_error(port_cpl_req_status_error[n +: 1]),
+            .s_axis_cpl_req_status_valid(port_cpl_req_status_valid[n +: 1]),
+
+            /*
+             * TX doorbell input
+             */
+            .s_axis_tx_doorbell_queue(tx_doorbell_queue),
+            .s_axis_tx_doorbell_valid(tx_doorbell_valid),
+
+            /*
+             * DMA read descriptor output
+             */
+            .m_axis_dma_read_desc_dma_addr(port_dma_read_desc_dma_addr[n*DMA_ADDR_WIDTH +: DMA_ADDR_WIDTH]),
+            .m_axis_dma_read_desc_ram_addr(port_dma_read_desc_ram_addr[n*RAM_ADDR_WIDTH +: RAM_ADDR_WIDTH]),
+            .m_axis_dma_read_desc_len(port_dma_read_desc_len[n*DMA_LEN_WIDTH +: DMA_LEN_WIDTH]),
+            .m_axis_dma_read_desc_tag(port_dma_read_desc_tag[n*DMA_TAG_WIDTH_INT +: DMA_TAG_WIDTH_INT]),
+            .m_axis_dma_read_desc_valid(port_dma_read_desc_valid[n +: 1]),
+            .m_axis_dma_read_desc_ready(port_dma_read_desc_ready[n +: 1]),
+
+            /*
+             * DMA read descriptor status input
+             */
+            .s_axis_dma_read_desc_status_tag(port_dma_read_desc_status_tag[n*DMA_TAG_WIDTH_INT +: DMA_TAG_WIDTH_INT]),
+            .s_axis_dma_read_desc_status_valid(port_dma_read_desc_status_valid[n +: 1]),
+
+            /*
+             * DMA write descriptor output
+             */
+            .m_axis_dma_write_desc_dma_addr(port_dma_write_desc_dma_addr[n*DMA_ADDR_WIDTH +: DMA_ADDR_WIDTH]),
+            .m_axis_dma_write_desc_ram_addr(port_dma_write_desc_ram_addr[n*RAM_ADDR_WIDTH +: RAM_ADDR_WIDTH]),
+            .m_axis_dma_write_desc_len(port_dma_write_desc_len[n*DMA_LEN_WIDTH +: DMA_LEN_WIDTH]),
+            .m_axis_dma_write_desc_tag(port_dma_write_desc_tag[n*DMA_TAG_WIDTH_INT +: DMA_TAG_WIDTH_INT]),
+            .m_axis_dma_write_desc_valid(port_dma_write_desc_valid[n +: 1]),
+            .m_axis_dma_write_desc_ready(port_dma_write_desc_ready[n +: 1]),
+
+            /*
+             * DMA write descriptor status input
+             */
+            .s_axis_dma_write_desc_status_tag(port_dma_write_desc_status_tag[n*DMA_TAG_WIDTH_INT +: DMA_TAG_WIDTH_INT]),
+            .s_axis_dma_write_desc_status_valid(port_dma_write_desc_status_valid[n +: 1]),
+
+            /*
+             * AXI-Lite slave interface
+             */
+            .s_axil_awaddr(axil_port_awaddr[n*AXIL_ADDR_WIDTH +: AXIL_ADDR_WIDTH]),
+            .s_axil_awprot(axil_port_awprot[n*3 +: 3]),
+            .s_axil_awvalid(axil_port_awvalid[n +: 1]),
+            .s_axil_awready(axil_port_awready[n +: 1]),
+            .s_axil_wdata(axil_port_wdata[n*AXIL_DATA_WIDTH +: AXIL_DATA_WIDTH]),
+            .s_axil_wstrb(axil_port_wstrb[n*AXIL_STRB_WIDTH +: AXIL_STRB_WIDTH]),
+            .s_axil_wvalid(axil_port_wvalid[n +: 1]),
+            .s_axil_wready(axil_port_wready[n +: 1]),
+            .s_axil_bresp(axil_port_bresp[n*2 +: 2]),
+            .s_axil_bvalid(axil_port_bvalid[n +: 1]),
+            .s_axil_bready(axil_port_bready[n +: 1]),
+            .s_axil_araddr(axil_port_araddr[n*AXIL_ADDR_WIDTH +: AXIL_ADDR_WIDTH]),
+            .s_axil_arprot(axil_port_arprot[n*3 +: 3]),
+            .s_axil_arvalid(axil_port_arvalid[n +: 1]),
+            .s_axil_arready(axil_port_arready[n +: 1]),
+            .s_axil_rdata(axil_port_rdata[n*AXIL_DATA_WIDTH +: AXIL_DATA_WIDTH]),
+            .s_axil_rresp(axil_port_rresp[n*2 +: 2]),
+            .s_axil_rvalid(axil_port_rvalid[n +: 1]),
+            .s_axil_rready(axil_port_rready[n +: 1]),
+
+            /*
+             * RAM interface
+             */
+            .dma_ram_wr_cmd_be(port_dma_ram_wr_cmd_be[SEG_COUNT*SEG_BE_WIDTH*n +: SEG_COUNT*SEG_BE_WIDTH]),
+            .dma_ram_wr_cmd_addr(port_dma_ram_wr_cmd_addr[SEG_COUNT*SEG_ADDR_WIDTH*n +: SEG_COUNT*SEG_ADDR_WIDTH]),
+            .dma_ram_wr_cmd_data(port_dma_ram_wr_cmd_data[SEG_COUNT*SEG_DATA_WIDTH*n +: SEG_COUNT*SEG_DATA_WIDTH]),
+            .dma_ram_wr_cmd_valid(port_dma_ram_wr_cmd_valid[SEG_COUNT*n +: SEG_COUNT]),
+            .dma_ram_wr_cmd_ready(port_dma_ram_wr_cmd_ready[SEG_COUNT*n +: SEG_COUNT]),
+            .dma_ram_rd_cmd_addr(port_dma_ram_rd_cmd_addr[SEG_COUNT*SEG_ADDR_WIDTH*n +: SEG_COUNT*SEG_ADDR_WIDTH]),
+            .dma_ram_rd_cmd_valid(port_dma_ram_rd_cmd_valid[SEG_COUNT*n +: SEG_COUNT]),
+            .dma_ram_rd_cmd_ready(port_dma_ram_rd_cmd_ready[SEG_COUNT*n +: SEG_COUNT]),
+            .dma_ram_rd_resp_data(port_dma_ram_rd_resp_data[SEG_COUNT*SEG_DATA_WIDTH*n +: SEG_COUNT*SEG_DATA_WIDTH]),
+            .dma_ram_rd_resp_valid(port_dma_ram_rd_resp_valid[SEG_COUNT*n +: SEG_COUNT]),
+            .dma_ram_rd_resp_ready(port_dma_ram_rd_resp_ready[SEG_COUNT*n +: SEG_COUNT]),
+
+            /*
+             * Transmit data output
+             */
+            // .tx_axis_tdata(tx_axis_tdata[n*AXIS_DATA_WIDTH +: AXIS_DATA_WIDTH]),
+            // .tx_axis_tkeep(tx_axis_tkeep[n*AXIS_KEEP_WIDTH +: AXIS_KEEP_WIDTH]),
+            // .tx_axis_tvalid(tx_axis_tvalid[n +: 1]),
+            // .tx_axis_tready(tx_axis_tready[n +: 1]),
+            // .tx_axis_tlast(tx_axis_tlast[n +: 1]),
+            // //this is slightly different from NetFPGA since there is 1 bit in tuser
+            // .tx_axis_tuser(tx_axis_tuser[n +: 1]),
+            .tx_axis_tdata(),
+            .tx_axis_tkeep(),
+            .tx_axis_tvalid(),
+            .tx_axis_tready(1),
+            .tx_axis_tlast(),
+            //this is slightly different from NetFPGA since there is 1 bit in tuser
+            .tx_axis_tuser(),
+
+            /*
+             * Transmit timestamp input
+             */
+            .s_axis_tx_ptp_ts_96(s_axis_tx_ptp_ts_96[n*PTP_TS_WIDTH +: PTP_TS_WIDTH]),
+            .s_axis_tx_ptp_ts_valid(s_axis_tx_ptp_ts_valid[n +: 1]),
+            .s_axis_tx_ptp_ts_ready(s_axis_tx_ptp_ts_ready[n +: 1]),
+
+            /*
+             * Receive data input
+             */
+            // .rx_axis_tdata(rx_axis_tdata[n*AXIS_DATA_WIDTH +: AXIS_DATA_WIDTH]),
+            // .rx_axis_tkeep(rx_axis_tkeep[n*AXIS_KEEP_WIDTH +: AXIS_KEEP_WIDTH]),
+            // .rx_axis_tvalid(rx_axis_tvalid[n +: 1]),
+            // .rx_axis_tready(rx_axis_tready[n +: 1]),
+            // .rx_axis_tlast(rx_axis_tlast[n +: 1]),
+            // //this is slightly different from NetFPGA since there is 1 bit in tuser
+            // .rx_axis_tuser(rx_axis_tuser[n +: 1]),
+            .rx_axis_tdata(0),
+            .rx_axis_tkeep(0),
+            .rx_axis_tvalid(0),
+            .rx_axis_tready(),
+            .rx_axis_tlast(0),
+            //this is slightly different from NetFPGA since there is 1 bit in tuser
+            .rx_axis_tuser(0),
+
+            /*
+             * Receive timestamp input
+             */
+            .s_axis_rx_ptp_ts_96(s_axis_rx_ptp_ts_96[n*PTP_TS_WIDTH +: PTP_TS_WIDTH]),
+            .s_axis_rx_ptp_ts_valid(s_axis_rx_ptp_ts_valid[n +: 1]),
+            .s_axis_rx_ptp_ts_ready(s_axis_rx_ptp_ts_ready[n +: 1]),
+
+            /*
+             * PTP clock
+             */
+            .ptp_ts_96(ptp_ts_96),
+            .ptp_ts_step(ptp_ts_step),
+
+			//
+			.vlan_drop_flags(vlan_drop_flags),
+			.ctrl_token(ctrl_token_r)
+        );
+
+    end
+end
+endgenerate
+
+endmodule
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/rtl/one_in_one_out/interface.v ./fpga/mqnic/AU250/fpga_100g/rtl/one_in_one_out/interface.v
--- ./fpga-raw/mqnic/AU250/fpga_100g/rtl/one_in_one_out/interface.v	1970-01-01 08:00:00.000000000 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/rtl/one_in_one_out/interface.v	2022-01-31 13:02:15.010256655 +0800
@@ -0,0 +1,2255 @@
+/*
+
+Copyright 2019, The Regents of the University of California.
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+
+   1. Redistributions of source code must retain the above copyright notice,
+      this list of conditions and the following disclaimer.
+
+   2. Redistributions in binary form must reproduce the above copyright notice,
+      this list of conditions and the following disclaimer in the documentation
+      and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE REGENTS OF THE UNIVERSITY OF CALIFORNIA ''AS
+IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE REGENTS OF THE UNIVERSITY OF CALIFORNIA OR
+CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
+OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
+OF SUCH DAMAGE.
+
+The views and conclusions contained in the software and documentation are those
+of the authors and should not be interpreted as representing official policies,
+either expressed or implied, of The Regents of the University of California.
+
+*/
+
+// Language: Verilog 2001
+
+`timescale 1ns / 1ps
+
+/*
+ * NIC Interface
+ */
+module interface #
+(
+    // Number of ports
+    parameter PORTS = 1,
+    // DMA address width
+    parameter DMA_ADDR_WIDTH = 64,
+    // DMA length field width
+    parameter DMA_LEN_WIDTH = 16,
+    // DMA tag field width
+    parameter DMA_TAG_WIDTH = 8,
+    // Number of outstanding operations (event queue)
+    parameter EVENT_QUEUE_OP_TABLE_SIZE = 16,
+    // Number of outstanding operations (transmit queue)
+    parameter TX_QUEUE_OP_TABLE_SIZE = 16,
+    // Number of outstanding operations (receive queue)
+    parameter RX_QUEUE_OP_TABLE_SIZE = 16,
+    // Number of outstanding operations (transmit completion queue)
+    parameter TX_CPL_QUEUE_OP_TABLE_SIZE = 16,
+    // Number of outstanding operations (receive completion queue)
+    parameter RX_CPL_QUEUE_OP_TABLE_SIZE = 16,
+    // Event queue index width
+    parameter EVENT_QUEUE_INDEX_WIDTH = 5,
+    // Transmit queue index width
+    parameter TX_QUEUE_INDEX_WIDTH = 8,
+    // Receive queue index width
+    parameter RX_QUEUE_INDEX_WIDTH = 8,
+    // Transmit completion queue index width
+    parameter TX_CPL_QUEUE_INDEX_WIDTH = 8,
+    // Receive completion queue index width
+    parameter RX_CPL_QUEUE_INDEX_WIDTH = 8,
+    // Pipeline setting (event queue)
+    parameter EVENT_QUEUE_PIPELINE = 3,
+    // Pipeline setting (transmit queue)
+    parameter TX_QUEUE_PIPELINE = 3,
+    // Pipeline setting (receive queue)
+    parameter RX_QUEUE_PIPELINE = 3,
+    // Pipeline setting (transmit completion queue)
+    parameter TX_CPL_QUEUE_PIPELINE = 3,
+    // Pipeline setting (receive completion queue)
+    parameter RX_CPL_QUEUE_PIPELINE = 3,
+    // Transmit descriptor table size (number of in-flight operations)
+    parameter TX_DESC_TABLE_SIZE = 16,
+    // Transmit packet table size (number of in-progress packets)
+    parameter TX_PKT_TABLE_SIZE = 8,
+    // Receive descriptor table size (number of in-flight operations)
+    parameter RX_DESC_TABLE_SIZE = 16,
+    // Receive packet table size (number of in-progress packets)
+    parameter RX_PKT_TABLE_SIZE = 8,
+    // Max number of in-flight descriptor requests (transmit)
+    parameter TX_MAX_DESC_REQ = 16,
+    // Max number of in-flight descriptor requests (transmit)
+    parameter RX_MAX_DESC_REQ = 16,
+    // Transmit scheduler type
+    parameter TX_SCHEDULER = "RR",
+    // Scheduler operation table size
+    parameter TX_SCHEDULER_OP_TABLE_SIZE = 32,
+    // Scheduler pipeline setting
+    parameter TX_SCHEDULER_PIPELINE = 3,
+    // Scheduler TDMA index width
+    parameter TDMA_INDEX_WIDTH = 8,
+    // Interrupt number width
+    parameter INT_WIDTH = 8,
+    // Queue element pointer width
+    parameter QUEUE_PTR_WIDTH = 16,
+    // Queue log size field width
+    parameter LOG_QUEUE_SIZE_WIDTH = 4,
+    // Log desc block size field width
+    parameter LOG_BLOCK_SIZE_WIDTH = 2,
+    // Enable PTP timestamping
+    parameter PTP_TS_ENABLE = 1,
+    // PTP timestamp width
+    parameter PTP_TS_WIDTH = 96,
+    // Enable TX checksum offload
+    parameter TX_CHECKSUM_ENABLE = 1,
+    // Enable RX RSS
+    parameter RX_RSS_ENABLE = 1,
+    // Enable RX hashing
+    parameter RX_HASH_ENABLE = 1,
+    // Enable RX checksum offload
+    parameter RX_CHECKSUM_ENABLE = 1,
+    // Width of AXI lite data bus in bits
+    parameter AXIL_DATA_WIDTH = 32,
+    // Width of AXI lite address bus in bits
+    parameter AXIL_ADDR_WIDTH = 16,
+    // Width of AXI lite wstrb (width of data bus in words)
+    parameter AXIL_STRB_WIDTH = (AXIL_DATA_WIDTH/8),
+    // DMA RAM segment count
+    parameter SEG_COUNT = 2,
+    // DMA RAM segment data width
+    parameter SEG_DATA_WIDTH = 64,
+    // DMA RAM segment address width
+    parameter SEG_ADDR_WIDTH = 8,
+    // DMA RAM segment byte enable width
+    parameter SEG_BE_WIDTH = SEG_DATA_WIDTH/8,
+    // DMA RAM segment select width
+    parameter RAM_SEL_WIDTH = $clog2(PORTS),
+    // DMA RAM address width
+    parameter RAM_ADDR_WIDTH = SEG_ADDR_WIDTH+$clog2(SEG_COUNT)+$clog2(SEG_BE_WIDTH),
+    // DMA RAM pipeline stages
+    parameter RAM_PIPELINE = 2,
+    // Width of AXI stream interfaces in bits
+    parameter AXIS_DATA_WIDTH = 256,
+    // AXI stream tkeep signal width (words per cycle)
+    parameter AXIS_KEEP_WIDTH = AXIS_DATA_WIDTH/8,
+    // Max transmit packet size
+    parameter MAX_TX_SIZE = 2048,
+    // Max receive packet size
+    parameter MAX_RX_SIZE = 2048,
+    // DMA TX RAM size
+    parameter TX_RAM_SIZE = TX_PKT_TABLE_SIZE*MAX_TX_SIZE,
+    // DMA RX RAM size
+    parameter RX_RAM_SIZE = RX_PKT_TABLE_SIZE*MAX_RX_SIZE,
+    //whether RMT_pipeline is enabled
+    parameter RMT_TX_ENABLE = 1
+)
+(
+    input  wire                                clk,
+    input  wire                                rst,
+
+    /*
+     * DMA read descriptor output (control)
+     */
+    output wire [DMA_ADDR_WIDTH-1:0]           m_axis_ctrl_dma_read_desc_dma_addr,
+    output wire [RAM_SEL_WIDTH-1:0]            m_axis_ctrl_dma_read_desc_ram_sel,
+    output wire [RAM_ADDR_WIDTH-1:0]           m_axis_ctrl_dma_read_desc_ram_addr,
+    output wire [DMA_LEN_WIDTH-1:0]            m_axis_ctrl_dma_read_desc_len,
+    output wire [DMA_TAG_WIDTH-1:0]            m_axis_ctrl_dma_read_desc_tag,
+    output wire                                m_axis_ctrl_dma_read_desc_valid,
+    input  wire                                m_axis_ctrl_dma_read_desc_ready,
+
+    /*
+     * DMA read descriptor status input (control)
+     */
+    input  wire [DMA_TAG_WIDTH-1:0]            s_axis_ctrl_dma_read_desc_status_tag,
+    input  wire                                s_axis_ctrl_dma_read_desc_status_valid,
+
+    /*
+     * DMA write descriptor output (control)
+     */
+    output wire [DMA_ADDR_WIDTH-1:0]           m_axis_ctrl_dma_write_desc_dma_addr,
+    output wire [RAM_SEL_WIDTH-1:0]            m_axis_ctrl_dma_write_desc_ram_sel,
+    output wire [RAM_ADDR_WIDTH-1:0]           m_axis_ctrl_dma_write_desc_ram_addr,
+    output wire [DMA_LEN_WIDTH-1:0]            m_axis_ctrl_dma_write_desc_len,
+    output wire [DMA_TAG_WIDTH-1:0]            m_axis_ctrl_dma_write_desc_tag,
+    output wire                                m_axis_ctrl_dma_write_desc_valid,
+    input  wire                                m_axis_ctrl_dma_write_desc_ready,
+
+    /*
+     * DMA write descriptor status input (control)
+     */
+    input  wire [DMA_TAG_WIDTH-1:0]            s_axis_ctrl_dma_write_desc_status_tag,
+    input  wire                                s_axis_ctrl_dma_write_desc_status_valid,
+
+    /*
+     * DMA read descriptor output (data)
+     */
+    output wire [DMA_ADDR_WIDTH-1:0]           m_axis_data_dma_read_desc_dma_addr,
+    output wire [RAM_SEL_WIDTH-1:0]            m_axis_data_dma_read_desc_ram_sel,
+    output wire [RAM_ADDR_WIDTH-1:0]           m_axis_data_dma_read_desc_ram_addr,
+    output wire [DMA_LEN_WIDTH-1:0]            m_axis_data_dma_read_desc_len,
+    output wire [DMA_TAG_WIDTH-1:0]            m_axis_data_dma_read_desc_tag,
+    output wire                                m_axis_data_dma_read_desc_valid,
+    input  wire                                m_axis_data_dma_read_desc_ready,
+
+    /*
+     * DMA read descriptor status input (data)
+     */
+    input  wire [DMA_TAG_WIDTH-1:0]            s_axis_data_dma_read_desc_status_tag,
+    input  wire                                s_axis_data_dma_read_desc_status_valid,
+
+    /*
+     * DMA write descriptor output (data)
+     */
+    output wire [DMA_ADDR_WIDTH-1:0]           m_axis_data_dma_write_desc_dma_addr,
+    output wire [RAM_SEL_WIDTH-1:0]            m_axis_data_dma_write_desc_ram_sel,
+    output wire [RAM_ADDR_WIDTH-1:0]           m_axis_data_dma_write_desc_ram_addr,
+    output wire [DMA_LEN_WIDTH-1:0]            m_axis_data_dma_write_desc_len,
+    output wire [DMA_TAG_WIDTH-1:0]            m_axis_data_dma_write_desc_tag,
+    output wire                                m_axis_data_dma_write_desc_valid,
+    input  wire                                m_axis_data_dma_write_desc_ready,
+
+    /*
+     * DMA write descriptor status input (data)
+     */
+    input  wire [DMA_TAG_WIDTH-1:0]            s_axis_data_dma_write_desc_status_tag,
+    input  wire                                s_axis_data_dma_write_desc_status_valid,
+
+    /*
+     * AXI-Lite slave interface
+     */
+    input  wire [AXIL_ADDR_WIDTH-1:0]          s_axil_awaddr,
+    input  wire [2:0]                          s_axil_awprot,
+    input  wire                                s_axil_awvalid,
+    output wire                                s_axil_awready,
+    input  wire [AXIL_DATA_WIDTH-1:0]          s_axil_wdata,
+    input  wire [AXIL_STRB_WIDTH-1:0]          s_axil_wstrb,
+    input  wire                                s_axil_wvalid,
+    output wire                                s_axil_wready,
+    output wire [1:0]                          s_axil_bresp,
+    output wire                                s_axil_bvalid,
+    input  wire                                s_axil_bready,
+    input  wire [AXIL_ADDR_WIDTH-1:0]          s_axil_araddr,
+    input  wire [2:0]                          s_axil_arprot,
+    input  wire                                s_axil_arvalid,
+    output wire                                s_axil_arready,
+    output wire [AXIL_DATA_WIDTH-1:0]          s_axil_rdata,
+    output wire [1:0]                          s_axil_rresp,
+    output wire                                s_axil_rvalid,
+    input  wire                                s_axil_rready,
+
+    /*
+     * AXI-Lite master interface (passthrough for NIC control and status)
+     */
+    output wire [AXIL_ADDR_WIDTH-1:0]          m_axil_csr_awaddr,
+    output wire [2:0]                          m_axil_csr_awprot,
+    output wire                                m_axil_csr_awvalid,
+    input  wire                                m_axil_csr_awready,
+    output wire [AXIL_DATA_WIDTH-1:0]          m_axil_csr_wdata,
+    output wire [AXIL_STRB_WIDTH-1:0]          m_axil_csr_wstrb,
+    output wire                                m_axil_csr_wvalid,
+    input  wire                                m_axil_csr_wready,
+    input  wire [1:0]                          m_axil_csr_bresp,
+    input  wire                                m_axil_csr_bvalid,
+    output wire                                m_axil_csr_bready,
+    output wire [AXIL_ADDR_WIDTH-1:0]          m_axil_csr_araddr,
+    output wire [2:0]                          m_axil_csr_arprot,
+    output wire                                m_axil_csr_arvalid,
+    input  wire                                m_axil_csr_arready,
+    input  wire [AXIL_DATA_WIDTH-1:0]          m_axil_csr_rdata,
+    input  wire [1:0]                          m_axil_csr_rresp,
+    input  wire                                m_axil_csr_rvalid,
+    output wire                                m_axil_csr_rready,
+
+    /*
+     * RAM interface (control)
+     */
+    input  wire [SEG_COUNT*RAM_SEL_WIDTH-1:0]  ctrl_dma_ram_wr_cmd_sel,
+    input  wire [SEG_COUNT*SEG_BE_WIDTH-1:0]   ctrl_dma_ram_wr_cmd_be,
+    input  wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0] ctrl_dma_ram_wr_cmd_addr,
+    input  wire [SEG_COUNT*SEG_DATA_WIDTH-1:0] ctrl_dma_ram_wr_cmd_data,
+    input  wire [SEG_COUNT-1:0]                ctrl_dma_ram_wr_cmd_valid,
+    output wire [SEG_COUNT-1:0]                ctrl_dma_ram_wr_cmd_ready,
+    input  wire [SEG_COUNT*RAM_SEL_WIDTH-1:0]  ctrl_dma_ram_rd_cmd_sel,
+    input  wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0] ctrl_dma_ram_rd_cmd_addr,
+    input  wire [SEG_COUNT-1:0]                ctrl_dma_ram_rd_cmd_valid,
+    output wire [SEG_COUNT-1:0]                ctrl_dma_ram_rd_cmd_ready,
+    output wire [SEG_COUNT*SEG_DATA_WIDTH-1:0] ctrl_dma_ram_rd_resp_data,
+    output wire [SEG_COUNT-1:0]                ctrl_dma_ram_rd_resp_valid,
+    input  wire [SEG_COUNT-1:0]                ctrl_dma_ram_rd_resp_ready,
+
+    /*
+     * RAM interface (data)
+     */
+    input  wire [SEG_COUNT*RAM_SEL_WIDTH-1:0]  data_dma_ram_wr_cmd_sel,
+    input  wire [SEG_COUNT*SEG_BE_WIDTH-1:0]   data_dma_ram_wr_cmd_be,
+    input  wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0] data_dma_ram_wr_cmd_addr,
+    input  wire [SEG_COUNT*SEG_DATA_WIDTH-1:0] data_dma_ram_wr_cmd_data,
+    input  wire [SEG_COUNT-1:0]                data_dma_ram_wr_cmd_valid,
+    output wire [SEG_COUNT-1:0]                data_dma_ram_wr_cmd_ready,
+    input  wire [SEG_COUNT*RAM_SEL_WIDTH-1:0]  data_dma_ram_rd_cmd_sel,
+    input  wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0] data_dma_ram_rd_cmd_addr,
+    input  wire [SEG_COUNT-1:0]                data_dma_ram_rd_cmd_valid,
+    output wire [SEG_COUNT-1:0]                data_dma_ram_rd_cmd_ready,
+    output wire [SEG_COUNT*SEG_DATA_WIDTH-1:0] data_dma_ram_rd_resp_data,
+    output wire [SEG_COUNT-1:0]                data_dma_ram_rd_resp_valid,
+    input  wire [SEG_COUNT-1:0]                data_dma_ram_rd_resp_ready,
+
+    /*
+     * Transmit data output
+     */
+    output wire [PORTS*AXIS_DATA_WIDTH-1:0]    tx_axis_tdata,
+    output wire [PORTS*AXIS_KEEP_WIDTH-1:0]    tx_axis_tkeep,
+    output wire [PORTS-1:0]                    tx_axis_tvalid,
+    input  wire [PORTS-1:0]                    tx_axis_tready,
+    output wire [PORTS-1:0]                    tx_axis_tlast,
+    output wire [PORTS-1:0]                    tx_axis_tuser,
+
+    /*
+     * Transmit timestamp input
+     */
+    input  wire [PORTS*PTP_TS_WIDTH-1:0]       s_axis_tx_ptp_ts_96,
+    input  wire [PORTS-1:0]                    s_axis_tx_ptp_ts_valid,
+    output wire [PORTS-1:0]                    s_axis_tx_ptp_ts_ready,
+
+    /*
+     * Receive data input
+     */
+    input  wire [PORTS*AXIS_DATA_WIDTH-1:0]    rx_axis_tdata,
+    input  wire [PORTS*AXIS_KEEP_WIDTH-1:0]    rx_axis_tkeep,
+    input  wire [PORTS-1:0]                    rx_axis_tvalid,
+    output wire [PORTS-1:0]                    rx_axis_tready,
+    input  wire [PORTS-1:0]                    rx_axis_tlast,
+    input  wire [PORTS-1:0]                    rx_axis_tuser,
+
+    /*
+     * Receive timestamp input
+     */
+    input  wire [PORTS*PTP_TS_WIDTH-1:0]       s_axis_rx_ptp_ts_96,
+    input  wire [PORTS-1:0]                    s_axis_rx_ptp_ts_valid,
+    output wire [PORTS-1:0]                    s_axis_rx_ptp_ts_ready,
+
+    /*
+     * PTP clock
+     */
+    input  wire [95:0]                         ptp_ts_96,
+    input  wire                                ptp_ts_step,
+
+    /*
+     * MSI interrupts
+     */
+    output wire [31:0]                         msi_irq
+);
+
+parameter DESC_SIZE = 16;
+parameter CPL_SIZE = 32;
+parameter EVENT_SIZE = 32;
+
+parameter AXIS_DESC_DATA_WIDTH = DESC_SIZE*8;
+parameter AXIS_DESC_KEEP_WIDTH = AXIS_DESC_DATA_WIDTH/8;
+
+parameter EVENT_SOURCE_WIDTH = 16;
+parameter EVENT_TYPE_WIDTH = 16;
+
+parameter MAX_DESC_TABLE_SIZE = TX_DESC_TABLE_SIZE > RX_DESC_TABLE_SIZE ? TX_DESC_TABLE_SIZE : RX_DESC_TABLE_SIZE;
+
+parameter REQ_TAG_WIDTH = $clog2(MAX_DESC_TABLE_SIZE) + 1 + $clog2(PORTS+1);
+parameter DESC_REQ_TAG_WIDTH = $clog2(MAX_DESC_TABLE_SIZE) + 1 + $clog2(PORTS+1);
+
+parameter QUEUE_REQ_TAG_WIDTH = $clog2(MAX_DESC_TABLE_SIZE) + 1 + $clog2(PORTS+1);
+parameter QUEUE_OP_TAG_WIDTH = 6;
+
+parameter DMA_TAG_WIDTH_INT = DMA_TAG_WIDTH - $clog2(PORTS);
+
+parameter QUEUE_INDEX_WIDTH = TX_QUEUE_INDEX_WIDTH > RX_QUEUE_INDEX_WIDTH ? TX_QUEUE_INDEX_WIDTH : RX_QUEUE_INDEX_WIDTH;
+parameter CPL_QUEUE_INDEX_WIDTH = TX_CPL_QUEUE_INDEX_WIDTH > RX_CPL_QUEUE_INDEX_WIDTH ? TX_CPL_QUEUE_INDEX_WIDTH : RX_CPL_QUEUE_INDEX_WIDTH;
+
+parameter PORT_DESC_REQ_TAG_WIDTH = DESC_REQ_TAG_WIDTH - $clog2(PORTS+1);
+
+parameter AXIL_CSR_ADDR_WIDTH = AXIL_ADDR_WIDTH-5-$clog2((PORTS+3)/8);
+parameter AXIL_CTRL_ADDR_WIDTH = AXIL_ADDR_WIDTH-5-$clog2((PORTS+3)/8);
+parameter AXIL_EQM_ADDR_WIDTH = AXIL_ADDR_WIDTH-4-$clog2((PORTS+3)/8);
+parameter AXIL_TX_QM_ADDR_WIDTH = AXIL_ADDR_WIDTH-3-$clog2((PORTS+3)/8);
+parameter AXIL_TX_CQM_ADDR_WIDTH = AXIL_ADDR_WIDTH-3-$clog2((PORTS+3)/8);
+parameter AXIL_RX_QM_ADDR_WIDTH = AXIL_ADDR_WIDTH-4-$clog2((PORTS+3)/8);
+parameter AXIL_RX_CQM_ADDR_WIDTH = AXIL_ADDR_WIDTH-4-$clog2((PORTS+3)/8);
+parameter AXIL_PORT_ADDR_WIDTH = AXIL_ADDR_WIDTH-3-$clog2((PORTS+3)/8);
+
+parameter AXIL_CSR_BASE_ADDR = 0;
+parameter AXIL_CTRL_BASE_ADDR = AXIL_CSR_BASE_ADDR + 2**AXIL_CSR_ADDR_WIDTH;
+parameter AXIL_EQM_BASE_ADDR = AXIL_CTRL_BASE_ADDR + 2**AXIL_CTRL_ADDR_WIDTH;
+parameter AXIL_TX_QM_BASE_ADDR = AXIL_EQM_BASE_ADDR + 2**AXIL_EQM_ADDR_WIDTH;
+parameter AXIL_TX_CQM_BASE_ADDR = AXIL_TX_QM_BASE_ADDR + 2**AXIL_TX_QM_ADDR_WIDTH;
+parameter AXIL_RX_QM_BASE_ADDR = AXIL_TX_CQM_BASE_ADDR + 2**AXIL_TX_CQM_ADDR_WIDTH;
+parameter AXIL_RX_CQM_BASE_ADDR = AXIL_RX_QM_BASE_ADDR + 2**AXIL_RX_QM_ADDR_WIDTH;
+parameter AXIL_PORT_BASE_ADDR = AXIL_RX_CQM_BASE_ADDR + 2**AXIL_RX_CQM_ADDR_WIDTH;
+
+// parameter sizing helpers
+function [31:0] w_32(input [31:0] val);
+    w_32 = val;
+endfunction
+
+// AXI lite connections
+wire [AXIL_ADDR_WIDTH-1:0] axil_ctrl_awaddr;
+wire [2:0]                 axil_ctrl_awprot;
+wire                       axil_ctrl_awvalid;
+wire                       axil_ctrl_awready;
+wire [AXIL_DATA_WIDTH-1:0] axil_ctrl_wdata;
+wire [AXIL_STRB_WIDTH-1:0] axil_ctrl_wstrb;
+wire                       axil_ctrl_wvalid;
+wire                       axil_ctrl_wready;
+wire [1:0]                 axil_ctrl_bresp;
+wire                       axil_ctrl_bvalid;
+wire                       axil_ctrl_bready;
+wire [AXIL_ADDR_WIDTH-1:0] axil_ctrl_araddr;
+wire [2:0]                 axil_ctrl_arprot;
+wire                       axil_ctrl_arvalid;
+wire                       axil_ctrl_arready;
+wire [AXIL_DATA_WIDTH-1:0] axil_ctrl_rdata;
+wire [1:0]                 axil_ctrl_rresp;
+wire                       axil_ctrl_rvalid;
+wire                       axil_ctrl_rready;
+
+wire [AXIL_ADDR_WIDTH-1:0] axil_event_queue_manager_awaddr;
+wire [2:0]                 axil_event_queue_manager_awprot;
+wire                       axil_event_queue_manager_awvalid;
+wire                       axil_event_queue_manager_awready;
+wire [AXIL_DATA_WIDTH-1:0] axil_event_queue_manager_wdata;
+wire [AXIL_STRB_WIDTH-1:0] axil_event_queue_manager_wstrb;
+wire                       axil_event_queue_manager_wvalid;
+wire                       axil_event_queue_manager_wready;
+wire [1:0]                 axil_event_queue_manager_bresp;
+wire                       axil_event_queue_manager_bvalid;
+wire                       axil_event_queue_manager_bready;
+wire [AXIL_ADDR_WIDTH-1:0] axil_event_queue_manager_araddr;
+wire [2:0]                 axil_event_queue_manager_arprot;
+wire                       axil_event_queue_manager_arvalid;
+wire                       axil_event_queue_manager_arready;
+wire [AXIL_DATA_WIDTH-1:0] axil_event_queue_manager_rdata;
+wire [1:0]                 axil_event_queue_manager_rresp;
+wire                       axil_event_queue_manager_rvalid;
+wire                       axil_event_queue_manager_rready;
+
+wire [AXIL_ADDR_WIDTH-1:0] axil_tx_queue_manager_awaddr;
+wire [2:0]                 axil_tx_queue_manager_awprot;
+wire                       axil_tx_queue_manager_awvalid;
+wire                       axil_tx_queue_manager_awready;
+wire [AXIL_DATA_WIDTH-1:0] axil_tx_queue_manager_wdata;
+wire [AXIL_STRB_WIDTH-1:0] axil_tx_queue_manager_wstrb;
+wire                       axil_tx_queue_manager_wvalid;
+wire                       axil_tx_queue_manager_wready;
+wire [1:0]                 axil_tx_queue_manager_bresp;
+wire                       axil_tx_queue_manager_bvalid;
+wire                       axil_tx_queue_manager_bready;
+wire [AXIL_ADDR_WIDTH-1:0] axil_tx_queue_manager_araddr;
+wire [2:0]                 axil_tx_queue_manager_arprot;
+wire                       axil_tx_queue_manager_arvalid;
+wire                       axil_tx_queue_manager_arready;
+wire [AXIL_DATA_WIDTH-1:0] axil_tx_queue_manager_rdata;
+wire [1:0]                 axil_tx_queue_manager_rresp;
+wire                       axil_tx_queue_manager_rvalid;
+wire                       axil_tx_queue_manager_rready;
+
+wire [AXIL_ADDR_WIDTH-1:0] axil_tx_cpl_queue_manager_awaddr;
+wire [2:0]                 axil_tx_cpl_queue_manager_awprot;
+wire                       axil_tx_cpl_queue_manager_awvalid;
+wire                       axil_tx_cpl_queue_manager_awready;
+wire [AXIL_DATA_WIDTH-1:0] axil_tx_cpl_queue_manager_wdata;
+wire [AXIL_STRB_WIDTH-1:0] axil_tx_cpl_queue_manager_wstrb;
+wire                       axil_tx_cpl_queue_manager_wvalid;
+wire                       axil_tx_cpl_queue_manager_wready;
+wire [1:0]                 axil_tx_cpl_queue_manager_bresp;
+wire                       axil_tx_cpl_queue_manager_bvalid;
+wire                       axil_tx_cpl_queue_manager_bready;
+wire [AXIL_ADDR_WIDTH-1:0] axil_tx_cpl_queue_manager_araddr;
+wire [2:0]                 axil_tx_cpl_queue_manager_arprot;
+wire                       axil_tx_cpl_queue_manager_arvalid;
+wire                       axil_tx_cpl_queue_manager_arready;
+wire [AXIL_DATA_WIDTH-1:0] axil_tx_cpl_queue_manager_rdata;
+wire [1:0]                 axil_tx_cpl_queue_manager_rresp;
+wire                       axil_tx_cpl_queue_manager_rvalid;
+wire                       axil_tx_cpl_queue_manager_rready;
+
+wire [AXIL_ADDR_WIDTH-1:0] axil_rx_queue_manager_awaddr;
+wire [2:0]                 axil_rx_queue_manager_awprot;
+wire                       axil_rx_queue_manager_awvalid;
+wire                       axil_rx_queue_manager_awready;
+wire [AXIL_DATA_WIDTH-1:0] axil_rx_queue_manager_wdata;
+wire [AXIL_STRB_WIDTH-1:0] axil_rx_queue_manager_wstrb;
+wire                       axil_rx_queue_manager_wvalid;
+wire                       axil_rx_queue_manager_wready;
+wire [1:0]                 axil_rx_queue_manager_bresp;
+wire                       axil_rx_queue_manager_bvalid;
+wire                       axil_rx_queue_manager_bready;
+wire [AXIL_ADDR_WIDTH-1:0] axil_rx_queue_manager_araddr;
+wire [2:0]                 axil_rx_queue_manager_arprot;
+wire                       axil_rx_queue_manager_arvalid;
+wire                       axil_rx_queue_manager_arready;
+wire [AXIL_DATA_WIDTH-1:0] axil_rx_queue_manager_rdata;
+wire [1:0]                 axil_rx_queue_manager_rresp;
+wire                       axil_rx_queue_manager_rvalid;
+wire                       axil_rx_queue_manager_rready;
+
+wire [AXIL_ADDR_WIDTH-1:0] axil_rx_cpl_queue_manager_awaddr;
+wire [2:0]                 axil_rx_cpl_queue_manager_awprot;
+wire                       axil_rx_cpl_queue_manager_awvalid;
+wire                       axil_rx_cpl_queue_manager_awready;
+wire [AXIL_DATA_WIDTH-1:0] axil_rx_cpl_queue_manager_wdata;
+wire [AXIL_STRB_WIDTH-1:0] axil_rx_cpl_queue_manager_wstrb;
+wire                       axil_rx_cpl_queue_manager_wvalid;
+wire                       axil_rx_cpl_queue_manager_wready;
+wire [1:0]                 axil_rx_cpl_queue_manager_bresp;
+wire                       axil_rx_cpl_queue_manager_bvalid;
+wire                       axil_rx_cpl_queue_manager_bready;
+wire [AXIL_ADDR_WIDTH-1:0] axil_rx_cpl_queue_manager_araddr;
+wire [2:0]                 axil_rx_cpl_queue_manager_arprot;
+wire                       axil_rx_cpl_queue_manager_arvalid;
+wire                       axil_rx_cpl_queue_manager_arready;
+wire [AXIL_DATA_WIDTH-1:0] axil_rx_cpl_queue_manager_rdata;
+wire [1:0]                 axil_rx_cpl_queue_manager_rresp;
+wire                       axil_rx_cpl_queue_manager_rvalid;
+wire                       axil_rx_cpl_queue_manager_rready;
+
+wire [PORTS*AXIL_ADDR_WIDTH-1:0] axil_port_awaddr;
+wire [PORTS*3-1:0]               axil_port_awprot;
+wire [PORTS-1:0]                 axil_port_awvalid;
+wire [PORTS-1:0]                 axil_port_awready;
+wire [PORTS*AXIL_DATA_WIDTH-1:0] axil_port_wdata;
+wire [PORTS*AXIL_STRB_WIDTH-1:0] axil_port_wstrb;
+wire [PORTS-1:0]                 axil_port_wvalid;
+wire [PORTS-1:0]                 axil_port_wready;
+wire [PORTS*2-1:0]               axil_port_bresp;
+wire [PORTS-1:0]                 axil_port_bvalid;
+wire [PORTS-1:0]                 axil_port_bready;
+wire [PORTS*AXIL_ADDR_WIDTH-1:0] axil_port_araddr;
+wire [PORTS*3-1:0]               axil_port_arprot;
+wire [PORTS-1:0]                 axil_port_arvalid;
+wire [PORTS-1:0]                 axil_port_arready;
+wire [PORTS*AXIL_DATA_WIDTH-1:0] axil_port_rdata;
+wire [PORTS*2-1:0]               axil_port_rresp;
+wire [PORTS-1:0]                 axil_port_rvalid;
+wire [PORTS-1:0]                 axil_port_rready;
+
+// DMA
+wire [PORTS*DMA_ADDR_WIDTH-1:0]    port_dma_read_desc_dma_addr;
+wire [PORTS*RAM_ADDR_WIDTH-1:0]    port_dma_read_desc_ram_addr;
+wire [PORTS*DMA_LEN_WIDTH-1:0]     port_dma_read_desc_len;
+wire [PORTS*DMA_TAG_WIDTH_INT-1:0] port_dma_read_desc_tag;
+wire [PORTS-1:0]                   port_dma_read_desc_valid;
+wire [PORTS-1:0]                   port_dma_read_desc_ready;
+
+wire [PORTS*DMA_TAG_WIDTH_INT-1:0] port_dma_read_desc_status_tag;
+wire [PORTS-1:0]                   port_dma_read_desc_status_valid;
+
+wire [PORTS*DMA_ADDR_WIDTH-1:0]    port_dma_write_desc_dma_addr;
+wire [PORTS*RAM_ADDR_WIDTH-1:0]    port_dma_write_desc_ram_addr;
+wire [PORTS*DMA_LEN_WIDTH-1:0]     port_dma_write_desc_len;
+wire [PORTS*DMA_TAG_WIDTH_INT-1:0] port_dma_write_desc_tag;
+wire [PORTS-1:0]                   port_dma_write_desc_valid;
+wire [PORTS-1:0]                   port_dma_write_desc_ready;
+
+wire [PORTS*DMA_TAG_WIDTH_INT-1:0] port_dma_write_desc_status_tag;
+wire [PORTS-1:0]                   port_dma_write_desc_status_valid;
+
+wire [PORTS*SEG_COUNT*SEG_BE_WIDTH-1:0]    port_dma_ram_wr_cmd_be;
+wire [PORTS*SEG_COUNT*SEG_ADDR_WIDTH-1:0]  port_dma_ram_wr_cmd_addr;
+wire [PORTS*SEG_COUNT*SEG_DATA_WIDTH-1:0]  port_dma_ram_wr_cmd_data;
+wire [PORTS*SEG_COUNT-1:0]                 port_dma_ram_wr_cmd_valid;
+wire [PORTS*SEG_COUNT-1:0]                 port_dma_ram_wr_cmd_ready;
+wire [PORTS*SEG_COUNT*SEG_ADDR_WIDTH-1:0]  port_dma_ram_rd_cmd_addr;
+wire [PORTS*SEG_COUNT-1:0]                 port_dma_ram_rd_cmd_valid;
+wire [PORTS*SEG_COUNT-1:0]                 port_dma_ram_rd_cmd_ready;
+wire [PORTS*SEG_COUNT*SEG_DATA_WIDTH-1:0]  port_dma_ram_rd_resp_data;
+wire [PORTS*SEG_COUNT-1:0]                 port_dma_ram_rd_resp_valid;
+wire [PORTS*SEG_COUNT-1:0]                 port_dma_ram_rd_resp_ready;
+
+// Queue management
+wire [CPL_QUEUE_INDEX_WIDTH-1:0]    event_enqueue_req_queue;
+wire [QUEUE_REQ_TAG_WIDTH-1:0]      event_enqueue_req_tag;
+wire                                event_enqueue_req_valid;
+wire                                event_enqueue_req_ready;
+
+wire [DMA_ADDR_WIDTH-1:0]           event_enqueue_resp_addr;
+wire [QUEUE_REQ_TAG_WIDTH-1:0]      event_enqueue_resp_tag;
+wire [QUEUE_OP_TAG_WIDTH-1:0]       event_enqueue_resp_op_tag;
+wire                                event_enqueue_resp_full;
+wire                                event_enqueue_resp_error;
+wire                                event_enqueue_resp_valid;
+wire                                event_enqueue_resp_ready;
+
+wire [QUEUE_OP_TAG_WIDTH-1:0]       event_enqueue_commit_op_tag;
+wire                                event_enqueue_commit_valid;
+wire                                event_enqueue_commit_ready;
+
+wire [QUEUE_INDEX_WIDTH-1:0]        tx_desc_dequeue_req_queue;
+wire [QUEUE_REQ_TAG_WIDTH-1:0]      tx_desc_dequeue_req_tag;
+wire                                tx_desc_dequeue_req_valid;
+wire                                tx_desc_dequeue_req_ready;
+
+wire [QUEUE_INDEX_WIDTH-1:0]        tx_desc_dequeue_resp_queue;
+wire [QUEUE_PTR_WIDTH-1:0]          tx_desc_dequeue_resp_ptr;
+wire [DMA_ADDR_WIDTH-1:0]           tx_desc_dequeue_resp_addr;
+wire [LOG_BLOCK_SIZE_WIDTH-1:0]     tx_desc_dequeue_resp_block_size;
+wire [CPL_QUEUE_INDEX_WIDTH-1:0]    tx_desc_dequeue_resp_cpl;
+wire [QUEUE_REQ_TAG_WIDTH-1:0]      tx_desc_dequeue_resp_tag;
+wire [QUEUE_OP_TAG_WIDTH-1:0]       tx_desc_dequeue_resp_op_tag;
+wire                                tx_desc_dequeue_resp_empty;
+wire                                tx_desc_dequeue_resp_error;
+wire                                tx_desc_dequeue_resp_valid;
+wire                                tx_desc_dequeue_resp_ready;
+
+wire [QUEUE_OP_TAG_WIDTH-1:0]       tx_desc_dequeue_commit_op_tag;
+wire                                tx_desc_dequeue_commit_valid;
+wire                                tx_desc_dequeue_commit_ready;
+
+wire [TX_QUEUE_INDEX_WIDTH-1:0]     tx_doorbell_queue;
+wire                                tx_doorbell_valid;
+
+wire [CPL_QUEUE_INDEX_WIDTH-1:0]    tx_cpl_enqueue_req_queue;
+wire [QUEUE_REQ_TAG_WIDTH-1:0]      tx_cpl_enqueue_req_tag;
+wire                                tx_cpl_enqueue_req_valid;
+wire                                tx_cpl_enqueue_req_ready;
+
+wire [DMA_ADDR_WIDTH-1:0]           tx_cpl_enqueue_resp_addr;
+wire [QUEUE_REQ_TAG_WIDTH-1:0]      tx_cpl_enqueue_resp_tag;
+wire [QUEUE_OP_TAG_WIDTH-1:0]       tx_cpl_enqueue_resp_op_tag;
+wire                                tx_cpl_enqueue_resp_full;
+wire                                tx_cpl_enqueue_resp_error;
+wire                                tx_cpl_enqueue_resp_valid;
+wire                                tx_cpl_enqueue_resp_ready;
+
+wire [QUEUE_OP_TAG_WIDTH-1:0]       tx_cpl_enqueue_commit_op_tag;
+wire                                tx_cpl_enqueue_commit_valid;
+wire                                tx_cpl_enqueue_commit_ready;
+
+wire [QUEUE_INDEX_WIDTH-1:0]        rx_desc_dequeue_req_queue;
+wire [QUEUE_REQ_TAG_WIDTH-1:0]      rx_desc_dequeue_req_tag;
+wire                                rx_desc_dequeue_req_valid;
+wire                                rx_desc_dequeue_req_ready;
+
+wire [QUEUE_INDEX_WIDTH-1:0]        rx_desc_dequeue_resp_queue;
+wire [QUEUE_PTR_WIDTH-1:0]          rx_desc_dequeue_resp_ptr;
+wire [DMA_ADDR_WIDTH-1:0]           rx_desc_dequeue_resp_addr;
+wire [LOG_BLOCK_SIZE_WIDTH-1:0]     rx_desc_dequeue_resp_block_size;
+wire [CPL_QUEUE_INDEX_WIDTH-1:0]    rx_desc_dequeue_resp_cpl;
+wire [QUEUE_REQ_TAG_WIDTH-1:0]      rx_desc_dequeue_resp_tag;
+wire [QUEUE_OP_TAG_WIDTH-1:0]       rx_desc_dequeue_resp_op_tag;
+wire                                rx_desc_dequeue_resp_empty;
+wire                                rx_desc_dequeue_resp_error;
+wire                                rx_desc_dequeue_resp_valid;
+wire                                rx_desc_dequeue_resp_ready;
+
+wire [QUEUE_OP_TAG_WIDTH-1:0]       rx_desc_dequeue_commit_op_tag;
+wire                                rx_desc_dequeue_commit_valid;
+wire                                rx_desc_dequeue_commit_ready;
+
+wire [CPL_QUEUE_INDEX_WIDTH-1:0]    rx_cpl_enqueue_req_queue;
+wire [QUEUE_REQ_TAG_WIDTH-1:0]      rx_cpl_enqueue_req_tag;
+wire                                rx_cpl_enqueue_req_valid;
+wire                                rx_cpl_enqueue_req_ready;
+
+wire [DMA_ADDR_WIDTH-1:0]           rx_cpl_enqueue_resp_addr;
+wire [QUEUE_REQ_TAG_WIDTH-1:0]      rx_cpl_enqueue_resp_tag;
+wire [QUEUE_OP_TAG_WIDTH-1:0]       rx_cpl_enqueue_resp_op_tag;
+wire                                rx_cpl_enqueue_resp_full;
+wire                                rx_cpl_enqueue_resp_error;
+wire                                rx_cpl_enqueue_resp_valid;
+wire                                rx_cpl_enqueue_resp_ready;
+
+wire [QUEUE_OP_TAG_WIDTH-1:0]       rx_cpl_enqueue_commit_op_tag;
+wire                                rx_cpl_enqueue_commit_valid;
+wire                                rx_cpl_enqueue_commit_ready;
+
+// descriptor and completion
+wire [0:0]                               desc_req_sel;
+wire [QUEUE_INDEX_WIDTH-1:0]             desc_req_queue;
+wire [DESC_REQ_TAG_WIDTH-1:0]            desc_req_tag;
+wire                                     desc_req_valid;
+wire                                     desc_req_ready;
+
+wire [QUEUE_INDEX_WIDTH-1:0]             desc_req_status_queue;
+wire [QUEUE_PTR_WIDTH-1:0]               desc_req_status_ptr;
+wire [CPL_QUEUE_INDEX_WIDTH-1:0]         desc_req_status_cpl;
+wire [DESC_REQ_TAG_WIDTH-1:0]            desc_req_status_tag;
+wire                                     desc_req_status_empty;
+wire                                     desc_req_status_error;
+wire                                     desc_req_status_valid;
+
+wire [AXIS_DESC_DATA_WIDTH-1:0]          axis_desc_tdata;
+wire [AXIS_DESC_KEEP_WIDTH-1:0]          axis_desc_tkeep;
+wire                                     axis_desc_tvalid;
+wire                                     axis_desc_tready;
+wire                                     axis_desc_tlast;
+wire [DESC_REQ_TAG_WIDTH-1:0]            axis_desc_tid;
+wire                                     axis_desc_tuser;
+
+wire [PORTS*1-1:0]                       port_desc_req_sel;
+wire [PORTS*QUEUE_INDEX_WIDTH-1:0]       port_desc_req_queue;
+wire [PORTS*PORT_DESC_REQ_TAG_WIDTH-1:0] port_desc_req_tag;
+wire [PORTS-1:0]                         port_desc_req_valid;
+wire [PORTS-1:0]                         port_desc_req_ready;
+
+wire [PORTS*QUEUE_INDEX_WIDTH-1:0]       port_desc_req_status_queue;
+wire [PORTS*QUEUE_PTR_WIDTH-1:0]         port_desc_req_status_ptr;
+wire [PORTS*CPL_QUEUE_INDEX_WIDTH-1:0]   port_desc_req_status_cpl;
+wire [PORTS*PORT_DESC_REQ_TAG_WIDTH-1:0] port_desc_req_status_tag;
+wire [PORTS-1:0]                         port_desc_req_status_empty;
+wire [PORTS-1:0]                         port_desc_req_status_error;
+wire [PORTS-1:0]                         port_desc_req_status_valid;
+
+wire [PORTS*AXIS_DESC_DATA_WIDTH-1:0]    port_axis_desc_tdata;
+wire [PORTS*AXIS_DESC_KEEP_WIDTH-1:0]    port_axis_desc_tkeep;
+wire [PORTS-1:0]                         port_axis_desc_tvalid;
+wire [PORTS-1:0]                         port_axis_desc_tready;
+wire [PORTS-1:0]                         port_axis_desc_tlast;
+wire [PORTS*PORT_DESC_REQ_TAG_WIDTH-1:0] port_axis_desc_tid;
+wire [PORTS-1:0]                         port_axis_desc_tuser;
+
+wire [1:0]                               cpl_req_sel;
+wire [QUEUE_INDEX_WIDTH-1:0]             cpl_req_queue;
+wire [DESC_REQ_TAG_WIDTH-1:0]            cpl_req_tag;
+wire [CPL_SIZE*8-1:0]                    cpl_req_data;
+wire                                     cpl_req_valid;
+wire                                     cpl_req_ready;
+
+wire [DESC_REQ_TAG_WIDTH-1:0]            cpl_req_status_tag;
+wire                                     cpl_req_status_full;
+wire                                     cpl_req_status_error;
+wire                                     cpl_req_status_valid;
+
+wire [1:0]                               event_cpl_req_sel = 2'd2;
+wire [QUEUE_INDEX_WIDTH-1:0]             event_cpl_req_queue;
+wire [PORT_DESC_REQ_TAG_WIDTH-1:0]       event_cpl_req_tag;
+wire [CPL_SIZE*8-1:0]                    event_cpl_req_data;
+wire                                     event_cpl_req_valid;
+wire                                     event_cpl_req_ready;
+
+wire [PORT_DESC_REQ_TAG_WIDTH-1:0]       event_cpl_req_status_tag;
+wire                                     event_cpl_req_status_full;
+wire                                     event_cpl_req_status_error;
+wire                                     event_cpl_req_status_valid;
+
+wire [PORTS*2-1:0]                       port_cpl_req_sel;
+wire [PORTS*QUEUE_INDEX_WIDTH-1:0]       port_cpl_req_queue;
+wire [PORTS*PORT_DESC_REQ_TAG_WIDTH-1:0] port_cpl_req_tag;
+wire [PORTS*CPL_SIZE*8-1:0]              port_cpl_req_data;
+wire [PORTS-1:0]                         port_cpl_req_valid;
+wire [PORTS-1:0]                         port_cpl_req_ready;
+
+wire [PORTS*PORT_DESC_REQ_TAG_WIDTH-1:0] port_cpl_req_status_tag;
+wire [PORTS-1:0]                         port_cpl_req_status_full;
+wire [PORTS-1:0]                         port_cpl_req_status_error;
+wire [PORTS-1:0]                         port_cpl_req_status_valid;
+
+// events
+wire [EVENT_QUEUE_INDEX_WIDTH-1:0]  axis_event_queue;
+wire [EVENT_TYPE_WIDTH-1:0]         axis_event_type;
+wire [EVENT_SOURCE_WIDTH-1:0]       axis_event_source;
+wire                                axis_event_valid;
+wire                                axis_event_ready;
+
+wire [EVENT_QUEUE_INDEX_WIDTH-1:0]  tx_fifo_event;
+wire [EVENT_TYPE_WIDTH-1:0]         tx_fifo_event_type;
+wire [EVENT_SOURCE_WIDTH-1:0]       tx_fifo_event_source;
+wire                                tx_fifo_event_valid;
+wire                                tx_fifo_event_ready;
+
+wire [EVENT_QUEUE_INDEX_WIDTH-1:0]  rx_fifo_event;
+wire [EVENT_TYPE_WIDTH-1:0]         rx_fifo_event_type;
+wire [EVENT_SOURCE_WIDTH-1:0]       rx_fifo_event_source;
+wire                                rx_fifo_event_valid;
+wire                                rx_fifo_event_ready;
+
+wire [EVENT_QUEUE_INDEX_WIDTH-1:0]  tx_event;
+wire [EVENT_TYPE_WIDTH-1:0]         tx_event_type = 16'd0;
+wire [EVENT_SOURCE_WIDTH-1:0]       tx_event_source;
+wire                                tx_event_valid;
+
+wire [EVENT_QUEUE_INDEX_WIDTH-1:0]  rx_event;
+wire [EVENT_TYPE_WIDTH-1:0]         rx_event_type = 16'd1;
+wire [EVENT_SOURCE_WIDTH-1:0]       rx_event_source;
+wire                                rx_event_valid;
+
+// interrupts
+wire [INT_WIDTH-1:0] event_int;
+wire event_int_valid;
+
+assign msi_irq = (event_int_valid << event_int);
+
+// Interface control registers
+reg axil_ctrl_awready_reg = 1'b0;
+reg axil_ctrl_wready_reg = 1'b0;
+reg [1:0] axil_ctrl_bresp_reg = 2'b00;
+reg axil_ctrl_bvalid_reg = 1'b0;
+reg axil_ctrl_arready_reg = 1'b0;
+reg [AXIL_DATA_WIDTH-1:0] axil_ctrl_rdata_reg = {AXIL_DATA_WIDTH{1'b0}};
+reg [1:0] axil_ctrl_rresp_reg = 2'b00;
+reg axil_ctrl_rvalid_reg = 1'b0;
+
+assign axil_ctrl_awready = axil_ctrl_awready_reg;
+assign axil_ctrl_wready = axil_ctrl_wready_reg;
+assign axil_ctrl_bresp = axil_ctrl_bresp_reg;
+assign axil_ctrl_bvalid = axil_ctrl_bvalid_reg;
+assign axil_ctrl_arready = axil_ctrl_arready_reg;
+assign axil_ctrl_rdata = axil_ctrl_rdata_reg;
+assign axil_ctrl_rresp = axil_ctrl_rresp_reg;
+assign axil_ctrl_rvalid = axil_ctrl_rvalid_reg;
+
+always @(posedge clk) begin
+    axil_ctrl_awready_reg <= 1'b0;
+    axil_ctrl_wready_reg <= 1'b0;
+    axil_ctrl_bresp_reg <= 2'b00;
+    axil_ctrl_bvalid_reg <= axil_ctrl_bvalid_reg && !axil_ctrl_bready;
+    axil_ctrl_arready_reg <= 1'b0;
+    axil_ctrl_rresp_reg <= 2'b00;
+    axil_ctrl_rvalid_reg <= axil_ctrl_rvalid_reg && !axil_ctrl_rready;
+
+    if (axil_ctrl_awvalid && axil_ctrl_wvalid && !axil_ctrl_bvalid) begin
+        // write operation
+        axil_ctrl_awready_reg <= 1'b1;
+        axil_ctrl_wready_reg <= 1'b1;
+        axil_ctrl_bresp_reg <= 2'b00;
+        axil_ctrl_bvalid_reg <= 1'b1;
+
+        // case ({axil_ctrl_awaddr[15:2], 2'b00})
+        //     16'h0000: 
+        // endcase
+    end
+
+    if (axil_ctrl_arvalid && !axil_ctrl_rvalid) begin
+        // read operation
+        axil_ctrl_arready_reg <= 1'b1;
+        axil_ctrl_rresp_reg <= 2'b00;
+        axil_ctrl_rvalid_reg <= 1'b1;
+        axil_ctrl_rdata_reg <= {AXIL_DATA_WIDTH{1'b0}};
+
+        case ({axil_ctrl_araddr[15:2], 2'b00})
+            16'h0000: axil_ctrl_rdata_reg <= 32'd0;                       // if_id
+            16'h0004: begin
+                // if_features
+                axil_ctrl_rdata_reg[0] <= RX_RSS_ENABLE && RX_HASH_ENABLE;
+                axil_ctrl_rdata_reg[4] <= PTP_TS_ENABLE;
+                axil_ctrl_rdata_reg[8] <= TX_CHECKSUM_ENABLE;
+                axil_ctrl_rdata_reg[9] <= RX_CHECKSUM_ENABLE;
+                axil_ctrl_rdata_reg[10] <= RX_HASH_ENABLE;
+            end
+            16'h0010: axil_ctrl_rdata_reg <= 2**EVENT_QUEUE_INDEX_WIDTH;  // event_queue_count
+            16'h0014: axil_ctrl_rdata_reg <= AXIL_EQM_BASE_ADDR;          // event_queue_offset
+            16'h0020: axil_ctrl_rdata_reg <= 2**TX_QUEUE_INDEX_WIDTH;     // tx_queue_count
+            16'h0024: axil_ctrl_rdata_reg <= AXIL_TX_QM_BASE_ADDR;        // tx_queue_offset
+            16'h0028: axil_ctrl_rdata_reg <= 2**TX_CPL_QUEUE_INDEX_WIDTH; // tx_cpl_queue_count
+            16'h002C: axil_ctrl_rdata_reg <= AXIL_TX_CQM_BASE_ADDR;       // tx_cpl_queue_offset
+            16'h0030: axil_ctrl_rdata_reg <= 2**RX_QUEUE_INDEX_WIDTH;     // rx_queue_count
+            16'h0034: axil_ctrl_rdata_reg <= AXIL_RX_QM_BASE_ADDR;        // rx_queue_offset
+            16'h0038: axil_ctrl_rdata_reg <= 2**RX_CPL_QUEUE_INDEX_WIDTH; // rx_cpl_queue_count
+            16'h003C: axil_ctrl_rdata_reg <= AXIL_RX_CQM_BASE_ADDR;       // rx_cpl_queue_offset
+            16'h0040: axil_ctrl_rdata_reg <= PORTS;                       // port_count
+            16'h0044: axil_ctrl_rdata_reg <= AXIL_PORT_BASE_ADDR;         // port_offset
+            16'h0048: axil_ctrl_rdata_reg <= 2**AXIL_PORT_ADDR_WIDTH;     // port_stride
+        endcase
+    end
+
+    if (rst) begin
+        axil_ctrl_awready_reg <= 1'b0;
+        axil_ctrl_wready_reg <= 1'b0;
+        axil_ctrl_bvalid_reg <= 1'b0;
+        axil_ctrl_arready_reg <= 1'b0;
+        axil_ctrl_rvalid_reg <= 1'b0;
+    end
+end
+
+// AXI lite interconnect
+parameter AXIL_S_COUNT = 1;
+parameter AXIL_M_COUNT = 7+PORTS;
+
+axil_interconnect #(
+    .DATA_WIDTH(AXIL_DATA_WIDTH),
+    .ADDR_WIDTH(AXIL_ADDR_WIDTH),
+    .STRB_WIDTH(AXIL_STRB_WIDTH),
+    .S_COUNT(AXIL_S_COUNT),
+    .M_COUNT(AXIL_M_COUNT),
+    .M_ADDR_WIDTH({{PORTS{w_32(AXIL_PORT_ADDR_WIDTH)}}, w_32(AXIL_RX_CQM_ADDR_WIDTH), w_32(AXIL_RX_QM_ADDR_WIDTH), w_32(AXIL_TX_CQM_ADDR_WIDTH), w_32(AXIL_TX_QM_ADDR_WIDTH), w_32(AXIL_EQM_ADDR_WIDTH), w_32(AXIL_CTRL_ADDR_WIDTH), w_32(AXIL_CSR_ADDR_WIDTH)}),
+    .M_CONNECT_READ({AXIL_M_COUNT{{AXIL_S_COUNT{1'b1}}}}),
+    .M_CONNECT_WRITE({AXIL_M_COUNT{{AXIL_S_COUNT{1'b1}}}})
+)
+axil_interconnect_inst (
+    .clk(clk),
+    .rst(rst),
+    .s_axil_awaddr(s_axil_awaddr),
+    .s_axil_awprot(s_axil_awprot),
+    .s_axil_awvalid(s_axil_awvalid),
+    .s_axil_awready(s_axil_awready),
+    .s_axil_wdata(s_axil_wdata),
+    .s_axil_wstrb(s_axil_wstrb),
+    .s_axil_wvalid(s_axil_wvalid),
+    .s_axil_wready(s_axil_wready),
+    .s_axil_bresp(s_axil_bresp),
+    .s_axil_bvalid(s_axil_bvalid),
+    .s_axil_bready(s_axil_bready),
+    .s_axil_araddr(s_axil_araddr),
+    .s_axil_arprot(s_axil_arprot),
+    .s_axil_arvalid(s_axil_arvalid),
+    .s_axil_arready(s_axil_arready),
+    .s_axil_rdata(s_axil_rdata),
+    .s_axil_rresp(s_axil_rresp),
+    .s_axil_rvalid(s_axil_rvalid),
+    .s_axil_rready(s_axil_rready),
+    .m_axil_awaddr( {axil_port_awaddr,  axil_rx_cpl_queue_manager_awaddr,  axil_rx_queue_manager_awaddr,  axil_tx_cpl_queue_manager_awaddr,  axil_tx_queue_manager_awaddr,  axil_event_queue_manager_awaddr,  axil_ctrl_awaddr,  m_axil_csr_awaddr}),
+    .m_axil_awprot( {axil_port_awprot,  axil_rx_cpl_queue_manager_awprot,  axil_rx_queue_manager_awprot,  axil_tx_cpl_queue_manager_awprot,  axil_tx_queue_manager_awprot,  axil_event_queue_manager_awprot,  axil_ctrl_awprot,  m_axil_csr_awprot}),
+    .m_axil_awvalid({axil_port_awvalid, axil_rx_cpl_queue_manager_awvalid, axil_rx_queue_manager_awvalid, axil_tx_cpl_queue_manager_awvalid, axil_tx_queue_manager_awvalid, axil_event_queue_manager_awvalid, axil_ctrl_awvalid, m_axil_csr_awvalid}),
+    .m_axil_awready({axil_port_awready, axil_rx_cpl_queue_manager_awready, axil_rx_queue_manager_awready, axil_tx_cpl_queue_manager_awready, axil_tx_queue_manager_awready, axil_event_queue_manager_awready, axil_ctrl_awready, m_axil_csr_awready}),
+    .m_axil_wdata(  {axil_port_wdata,   axil_rx_cpl_queue_manager_wdata,   axil_rx_queue_manager_wdata,   axil_tx_cpl_queue_manager_wdata,   axil_tx_queue_manager_wdata,   axil_event_queue_manager_wdata,   axil_ctrl_wdata,   m_axil_csr_wdata}),
+    .m_axil_wstrb(  {axil_port_wstrb,   axil_rx_cpl_queue_manager_wstrb,   axil_rx_queue_manager_wstrb,   axil_tx_cpl_queue_manager_wstrb,   axil_tx_queue_manager_wstrb,   axil_event_queue_manager_wstrb,   axil_ctrl_wstrb,   m_axil_csr_wstrb}),
+    .m_axil_wvalid( {axil_port_wvalid,  axil_rx_cpl_queue_manager_wvalid,  axil_rx_queue_manager_wvalid,  axil_tx_cpl_queue_manager_wvalid,  axil_tx_queue_manager_wvalid,  axil_event_queue_manager_wvalid,  axil_ctrl_wvalid,  m_axil_csr_wvalid}),
+    .m_axil_wready( {axil_port_wready,  axil_rx_cpl_queue_manager_wready,  axil_rx_queue_manager_wready,  axil_tx_cpl_queue_manager_wready,  axil_tx_queue_manager_wready,  axil_event_queue_manager_wready,  axil_ctrl_wready,  m_axil_csr_wready}),
+    .m_axil_bresp(  {axil_port_bresp,   axil_rx_cpl_queue_manager_bresp,   axil_rx_queue_manager_bresp,   axil_tx_cpl_queue_manager_bresp,   axil_tx_queue_manager_bresp,   axil_event_queue_manager_bresp,   axil_ctrl_bresp,   m_axil_csr_bresp}),
+    .m_axil_bvalid( {axil_port_bvalid,  axil_rx_cpl_queue_manager_bvalid,  axil_rx_queue_manager_bvalid,  axil_tx_cpl_queue_manager_bvalid,  axil_tx_queue_manager_bvalid,  axil_event_queue_manager_bvalid,  axil_ctrl_bvalid,  m_axil_csr_bvalid}),
+    .m_axil_bready( {axil_port_bready,  axil_rx_cpl_queue_manager_bready,  axil_rx_queue_manager_bready,  axil_tx_cpl_queue_manager_bready,  axil_tx_queue_manager_bready,  axil_event_queue_manager_bready,  axil_ctrl_bready,  m_axil_csr_bready}),
+    .m_axil_araddr( {axil_port_araddr,  axil_rx_cpl_queue_manager_araddr,  axil_rx_queue_manager_araddr,  axil_tx_cpl_queue_manager_araddr,  axil_tx_queue_manager_araddr,  axil_event_queue_manager_araddr,  axil_ctrl_araddr,  m_axil_csr_araddr}),
+    .m_axil_arprot( {axil_port_arprot,  axil_rx_cpl_queue_manager_arprot,  axil_rx_queue_manager_arprot,  axil_tx_cpl_queue_manager_arprot,  axil_tx_queue_manager_arprot,  axil_event_queue_manager_arprot,  axil_ctrl_arprot,  m_axil_csr_arprot}),
+    .m_axil_arvalid({axil_port_arvalid, axil_rx_cpl_queue_manager_arvalid, axil_rx_queue_manager_arvalid, axil_tx_cpl_queue_manager_arvalid, axil_tx_queue_manager_arvalid, axil_event_queue_manager_arvalid, axil_ctrl_arvalid, m_axil_csr_arvalid}),
+    .m_axil_arready({axil_port_arready, axil_rx_cpl_queue_manager_arready, axil_rx_queue_manager_arready, axil_tx_cpl_queue_manager_arready, axil_tx_queue_manager_arready, axil_event_queue_manager_arready, axil_ctrl_arready, m_axil_csr_arready}),
+    .m_axil_rdata(  {axil_port_rdata,   axil_rx_cpl_queue_manager_rdata,   axil_rx_queue_manager_rdata,   axil_tx_cpl_queue_manager_rdata,   axil_tx_queue_manager_rdata,   axil_event_queue_manager_rdata,   axil_ctrl_rdata,   m_axil_csr_rdata}),
+    .m_axil_rresp(  {axil_port_rresp,   axil_rx_cpl_queue_manager_rresp,   axil_rx_queue_manager_rresp,   axil_tx_cpl_queue_manager_rresp,   axil_tx_queue_manager_rresp,   axil_event_queue_manager_rresp,   axil_ctrl_rresp,   m_axil_csr_rresp}),
+    .m_axil_rvalid( {axil_port_rvalid,  axil_rx_cpl_queue_manager_rvalid,  axil_rx_queue_manager_rvalid,  axil_tx_cpl_queue_manager_rvalid,  axil_tx_queue_manager_rvalid,  axil_event_queue_manager_rvalid,  axil_ctrl_rvalid,  m_axil_csr_rvalid}),
+    .m_axil_rready( {axil_port_rready,  axil_rx_cpl_queue_manager_rready,  axil_rx_queue_manager_rready,  axil_tx_cpl_queue_manager_rready,  axil_tx_queue_manager_rready,  axil_event_queue_manager_rready,  axil_ctrl_rready,  m_axil_csr_rready})
+);
+
+// Queue managers
+
+cpl_queue_manager #(
+    .ADDR_WIDTH(DMA_ADDR_WIDTH),
+    .REQ_TAG_WIDTH(QUEUE_REQ_TAG_WIDTH),
+    .OP_TABLE_SIZE(EVENT_QUEUE_OP_TABLE_SIZE),
+    .OP_TAG_WIDTH(QUEUE_OP_TAG_WIDTH),
+    .QUEUE_INDEX_WIDTH(EVENT_QUEUE_INDEX_WIDTH),
+    .EVENT_WIDTH(INT_WIDTH),
+    .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+    .LOG_QUEUE_SIZE_WIDTH(LOG_QUEUE_SIZE_WIDTH),
+    .CPL_SIZE(EVENT_SIZE),
+    .PIPELINE(EVENT_QUEUE_PIPELINE),
+    .AXIL_DATA_WIDTH(AXIL_DATA_WIDTH),
+    .AXIL_ADDR_WIDTH(AXIL_EQM_ADDR_WIDTH),
+    .AXIL_STRB_WIDTH(AXIL_STRB_WIDTH)
+)
+event_queue_manager_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Enqueue request input
+     */
+    .s_axis_enqueue_req_queue(event_enqueue_req_queue),
+    .s_axis_enqueue_req_tag(event_enqueue_req_tag),
+    .s_axis_enqueue_req_valid(event_enqueue_req_valid),
+    .s_axis_enqueue_req_ready(event_enqueue_req_ready),
+
+    /*
+     * Enqueue response output
+     */
+    .m_axis_enqueue_resp_queue(),
+    .m_axis_enqueue_resp_ptr(),
+    .m_axis_enqueue_resp_addr(event_enqueue_resp_addr),
+    .m_axis_enqueue_resp_event(),
+    .m_axis_enqueue_resp_tag(event_enqueue_resp_tag),
+    .m_axis_enqueue_resp_op_tag(event_enqueue_resp_op_tag),
+    .m_axis_enqueue_resp_full(event_enqueue_resp_full),
+    .m_axis_enqueue_resp_error(event_enqueue_resp_error),
+    .m_axis_enqueue_resp_valid(event_enqueue_resp_valid),
+    .m_axis_enqueue_resp_ready(event_enqueue_resp_ready),
+
+    /*
+     * Enqueue commit input
+     */
+    .s_axis_enqueue_commit_op_tag(event_enqueue_commit_op_tag),
+    .s_axis_enqueue_commit_valid(event_enqueue_commit_valid),
+    .s_axis_enqueue_commit_ready(event_enqueue_commit_ready),
+
+    /*
+     * Event output
+     */
+    .m_axis_event(event_int),
+    .m_axis_event_source(),
+    .m_axis_event_valid(event_int_valid),
+
+    /*
+     * AXI-Lite slave interface
+     */
+    .s_axil_awaddr(axil_event_queue_manager_awaddr),
+    .s_axil_awprot(axil_event_queue_manager_awprot),
+    .s_axil_awvalid(axil_event_queue_manager_awvalid),
+    .s_axil_awready(axil_event_queue_manager_awready),
+    .s_axil_wdata(axil_event_queue_manager_wdata),
+    .s_axil_wstrb(axil_event_queue_manager_wstrb),
+    .s_axil_wvalid(axil_event_queue_manager_wvalid),
+    .s_axil_wready(axil_event_queue_manager_wready),
+    .s_axil_bresp(axil_event_queue_manager_bresp),
+    .s_axil_bvalid(axil_event_queue_manager_bvalid),
+    .s_axil_bready(axil_event_queue_manager_bready),
+    .s_axil_araddr(axil_event_queue_manager_araddr),
+    .s_axil_arprot(axil_event_queue_manager_arprot),
+    .s_axil_arvalid(axil_event_queue_manager_arvalid),
+    .s_axil_arready(axil_event_queue_manager_arready),
+    .s_axil_rdata(axil_event_queue_manager_rdata),
+    .s_axil_rresp(axil_event_queue_manager_rresp),
+    .s_axil_rvalid(axil_event_queue_manager_rvalid),
+    .s_axil_rready(axil_event_queue_manager_rready),
+
+    /*
+     * Configuration
+     */
+    .enable(1'b1)
+);
+
+queue_manager #(
+    .ADDR_WIDTH(DMA_ADDR_WIDTH),
+    .REQ_TAG_WIDTH(QUEUE_REQ_TAG_WIDTH),
+    .OP_TABLE_SIZE(TX_QUEUE_OP_TABLE_SIZE),
+    .OP_TAG_WIDTH(QUEUE_OP_TAG_WIDTH),
+    .QUEUE_INDEX_WIDTH(TX_QUEUE_INDEX_WIDTH),
+    .CPL_INDEX_WIDTH(TX_CPL_QUEUE_INDEX_WIDTH),
+    .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+    .LOG_QUEUE_SIZE_WIDTH(LOG_QUEUE_SIZE_WIDTH),
+    .DESC_SIZE(DESC_SIZE),
+    .LOG_BLOCK_SIZE_WIDTH(LOG_BLOCK_SIZE_WIDTH),
+    .PIPELINE(TX_QUEUE_PIPELINE),
+    .AXIL_DATA_WIDTH(AXIL_DATA_WIDTH),
+    .AXIL_ADDR_WIDTH(AXIL_TX_QM_ADDR_WIDTH),
+    .AXIL_STRB_WIDTH(AXIL_STRB_WIDTH)
+)
+tx_queue_manager_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Dequeue request input
+     */
+    .s_axis_dequeue_req_queue(tx_desc_dequeue_req_queue),
+    .s_axis_dequeue_req_tag(tx_desc_dequeue_req_tag),
+    .s_axis_dequeue_req_valid(tx_desc_dequeue_req_valid),
+    .s_axis_dequeue_req_ready(tx_desc_dequeue_req_ready),
+
+    /*
+     * Dequeue response output
+     */
+    .m_axis_dequeue_resp_queue(tx_desc_dequeue_resp_queue),
+    .m_axis_dequeue_resp_ptr(tx_desc_dequeue_resp_ptr),
+    .m_axis_dequeue_resp_addr(tx_desc_dequeue_resp_addr),
+    .m_axis_dequeue_resp_block_size(tx_desc_dequeue_resp_block_size),
+    .m_axis_dequeue_resp_cpl(tx_desc_dequeue_resp_cpl),
+    .m_axis_dequeue_resp_tag(tx_desc_dequeue_resp_tag),
+    .m_axis_dequeue_resp_op_tag(tx_desc_dequeue_resp_op_tag),
+    .m_axis_dequeue_resp_empty(tx_desc_dequeue_resp_empty),
+    .m_axis_dequeue_resp_error(tx_desc_dequeue_resp_error),
+    .m_axis_dequeue_resp_valid(tx_desc_dequeue_resp_valid),
+    .m_axis_dequeue_resp_ready(tx_desc_dequeue_resp_ready),
+
+    /*
+     * Dequeue commit input
+     */
+    .s_axis_dequeue_commit_op_tag(tx_desc_dequeue_commit_op_tag),
+    .s_axis_dequeue_commit_valid(tx_desc_dequeue_commit_valid),
+    .s_axis_dequeue_commit_ready(tx_desc_dequeue_commit_ready),
+
+    /*
+     * Doorbell output
+     */
+    .m_axis_doorbell_queue(tx_doorbell_queue),
+    .m_axis_doorbell_valid(tx_doorbell_valid),
+
+    /*
+     * AXI-Lite slave interface
+     */
+    .s_axil_awaddr(axil_tx_queue_manager_awaddr),
+    .s_axil_awprot(axil_tx_queue_manager_awprot),
+    .s_axil_awvalid(axil_tx_queue_manager_awvalid),
+    .s_axil_awready(axil_tx_queue_manager_awready),
+    .s_axil_wdata(axil_tx_queue_manager_wdata),
+    .s_axil_wstrb(axil_tx_queue_manager_wstrb),
+    .s_axil_wvalid(axil_tx_queue_manager_wvalid),
+    .s_axil_wready(axil_tx_queue_manager_wready),
+    .s_axil_bresp(axil_tx_queue_manager_bresp),
+    .s_axil_bvalid(axil_tx_queue_manager_bvalid),
+    .s_axil_bready(axil_tx_queue_manager_bready),
+    .s_axil_araddr(axil_tx_queue_manager_araddr),
+    .s_axil_arprot(axil_tx_queue_manager_arprot),
+    .s_axil_arvalid(axil_tx_queue_manager_arvalid),
+    .s_axil_arready(axil_tx_queue_manager_arready),
+    .s_axil_rdata(axil_tx_queue_manager_rdata),
+    .s_axil_rresp(axil_tx_queue_manager_rresp),
+    .s_axil_rvalid(axil_tx_queue_manager_rvalid),
+    .s_axil_rready(axil_tx_queue_manager_rready),
+
+    /*
+     * Configuration
+     */
+    .enable(1'b1)
+);
+
+cpl_queue_manager #(
+    .ADDR_WIDTH(DMA_ADDR_WIDTH),
+    .REQ_TAG_WIDTH(QUEUE_REQ_TAG_WIDTH),
+    .OP_TABLE_SIZE(TX_QUEUE_OP_TABLE_SIZE),
+    .OP_TAG_WIDTH(QUEUE_OP_TAG_WIDTH),
+    .QUEUE_INDEX_WIDTH(TX_CPL_QUEUE_INDEX_WIDTH),
+    .EVENT_WIDTH(EVENT_QUEUE_INDEX_WIDTH),
+    .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+    .LOG_QUEUE_SIZE_WIDTH(LOG_QUEUE_SIZE_WIDTH),
+    .CPL_SIZE(CPL_SIZE),
+    .PIPELINE(TX_CPL_QUEUE_PIPELINE),
+    .AXIL_DATA_WIDTH(AXIL_DATA_WIDTH),
+    .AXIL_ADDR_WIDTH(AXIL_TX_CQM_ADDR_WIDTH),
+    .AXIL_STRB_WIDTH(AXIL_STRB_WIDTH)
+)
+tx_cpl_queue_manager_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Enqueue request input
+     */
+    .s_axis_enqueue_req_queue(tx_cpl_enqueue_req_queue),
+    .s_axis_enqueue_req_tag(tx_cpl_enqueue_req_tag),
+    .s_axis_enqueue_req_valid(tx_cpl_enqueue_req_valid),
+    .s_axis_enqueue_req_ready(tx_cpl_enqueue_req_ready),
+
+    /*
+     * Enqueue response output
+     */
+    .m_axis_enqueue_resp_queue(),
+    .m_axis_enqueue_resp_ptr(),
+    .m_axis_enqueue_resp_addr(tx_cpl_enqueue_resp_addr),
+    .m_axis_enqueue_resp_event(),
+    .m_axis_enqueue_resp_tag(tx_cpl_enqueue_resp_tag),
+    .m_axis_enqueue_resp_op_tag(tx_cpl_enqueue_resp_op_tag),
+    .m_axis_enqueue_resp_full(tx_cpl_enqueue_resp_full),
+    .m_axis_enqueue_resp_error(tx_cpl_enqueue_resp_error),
+    .m_axis_enqueue_resp_valid(tx_cpl_enqueue_resp_valid),
+    .m_axis_enqueue_resp_ready(tx_cpl_enqueue_resp_ready),
+
+    /*
+     * Enqueue commit input
+     */
+    .s_axis_enqueue_commit_op_tag(tx_cpl_enqueue_commit_op_tag),
+    .s_axis_enqueue_commit_valid(tx_cpl_enqueue_commit_valid),
+    .s_axis_enqueue_commit_ready(tx_cpl_enqueue_commit_ready),
+
+    /*
+     * Event output
+     */
+    .m_axis_event(tx_event),
+    .m_axis_event_source(tx_event_source),
+    .m_axis_event_valid(tx_event_valid),
+
+    /*
+     * AXI-Lite slave interface
+     */
+    .s_axil_awaddr(axil_tx_cpl_queue_manager_awaddr),
+    .s_axil_awprot(axil_tx_cpl_queue_manager_awprot),
+    .s_axil_awvalid(axil_tx_cpl_queue_manager_awvalid),
+    .s_axil_awready(axil_tx_cpl_queue_manager_awready),
+    .s_axil_wdata(axil_tx_cpl_queue_manager_wdata),
+    .s_axil_wstrb(axil_tx_cpl_queue_manager_wstrb),
+    .s_axil_wvalid(axil_tx_cpl_queue_manager_wvalid),
+    .s_axil_wready(axil_tx_cpl_queue_manager_wready),
+    .s_axil_bresp(axil_tx_cpl_queue_manager_bresp),
+    .s_axil_bvalid(axil_tx_cpl_queue_manager_bvalid),
+    .s_axil_bready(axil_tx_cpl_queue_manager_bready),
+    .s_axil_araddr(axil_tx_cpl_queue_manager_araddr),
+    .s_axil_arprot(axil_tx_cpl_queue_manager_arprot),
+    .s_axil_arvalid(axil_tx_cpl_queue_manager_arvalid),
+    .s_axil_arready(axil_tx_cpl_queue_manager_arready),
+    .s_axil_rdata(axil_tx_cpl_queue_manager_rdata),
+    .s_axil_rresp(axil_tx_cpl_queue_manager_rresp),
+    .s_axil_rvalid(axil_tx_cpl_queue_manager_rvalid),
+    .s_axil_rready(axil_tx_cpl_queue_manager_rready),
+
+    /*
+     * Configuration
+     */
+    .enable(1'b1)
+);
+
+queue_manager #(
+    .ADDR_WIDTH(DMA_ADDR_WIDTH),
+    .REQ_TAG_WIDTH(QUEUE_REQ_TAG_WIDTH),
+    .OP_TABLE_SIZE(RX_QUEUE_OP_TABLE_SIZE),
+    .OP_TAG_WIDTH(QUEUE_OP_TAG_WIDTH),
+    .QUEUE_INDEX_WIDTH(RX_QUEUE_INDEX_WIDTH),
+    .CPL_INDEX_WIDTH(RX_CPL_QUEUE_INDEX_WIDTH),
+    .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+    .LOG_QUEUE_SIZE_WIDTH(LOG_QUEUE_SIZE_WIDTH),
+    .DESC_SIZE(DESC_SIZE),
+    .LOG_BLOCK_SIZE_WIDTH(LOG_BLOCK_SIZE_WIDTH),
+    .PIPELINE(RX_QUEUE_PIPELINE),
+    .AXIL_DATA_WIDTH(AXIL_DATA_WIDTH),
+    .AXIL_ADDR_WIDTH(AXIL_RX_QM_ADDR_WIDTH),
+    .AXIL_STRB_WIDTH(AXIL_STRB_WIDTH)
+)
+rx_queue_manager_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Dequeue request input
+     */
+    .s_axis_dequeue_req_queue(rx_desc_dequeue_req_queue),
+    .s_axis_dequeue_req_tag(rx_desc_dequeue_req_tag),
+    .s_axis_dequeue_req_valid(rx_desc_dequeue_req_valid),
+    .s_axis_dequeue_req_ready(rx_desc_dequeue_req_ready),
+
+    /*
+     * Dequeue response output
+     */
+    .m_axis_dequeue_resp_queue(rx_desc_dequeue_resp_queue),
+    .m_axis_dequeue_resp_ptr(rx_desc_dequeue_resp_ptr),
+    .m_axis_dequeue_resp_addr(rx_desc_dequeue_resp_addr),
+    .m_axis_dequeue_resp_block_size(rx_desc_dequeue_resp_block_size),
+    .m_axis_dequeue_resp_cpl(rx_desc_dequeue_resp_cpl),
+    .m_axis_dequeue_resp_tag(rx_desc_dequeue_resp_tag),
+    .m_axis_dequeue_resp_op_tag(rx_desc_dequeue_resp_op_tag),
+    .m_axis_dequeue_resp_empty(rx_desc_dequeue_resp_empty),
+    .m_axis_dequeue_resp_error(rx_desc_dequeue_resp_error),
+    .m_axis_dequeue_resp_valid(rx_desc_dequeue_resp_valid),
+    .m_axis_dequeue_resp_ready(rx_desc_dequeue_resp_ready),
+
+    /*
+     * Dequeue commit input
+     */
+    .s_axis_dequeue_commit_op_tag(rx_desc_dequeue_commit_op_tag),
+    .s_axis_dequeue_commit_valid(rx_desc_dequeue_commit_valid),
+    .s_axis_dequeue_commit_ready(rx_desc_dequeue_commit_ready),
+
+    /*
+     * Doorbell output
+     */
+    .m_axis_doorbell_queue(),
+    .m_axis_doorbell_valid(),
+
+    /*
+     * AXI-Lite slave interface
+     */
+    .s_axil_awaddr(axil_rx_queue_manager_awaddr),
+    .s_axil_awprot(axil_rx_queue_manager_awprot),
+    .s_axil_awvalid(axil_rx_queue_manager_awvalid),
+    .s_axil_awready(axil_rx_queue_manager_awready),
+    .s_axil_wdata(axil_rx_queue_manager_wdata),
+    .s_axil_wstrb(axil_rx_queue_manager_wstrb),
+    .s_axil_wvalid(axil_rx_queue_manager_wvalid),
+    .s_axil_wready(axil_rx_queue_manager_wready),
+    .s_axil_bresp(axil_rx_queue_manager_bresp),
+    .s_axil_bvalid(axil_rx_queue_manager_bvalid),
+    .s_axil_bready(axil_rx_queue_manager_bready),
+    .s_axil_araddr(axil_rx_queue_manager_araddr),
+    .s_axil_arprot(axil_rx_queue_manager_arprot),
+    .s_axil_arvalid(axil_rx_queue_manager_arvalid),
+    .s_axil_arready(axil_rx_queue_manager_arready),
+    .s_axil_rdata(axil_rx_queue_manager_rdata),
+    .s_axil_rresp(axil_rx_queue_manager_rresp),
+    .s_axil_rvalid(axil_rx_queue_manager_rvalid),
+    .s_axil_rready(axil_rx_queue_manager_rready),
+
+    /*
+     * Configuration
+     */
+    .enable(1'b1)
+);
+
+cpl_queue_manager #(
+    .ADDR_WIDTH(DMA_ADDR_WIDTH),
+    .REQ_TAG_WIDTH(QUEUE_REQ_TAG_WIDTH),
+    .OP_TABLE_SIZE(RX_QUEUE_OP_TABLE_SIZE),
+    .OP_TAG_WIDTH(QUEUE_OP_TAG_WIDTH),
+    .QUEUE_INDEX_WIDTH(RX_CPL_QUEUE_INDEX_WIDTH),
+    .EVENT_WIDTH(EVENT_QUEUE_INDEX_WIDTH),
+    .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+    .LOG_QUEUE_SIZE_WIDTH(LOG_QUEUE_SIZE_WIDTH),
+    .CPL_SIZE(CPL_SIZE),
+    .PIPELINE(RX_CPL_QUEUE_PIPELINE),
+    .AXIL_DATA_WIDTH(AXIL_DATA_WIDTH),
+    .AXIL_ADDR_WIDTH(AXIL_RX_CQM_ADDR_WIDTH),
+    .AXIL_STRB_WIDTH(AXIL_STRB_WIDTH)
+)
+rx_cpl_queue_manager_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Enqueue request input
+     */
+    .s_axis_enqueue_req_queue(rx_cpl_enqueue_req_queue),
+    .s_axis_enqueue_req_tag(rx_cpl_enqueue_req_tag),
+    .s_axis_enqueue_req_valid(rx_cpl_enqueue_req_valid),
+    .s_axis_enqueue_req_ready(rx_cpl_enqueue_req_ready),
+
+    /*
+     * Enqueue response output
+     */
+    .m_axis_enqueue_resp_queue(),
+    .m_axis_enqueue_resp_ptr(),
+    .m_axis_enqueue_resp_addr(rx_cpl_enqueue_resp_addr),
+    .m_axis_enqueue_resp_event(),
+    .m_axis_enqueue_resp_tag(rx_cpl_enqueue_resp_tag),
+    .m_axis_enqueue_resp_op_tag(rx_cpl_enqueue_resp_op_tag),
+    .m_axis_enqueue_resp_full(rx_cpl_enqueue_resp_full),
+    .m_axis_enqueue_resp_error(rx_cpl_enqueue_resp_error),
+    .m_axis_enqueue_resp_valid(rx_cpl_enqueue_resp_valid),
+    .m_axis_enqueue_resp_ready(rx_cpl_enqueue_resp_ready),
+
+    /*
+     * Enqueue commit input
+     */
+    .s_axis_enqueue_commit_op_tag(rx_cpl_enqueue_commit_op_tag),
+    .s_axis_enqueue_commit_valid(rx_cpl_enqueue_commit_valid),
+    .s_axis_enqueue_commit_ready(rx_cpl_enqueue_commit_ready),
+
+    /*
+     * Event output
+     */
+    .m_axis_event(rx_event),
+    .m_axis_event_source(rx_event_source),
+    .m_axis_event_valid(rx_event_valid),
+
+    /*
+     * AXI-Lite slave interface
+     */
+    .s_axil_awaddr(axil_rx_cpl_queue_manager_awaddr),
+    .s_axil_awprot(axil_rx_cpl_queue_manager_awprot),
+    .s_axil_awvalid(axil_rx_cpl_queue_manager_awvalid),
+    .s_axil_awready(axil_rx_cpl_queue_manager_awready),
+    .s_axil_wdata(axil_rx_cpl_queue_manager_wdata),
+    .s_axil_wstrb(axil_rx_cpl_queue_manager_wstrb),
+    .s_axil_wvalid(axil_rx_cpl_queue_manager_wvalid),
+    .s_axil_wready(axil_rx_cpl_queue_manager_wready),
+    .s_axil_bresp(axil_rx_cpl_queue_manager_bresp),
+    .s_axil_bvalid(axil_rx_cpl_queue_manager_bvalid),
+    .s_axil_bready(axil_rx_cpl_queue_manager_bready),
+    .s_axil_araddr(axil_rx_cpl_queue_manager_araddr),
+    .s_axil_arprot(axil_rx_cpl_queue_manager_arprot),
+    .s_axil_arvalid(axil_rx_cpl_queue_manager_arvalid),
+    .s_axil_arready(axil_rx_cpl_queue_manager_arready),
+    .s_axil_rdata(axil_rx_cpl_queue_manager_rdata),
+    .s_axil_rresp(axil_rx_cpl_queue_manager_rresp),
+    .s_axil_rvalid(axil_rx_cpl_queue_manager_rvalid),
+    .s_axil_rready(axil_rx_cpl_queue_manager_rready),
+
+    /*
+     * Configuration
+     */
+    .enable(1'b1)
+);
+
+if (PORTS > 1) begin
+
+    desc_op_mux #(
+        .PORTS(PORTS),
+        .SELECT_WIDTH(1),
+        .QUEUE_INDEX_WIDTH(QUEUE_INDEX_WIDTH),
+        .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+        .CPL_QUEUE_INDEX_WIDTH(CPL_QUEUE_INDEX_WIDTH),
+        .S_REQ_TAG_WIDTH(PORT_DESC_REQ_TAG_WIDTH),
+        .M_REQ_TAG_WIDTH(DESC_REQ_TAG_WIDTH),
+        .AXIS_DATA_WIDTH(AXIS_DESC_DATA_WIDTH),
+        .AXIS_KEEP_WIDTH(AXIS_DESC_KEEP_WIDTH),
+        .ARB_TYPE("ROUND_ROBIN"),
+        .LSB_PRIORITY("HIGH")
+    )
+    desc_op_mux_inst (
+        .clk(clk),
+        .rst(rst),
+
+        /*
+         * Descriptor request output
+         */
+        .m_axis_req_sel(desc_req_sel),
+        .m_axis_req_queue(desc_req_queue),
+        .m_axis_req_tag(desc_req_tag),
+        .m_axis_req_valid(desc_req_valid),
+        .m_axis_req_ready(desc_req_ready),
+
+        /*
+         * Descriptor request status input
+         */
+        .s_axis_req_status_queue(desc_req_status_queue),
+        .s_axis_req_status_ptr(desc_req_status_ptr),
+        .s_axis_req_status_cpl(desc_req_status_cpl),
+        .s_axis_req_status_tag(desc_req_status_tag),
+        .s_axis_req_status_empty(desc_req_status_empty),
+        .s_axis_req_status_error(desc_req_status_error),
+        .s_axis_req_status_valid(desc_req_status_valid),
+
+        /*
+         * Descriptor data input
+         */
+        .s_axis_desc_tdata(axis_desc_tdata),
+        .s_axis_desc_tkeep(axis_desc_tkeep),
+        .s_axis_desc_tvalid(axis_desc_tvalid),
+        .s_axis_desc_tready(axis_desc_tready),
+        .s_axis_desc_tlast(axis_desc_tlast),
+        .s_axis_desc_tid(axis_desc_tid),
+        .s_axis_desc_tuser(axis_desc_tuser),
+
+        /*
+         * Descriptor request input
+         */
+        .s_axis_req_sel(port_desc_req_sel),
+        .s_axis_req_queue(port_desc_req_queue),
+        .s_axis_req_tag(port_desc_req_tag),
+        .s_axis_req_valid(port_desc_req_valid),
+        .s_axis_req_ready(port_desc_req_ready),
+
+        /*
+         * Descriptor request status output
+         */
+        .m_axis_req_status_queue(port_desc_req_status_queue),
+        .m_axis_req_status_ptr(port_desc_req_status_ptr),
+        .m_axis_req_status_cpl(port_desc_req_status_cpl),
+        .m_axis_req_status_tag(port_desc_req_status_tag),
+        .m_axis_req_status_empty(port_desc_req_status_empty),
+        .m_axis_req_status_error(port_desc_req_status_error),
+        .m_axis_req_status_valid(port_desc_req_status_valid),
+
+        /*
+         * Descriptor data output
+         */
+        .m_axis_desc_tdata(port_axis_desc_tdata),
+        .m_axis_desc_tkeep(port_axis_desc_tkeep),
+        .m_axis_desc_tvalid(port_axis_desc_tvalid),
+        .m_axis_desc_tready(port_axis_desc_tready),
+        .m_axis_desc_tlast(port_axis_desc_tlast),
+        .m_axis_desc_tid(port_axis_desc_tid),
+        .m_axis_desc_tuser(port_axis_desc_tuser)
+    );
+
+end else begin
+
+    assign desc_req_sel = port_desc_req_sel;
+    assign desc_req_queue = port_desc_req_queue;
+    assign desc_req_tag = port_desc_req_tag;
+    assign desc_req_valid = port_desc_req_valid;
+    assign port_desc_req_ready = desc_req_ready;
+
+    assign port_desc_req_status_queue = desc_req_status_queue;
+    assign port_desc_req_status_ptr = desc_req_status_ptr;
+    assign port_desc_req_status_cpl = desc_req_status_cpl;
+    assign port_desc_req_status_tag = desc_req_status_tag;
+    assign port_desc_req_status_empty = desc_req_status_empty;
+    assign port_desc_req_status_error = desc_req_status_error;
+    assign port_desc_req_status_valid = desc_req_status_valid;
+
+    assign port_axis_desc_tdata = axis_desc_tdata;
+    assign port_axis_desc_tkeep = axis_desc_tkeep;
+    assign port_axis_desc_tvalid = axis_desc_tvalid;
+    assign axis_desc_tready = port_axis_desc_tready;
+    assign port_axis_desc_tlast = axis_desc_tlast;
+    assign port_axis_desc_tid = axis_desc_tid;
+    assign port_axis_desc_tuser = axis_desc_tuser;
+
+end
+
+desc_fetch #(
+    .PORTS(2),
+    .SELECT_WIDTH(1),
+    .SEG_COUNT(SEG_COUNT),
+    .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+    .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+    .SEG_BE_WIDTH(SEG_BE_WIDTH),
+    .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+    .RAM_PIPELINE(RAM_PIPELINE),
+    .AXIS_DATA_WIDTH(AXIS_DESC_DATA_WIDTH),
+    .AXIS_KEEP_WIDTH(AXIS_DESC_KEEP_WIDTH),
+    .DMA_ADDR_WIDTH(DMA_ADDR_WIDTH),
+    .DMA_LEN_WIDTH(DMA_LEN_WIDTH),
+    .DMA_TAG_WIDTH(DMA_TAG_WIDTH),
+    .REQ_TAG_WIDTH(DESC_REQ_TAG_WIDTH),
+    .QUEUE_REQ_TAG_WIDTH(QUEUE_REQ_TAG_WIDTH),
+    .QUEUE_OP_TAG_WIDTH(QUEUE_OP_TAG_WIDTH),
+    .QUEUE_INDEX_WIDTH(QUEUE_INDEX_WIDTH),
+    .CPL_QUEUE_INDEX_WIDTH(CPL_QUEUE_INDEX_WIDTH),
+    .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+    .DESC_SIZE(DESC_SIZE),
+    .LOG_BLOCK_SIZE_WIDTH(LOG_BLOCK_SIZE_WIDTH),
+    .DESC_TABLE_SIZE(32)
+)
+desc_fetch_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Descriptor read request input
+     */
+    .s_axis_req_sel(desc_req_sel),
+    .s_axis_req_queue(desc_req_queue),
+    .s_axis_req_tag(desc_req_tag),
+    .s_axis_req_valid(desc_req_valid),
+    .s_axis_req_ready(desc_req_ready),
+
+    /*
+     * Descriptor read request status output
+     */
+    .m_axis_req_status_queue(desc_req_status_queue),
+    .m_axis_req_status_ptr(desc_req_status_ptr),
+    .m_axis_req_status_cpl(desc_req_status_cpl),
+    .m_axis_req_status_tag(desc_req_status_tag),
+    .m_axis_req_status_empty(desc_req_status_empty),
+    .m_axis_req_status_error(desc_req_status_error),
+    .m_axis_req_status_valid(desc_req_status_valid),
+
+    /*
+     * Descriptor data output
+     */
+    .m_axis_desc_tdata(axis_desc_tdata),
+    .m_axis_desc_tkeep(axis_desc_tkeep),
+    .m_axis_desc_tvalid(axis_desc_tvalid),
+    .m_axis_desc_tready(axis_desc_tready),
+    .m_axis_desc_tlast(axis_desc_tlast),
+    .m_axis_desc_tid(axis_desc_tid),
+    .m_axis_desc_tuser(axis_desc_tuser),
+
+    /*
+     * Descriptor dequeue request output
+     */
+    .m_axis_desc_dequeue_req_queue({rx_desc_dequeue_req_queue, tx_desc_dequeue_req_queue}),
+    .m_axis_desc_dequeue_req_tag({rx_desc_dequeue_req_tag, tx_desc_dequeue_req_tag}),
+    .m_axis_desc_dequeue_req_valid({rx_desc_dequeue_req_valid, tx_desc_dequeue_req_valid}),
+    .m_axis_desc_dequeue_req_ready({rx_desc_dequeue_req_ready, tx_desc_dequeue_req_ready}),
+
+    /*
+     * Descriptor dequeue response input
+     */
+    .s_axis_desc_dequeue_resp_queue({rx_desc_dequeue_resp_queue, tx_desc_dequeue_resp_queue}),
+    .s_axis_desc_dequeue_resp_ptr({rx_desc_dequeue_resp_ptr, tx_desc_dequeue_resp_ptr}),
+    .s_axis_desc_dequeue_resp_addr({rx_desc_dequeue_resp_addr, tx_desc_dequeue_resp_addr}),
+    .s_axis_desc_dequeue_resp_block_size({rx_desc_dequeue_resp_block_size, tx_desc_dequeue_resp_block_size}),
+    .s_axis_desc_dequeue_resp_cpl({rx_desc_dequeue_resp_cpl, tx_desc_dequeue_resp_cpl}),
+    .s_axis_desc_dequeue_resp_tag({rx_desc_dequeue_resp_tag, tx_desc_dequeue_resp_tag}),
+    .s_axis_desc_dequeue_resp_op_tag({rx_desc_dequeue_resp_op_tag, tx_desc_dequeue_resp_op_tag}),
+    .s_axis_desc_dequeue_resp_empty({rx_desc_dequeue_resp_empty, tx_desc_dequeue_resp_empty}),
+    .s_axis_desc_dequeue_resp_error({rx_desc_dequeue_resp_error, tx_desc_dequeue_resp_error}),
+    .s_axis_desc_dequeue_resp_valid({rx_desc_dequeue_resp_valid, tx_desc_dequeue_resp_valid}),
+    .s_axis_desc_dequeue_resp_ready({rx_desc_dequeue_resp_ready, tx_desc_dequeue_resp_ready}),
+
+    /*
+     * Descriptor dequeue commit output
+     */
+    .m_axis_desc_dequeue_commit_op_tag({rx_desc_dequeue_commit_op_tag, tx_desc_dequeue_commit_op_tag}),
+    .m_axis_desc_dequeue_commit_valid({rx_desc_dequeue_commit_valid, tx_desc_dequeue_commit_valid}),
+    .m_axis_desc_dequeue_commit_ready({rx_desc_dequeue_commit_ready, tx_desc_dequeue_commit_ready}),
+
+    /*
+     * DMA read descriptor output
+     */
+    .m_axis_dma_read_desc_dma_addr(m_axis_ctrl_dma_read_desc_dma_addr),
+    .m_axis_dma_read_desc_ram_addr(m_axis_ctrl_dma_read_desc_ram_addr),
+    .m_axis_dma_read_desc_len(m_axis_ctrl_dma_read_desc_len),
+    .m_axis_dma_read_desc_tag(m_axis_ctrl_dma_read_desc_tag),
+    .m_axis_dma_read_desc_valid(m_axis_ctrl_dma_read_desc_valid),
+    .m_axis_dma_read_desc_ready(m_axis_ctrl_dma_read_desc_ready),
+
+    /*
+     * DMA read descriptor status input
+     */
+    .s_axis_dma_read_desc_status_tag(s_axis_ctrl_dma_read_desc_status_tag),
+    .s_axis_dma_read_desc_status_valid(s_axis_ctrl_dma_read_desc_status_valid),
+
+    /*
+     * RAM interface
+     */
+    .dma_ram_wr_cmd_be(ctrl_dma_ram_wr_cmd_be),
+    .dma_ram_wr_cmd_addr(ctrl_dma_ram_wr_cmd_addr),
+    .dma_ram_wr_cmd_data(ctrl_dma_ram_wr_cmd_data),
+    .dma_ram_wr_cmd_valid(ctrl_dma_ram_wr_cmd_valid),
+    .dma_ram_wr_cmd_ready(ctrl_dma_ram_wr_cmd_ready),
+
+    /*
+     * Configuration
+     */
+    .enable(1'b1)
+);
+
+assign m_axis_ctrl_dma_read_desc_ram_sel = 0;
+
+cpl_op_mux #(
+    .PORTS(PORTS+1),
+    .SELECT_WIDTH(2),
+    .QUEUE_INDEX_WIDTH(QUEUE_INDEX_WIDTH),
+    .S_REQ_TAG_WIDTH(PORT_DESC_REQ_TAG_WIDTH),
+    .M_REQ_TAG_WIDTH(DESC_REQ_TAG_WIDTH),
+    .CPL_SIZE(CPL_SIZE),
+    .ARB_TYPE("ROUND_ROBIN"),
+    .LSB_PRIORITY("HIGH")
+)
+cpl_op_mux_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Completion request output
+     */
+    .m_axis_req_sel(cpl_req_sel),
+    .m_axis_req_queue(cpl_req_queue),
+    .m_axis_req_tag(cpl_req_tag),
+    .m_axis_req_data(cpl_req_data),
+    .m_axis_req_valid(cpl_req_valid),
+    .m_axis_req_ready(cpl_req_ready),
+
+    /*
+     * Completion request status input
+     */
+    .s_axis_req_status_tag(cpl_req_status_tag),
+    .s_axis_req_status_full(cpl_req_status_full),
+    .s_axis_req_status_error(cpl_req_status_error),
+    .s_axis_req_status_valid(cpl_req_status_valid),
+
+    /*
+     * Completion request input
+     */
+    .s_axis_req_sel({port_cpl_req_sel, event_cpl_req_sel}),
+    .s_axis_req_queue({port_cpl_req_queue, event_cpl_req_queue}),
+    .s_axis_req_tag({port_cpl_req_tag, event_cpl_req_tag}),
+    .s_axis_req_data({port_cpl_req_data, event_cpl_req_data}),
+    .s_axis_req_valid({port_cpl_req_valid, event_cpl_req_valid}),
+    .s_axis_req_ready({port_cpl_req_ready, event_cpl_req_ready}),
+
+    /*
+     * Completion response output
+     */
+    .m_axis_req_status_tag({port_cpl_req_status_tag, event_cpl_req_status_tag}),
+    .m_axis_req_status_full({port_cpl_req_status_full, event_cpl_req_status_full}),
+    .m_axis_req_status_error({port_cpl_req_status_error, event_cpl_req_status_error}),
+    .m_axis_req_status_valid({port_cpl_req_status_valid, event_cpl_req_status_valid})
+);
+
+cpl_write #(
+    .PORTS(3),
+    .SELECT_WIDTH(2),
+    .SEG_COUNT(SEG_COUNT),
+    .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+    .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+    .SEG_BE_WIDTH(SEG_BE_WIDTH),
+    .RAM_PIPELINE(RAM_PIPELINE),
+    .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+    .DMA_ADDR_WIDTH(DMA_ADDR_WIDTH),
+    .DMA_LEN_WIDTH(DMA_LEN_WIDTH),
+    .DMA_TAG_WIDTH(DMA_TAG_WIDTH),
+    .REQ_TAG_WIDTH(DESC_REQ_TAG_WIDTH),
+    .QUEUE_REQ_TAG_WIDTH(QUEUE_REQ_TAG_WIDTH),
+    .QUEUE_OP_TAG_WIDTH(QUEUE_OP_TAG_WIDTH),
+    .QUEUE_INDEX_WIDTH(QUEUE_INDEX_WIDTH),
+    .CPL_SIZE(CPL_SIZE),
+    .DESC_TABLE_SIZE(32)
+)
+cpl_write_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Completion read request input
+     */
+    .s_axis_req_sel(cpl_req_sel),
+    .s_axis_req_queue(cpl_req_queue),
+    .s_axis_req_tag(cpl_req_tag),
+    .s_axis_req_data(cpl_req_data),
+    .s_axis_req_valid(cpl_req_valid),
+    .s_axis_req_ready(cpl_req_ready),
+
+    /*
+     * Completion read request status output
+     */
+    .m_axis_req_status_tag(cpl_req_status_tag),
+    .m_axis_req_status_full(cpl_req_status_full),
+    .m_axis_req_status_error(cpl_req_status_error),
+    .m_axis_req_status_valid(cpl_req_status_valid),
+
+    /*
+     * Completion enqueue request output
+     */
+    .m_axis_cpl_enqueue_req_queue({event_enqueue_req_queue, rx_cpl_enqueue_req_queue, tx_cpl_enqueue_req_queue}),
+    .m_axis_cpl_enqueue_req_tag({event_enqueue_req_tag, rx_cpl_enqueue_req_tag, tx_cpl_enqueue_req_tag}),
+    .m_axis_cpl_enqueue_req_valid({event_enqueue_req_valid, rx_cpl_enqueue_req_valid, tx_cpl_enqueue_req_valid}),
+    .m_axis_cpl_enqueue_req_ready({event_enqueue_req_ready, rx_cpl_enqueue_req_ready, tx_cpl_enqueue_req_ready}),
+
+    /*
+     * Completion enqueue response input
+     */
+    .s_axis_cpl_enqueue_resp_addr({event_enqueue_resp_addr, rx_cpl_enqueue_resp_addr, tx_cpl_enqueue_resp_addr}),
+    .s_axis_cpl_enqueue_resp_tag({event_enqueue_resp_tag, rx_cpl_enqueue_resp_tag, tx_cpl_enqueue_resp_tag}),
+    .s_axis_cpl_enqueue_resp_op_tag({event_enqueue_resp_op_tag, rx_cpl_enqueue_resp_op_tag, tx_cpl_enqueue_resp_op_tag}),
+    .s_axis_cpl_enqueue_resp_full({event_enqueue_resp_full, rx_cpl_enqueue_resp_full, tx_cpl_enqueue_resp_full}),
+    .s_axis_cpl_enqueue_resp_error({event_enqueue_resp_error, rx_cpl_enqueue_resp_error, tx_cpl_enqueue_resp_error}),
+    .s_axis_cpl_enqueue_resp_valid({event_enqueue_resp_valid, rx_cpl_enqueue_resp_valid, tx_cpl_enqueue_resp_valid}),
+    .s_axis_cpl_enqueue_resp_ready({event_enqueue_resp_ready, rx_cpl_enqueue_resp_ready, tx_cpl_enqueue_resp_ready}),
+
+    /*
+     * Completion enqueue commit output
+     */
+    .m_axis_cpl_enqueue_commit_op_tag({event_enqueue_commit_op_tag, rx_cpl_enqueue_commit_op_tag, tx_cpl_enqueue_commit_op_tag}),
+    .m_axis_cpl_enqueue_commit_valid({event_enqueue_commit_valid, rx_cpl_enqueue_commit_valid, tx_cpl_enqueue_commit_valid}),
+    .m_axis_cpl_enqueue_commit_ready({event_enqueue_commit_ready, rx_cpl_enqueue_commit_ready, tx_cpl_enqueue_commit_ready}),
+
+    /*
+     * DMA write descriptor output
+     */
+    .m_axis_dma_write_desc_dma_addr(m_axis_ctrl_dma_write_desc_dma_addr),
+    .m_axis_dma_write_desc_ram_addr(m_axis_ctrl_dma_write_desc_ram_addr),
+    .m_axis_dma_write_desc_len(m_axis_ctrl_dma_write_desc_len),
+    .m_axis_dma_write_desc_tag(m_axis_ctrl_dma_write_desc_tag),
+    .m_axis_dma_write_desc_valid(m_axis_ctrl_dma_write_desc_valid),
+    .m_axis_dma_write_desc_ready(m_axis_ctrl_dma_write_desc_ready),
+
+    /*
+     * DMA write descriptor status input
+     */
+    .s_axis_dma_write_desc_status_tag(s_axis_ctrl_dma_write_desc_status_tag),
+    .s_axis_dma_write_desc_status_valid(s_axis_ctrl_dma_write_desc_status_valid),
+
+    /*
+     * RAM interface
+     */
+    .dma_ram_rd_cmd_addr(ctrl_dma_ram_rd_cmd_addr),
+    .dma_ram_rd_cmd_valid(ctrl_dma_ram_rd_cmd_valid),
+    .dma_ram_rd_cmd_ready(ctrl_dma_ram_rd_cmd_ready),
+    .dma_ram_rd_resp_data(ctrl_dma_ram_rd_resp_data),
+    .dma_ram_rd_resp_valid(ctrl_dma_ram_rd_resp_valid),
+    .dma_ram_rd_resp_ready(ctrl_dma_ram_rd_resp_ready),
+
+    /*
+     * Configuration
+     */
+    .enable(1'b1)
+);
+
+assign m_axis_ctrl_dma_write_desc_ram_sel = 0;
+
+if (PORTS > 1) begin
+
+    dma_if_mux #
+    (
+        .PORTS(PORTS),
+        .SEG_COUNT(SEG_COUNT),
+        .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+        .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+        .SEG_BE_WIDTH(SEG_BE_WIDTH),
+        .S_RAM_SEL_WIDTH(0),
+        .M_RAM_SEL_WIDTH(RAM_SEL_WIDTH),
+        .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+        .DMA_ADDR_WIDTH(DMA_ADDR_WIDTH),
+        .LEN_WIDTH(DMA_LEN_WIDTH),
+        .S_TAG_WIDTH(DMA_TAG_WIDTH_INT),
+        .M_TAG_WIDTH(DMA_TAG_WIDTH),
+        .ARB_TYPE("ROUND_ROBIN"),
+        .LSB_PRIORITY("HIGH")
+    )
+    dma_if_mux_inst (
+        .clk(clk),
+        .rst(rst),
+
+        /*
+         * Read descriptor output (to DMA interface)
+         */
+        .m_axis_read_desc_dma_addr(m_axis_data_dma_read_desc_dma_addr),
+        .m_axis_read_desc_ram_sel(m_axis_data_dma_read_desc_ram_sel),
+        .m_axis_read_desc_ram_addr(m_axis_data_dma_read_desc_ram_addr),
+        .m_axis_read_desc_len(m_axis_data_dma_read_desc_len),
+        .m_axis_read_desc_tag(m_axis_data_dma_read_desc_tag),
+        .m_axis_read_desc_valid(m_axis_data_dma_read_desc_valid),
+        .m_axis_read_desc_ready(m_axis_data_dma_read_desc_ready),
+
+        /*
+         * Read descriptor status input (from DMA interface)
+         */
+        .s_axis_read_desc_status_tag(s_axis_data_dma_read_desc_status_tag),
+        .s_axis_read_desc_status_valid(s_axis_data_dma_read_desc_status_valid),
+
+        /*
+         * Read descriptor input
+         */
+        .s_axis_read_desc_dma_addr(port_dma_read_desc_dma_addr),
+        .s_axis_read_desc_ram_sel(0),
+        .s_axis_read_desc_ram_addr(port_dma_read_desc_ram_addr),
+        .s_axis_read_desc_len(port_dma_read_desc_len),
+        .s_axis_read_desc_tag(port_dma_read_desc_tag),
+        .s_axis_read_desc_valid(port_dma_read_desc_valid),
+        .s_axis_read_desc_ready(port_dma_read_desc_ready),
+
+        /*
+         * Read descriptor status output
+         */
+        .m_axis_read_desc_status_tag(port_dma_read_desc_status_tag),
+        .m_axis_read_desc_status_valid(port_dma_read_desc_status_valid),
+
+        /*
+         * Write descriptor output (to DMA interface)
+         */
+        .m_axis_write_desc_dma_addr(m_axis_data_dma_write_desc_dma_addr),
+        .m_axis_write_desc_ram_sel(m_axis_data_dma_write_desc_ram_sel),
+        .m_axis_write_desc_ram_addr(m_axis_data_dma_write_desc_ram_addr),
+        .m_axis_write_desc_len(m_axis_data_dma_write_desc_len),
+        .m_axis_write_desc_tag(m_axis_data_dma_write_desc_tag),
+        .m_axis_write_desc_valid(m_axis_data_dma_write_desc_valid),
+        .m_axis_write_desc_ready(m_axis_data_dma_write_desc_ready),
+
+        /*
+         * Write descriptor status input (from DMA interface)
+         */
+        .s_axis_write_desc_status_tag(s_axis_data_dma_write_desc_status_tag),
+        .s_axis_write_desc_status_valid(s_axis_data_dma_write_desc_status_valid),
+
+        /*
+         * Write descriptor input
+         */
+        .s_axis_write_desc_dma_addr(port_dma_write_desc_dma_addr),
+        .s_axis_write_desc_ram_sel(0),
+        .s_axis_write_desc_ram_addr(port_dma_write_desc_ram_addr),
+        .s_axis_write_desc_len(port_dma_write_desc_len),
+        .s_axis_write_desc_tag(port_dma_write_desc_tag),
+        .s_axis_write_desc_valid(port_dma_write_desc_valid),
+        .s_axis_write_desc_ready(port_dma_write_desc_ready),
+
+        /*
+         * Write descriptor status output
+         */
+        .m_axis_write_desc_status_tag(port_dma_write_desc_status_tag),
+        .m_axis_write_desc_status_valid(port_dma_write_desc_status_valid),
+
+        /*
+         * RAM interface (from DMA interface)
+         */
+        .if_ram_wr_cmd_sel(data_dma_ram_wr_cmd_sel),
+        .if_ram_wr_cmd_be(data_dma_ram_wr_cmd_be),
+        .if_ram_wr_cmd_addr(data_dma_ram_wr_cmd_addr),
+        .if_ram_wr_cmd_data(data_dma_ram_wr_cmd_data),
+        .if_ram_wr_cmd_valid(data_dma_ram_wr_cmd_valid),
+        .if_ram_wr_cmd_ready(data_dma_ram_wr_cmd_ready),
+        .if_ram_rd_cmd_sel(data_dma_ram_rd_cmd_sel),
+        .if_ram_rd_cmd_addr(data_dma_ram_rd_cmd_addr),
+        .if_ram_rd_cmd_valid(data_dma_ram_rd_cmd_valid),
+        .if_ram_rd_cmd_ready(data_dma_ram_rd_cmd_ready),
+        .if_ram_rd_resp_data(data_dma_ram_rd_resp_data),
+        .if_ram_rd_resp_valid(data_dma_ram_rd_resp_valid),
+        .if_ram_rd_resp_ready(data_dma_ram_rd_resp_ready),
+
+        /*
+         * RAM interface
+         */
+        .ram_wr_cmd_sel(),
+        .ram_wr_cmd_be(port_dma_ram_wr_cmd_be),
+        .ram_wr_cmd_addr(port_dma_ram_wr_cmd_addr),
+        .ram_wr_cmd_data(port_dma_ram_wr_cmd_data),
+        .ram_wr_cmd_valid(port_dma_ram_wr_cmd_valid),
+        .ram_wr_cmd_ready(port_dma_ram_wr_cmd_ready),
+        .ram_rd_cmd_sel(),
+        .ram_rd_cmd_addr(port_dma_ram_rd_cmd_addr),
+        .ram_rd_cmd_valid(port_dma_ram_rd_cmd_valid),
+        .ram_rd_cmd_ready(port_dma_ram_rd_cmd_ready),
+        .ram_rd_resp_data(port_dma_ram_rd_resp_data),
+        .ram_rd_resp_valid(port_dma_ram_rd_resp_valid),
+        .ram_rd_resp_ready(port_dma_ram_rd_resp_ready)
+    );
+
+end else begin
+
+    assign m_axis_data_dma_read_desc_dma_addr = port_dma_read_desc_dma_addr;
+    assign m_axis_data_dma_read_desc_ram_sel = 0;
+    assign m_axis_data_dma_read_desc_ram_addr = port_dma_read_desc_ram_addr;
+    assign m_axis_data_dma_read_desc_len = port_dma_read_desc_len;
+    assign m_axis_data_dma_read_desc_tag = port_dma_read_desc_tag;
+    assign m_axis_data_dma_read_desc_valid = port_dma_read_desc_valid;
+    assign port_dma_read_desc_ready = m_axis_data_dma_read_desc_ready;
+
+    assign port_dma_read_desc_status_tag = s_axis_data_dma_read_desc_status_tag;
+    assign port_dma_read_desc_status_valid = s_axis_data_dma_read_desc_status_valid;
+
+    assign m_axis_data_dma_write_desc_dma_addr = port_dma_write_desc_dma_addr;
+    assign m_axis_data_dma_write_desc_ram_sel = 0;
+    assign m_axis_data_dma_write_desc_ram_addr = port_dma_write_desc_ram_addr;
+    assign m_axis_data_dma_write_desc_len = port_dma_write_desc_len;
+    assign m_axis_data_dma_write_desc_tag = port_dma_write_desc_tag;
+    assign m_axis_data_dma_write_desc_valid = port_dma_write_desc_valid;
+    assign port_dma_write_desc_ready = m_axis_data_dma_write_desc_ready;
+
+    assign port_dma_write_desc_status_tag = s_axis_data_dma_write_desc_status_tag;
+    assign port_dma_write_desc_status_valid = s_axis_data_dma_write_desc_status_valid;
+
+    assign port_dma_ram_wr_cmd_be = data_dma_ram_wr_cmd_be;
+    assign port_dma_ram_wr_cmd_addr = data_dma_ram_wr_cmd_addr;
+    assign port_dma_ram_wr_cmd_data = data_dma_ram_wr_cmd_data;
+    assign port_dma_ram_wr_cmd_valid = data_dma_ram_wr_cmd_valid;
+    assign data_dma_ram_wr_cmd_ready = port_dma_ram_wr_cmd_ready;
+    assign port_dma_ram_rd_cmd_addr = data_dma_ram_rd_cmd_addr;
+    assign port_dma_ram_rd_cmd_valid = data_dma_ram_rd_cmd_valid;
+    assign data_dma_ram_rd_cmd_ready = port_dma_ram_rd_cmd_ready;
+    assign data_dma_ram_rd_resp_data = port_dma_ram_rd_resp_data;
+    assign data_dma_ram_rd_resp_valid = port_dma_ram_rd_resp_valid;
+    assign port_dma_ram_rd_resp_ready = data_dma_ram_rd_resp_ready;
+
+end
+
+event_mux #(
+    .PORTS(2),
+    .QUEUE_INDEX_WIDTH(EVENT_QUEUE_INDEX_WIDTH),
+    .EVENT_TYPE_WIDTH(EVENT_TYPE_WIDTH),
+    .EVENT_SOURCE_WIDTH(EVENT_SOURCE_WIDTH),
+    .ARB_TYPE("ROUND_ROBIN"),
+    .LSB_PRIORITY("HIGH")
+)
+event_mux_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Event output
+     */
+    .m_axis_event_queue(axis_event_queue),
+    .m_axis_event_type(axis_event_type),
+    .m_axis_event_source(axis_event_source),
+    .m_axis_event_valid(axis_event_valid),
+    .m_axis_event_ready(axis_event_ready),
+
+    /*
+     * Event input
+     */
+    .s_axis_event_queue({rx_fifo_event, tx_fifo_event}),
+    .s_axis_event_type({rx_fifo_event_type, tx_fifo_event_type}),
+    .s_axis_event_source({rx_fifo_event_source, tx_fifo_event_source}),
+    .s_axis_event_valid({rx_fifo_event_valid, tx_fifo_event_valid}),
+    .s_axis_event_ready({rx_fifo_event_ready, tx_fifo_event_ready})
+);
+
+assign event_cpl_req_queue = axis_event_queue;
+assign event_cpl_req_tag = 0;
+assign event_cpl_req_data[15:0] = axis_event_type;
+assign event_cpl_req_data[31:16] = axis_event_source;
+assign event_cpl_req_data[255:32] = 0;
+assign event_cpl_req_valid = axis_event_valid;
+assign axis_event_ready = event_cpl_req_ready;
+
+axis_fifo #(
+    .DEPTH(16),
+    .DATA_WIDTH(EVENT_SOURCE_WIDTH+EVENT_TYPE_WIDTH+EVENT_QUEUE_INDEX_WIDTH),
+    .KEEP_ENABLE(0),
+    .LAST_ENABLE(0),
+    .ID_ENABLE(0),
+    .DEST_ENABLE(0),
+    .USER_ENABLE(0),
+    .FRAME_FIFO(0)
+)
+tx_event_fifo (
+    .clk(clk),
+    .rst(rst),
+
+    // AXI input
+    .s_axis_tdata({tx_event_source, tx_event_type, tx_event}),
+    .s_axis_tkeep(0),
+    .s_axis_tvalid(tx_event_valid),
+    .s_axis_tready(),
+    .s_axis_tlast(0),
+    .s_axis_tid(0),
+    .s_axis_tdest(0),
+    .s_axis_tuser(0),
+
+    // AXI output
+    .m_axis_tdata({tx_fifo_event_source, tx_fifo_event_type, tx_fifo_event}),
+    .m_axis_tkeep(),
+    .m_axis_tvalid(tx_fifo_event_valid),
+    .m_axis_tready(tx_fifo_event_ready),
+    .m_axis_tlast(),
+    .m_axis_tid(),
+    .m_axis_tdest(),
+    .m_axis_tuser(),
+
+    // Status
+    .status_overflow(),
+    .status_bad_frame(),
+    .status_good_frame()
+);
+
+axis_fifo #(
+    .DEPTH(16),
+    .DATA_WIDTH(EVENT_SOURCE_WIDTH+EVENT_TYPE_WIDTH+EVENT_QUEUE_INDEX_WIDTH),
+    .KEEP_ENABLE(0),
+    .LAST_ENABLE(0),
+    .ID_ENABLE(0),
+    .DEST_ENABLE(0),
+    .USER_ENABLE(0),
+    .FRAME_FIFO(0)
+)
+rx_event_fifo (
+    .clk(clk),
+    .rst(rst),
+
+    // AXI input
+    .s_axis_tdata({rx_event_source, rx_event_type, rx_event}),
+    .s_axis_tkeep(0),
+    .s_axis_tvalid(rx_event_valid),
+    .s_axis_tready(),
+    .s_axis_tlast(0),
+    .s_axis_tid(0),
+    .s_axis_tdest(0),
+    .s_axis_tuser(0),
+
+    // AXI output
+    .m_axis_tdata({rx_fifo_event_source, rx_fifo_event_type, rx_fifo_event}),
+    .m_axis_tkeep(),
+    .m_axis_tvalid(rx_fifo_event_valid),
+    .m_axis_tready(rx_fifo_event_ready),
+    .m_axis_tlast(),
+    .m_axis_tid(),
+    .m_axis_tdest(),
+    .m_axis_tuser(),
+
+    // Status
+    .status_overflow(),
+    .status_bad_frame(),
+    .status_good_frame()
+);
+
+generate
+    genvar n;
+
+    for (n = 0; n < PORTS; n = n + 1) begin : port
+
+        assign port_cpl_req_sel[n*2+1 +: 1] = 1'b0;
+
+        port #(
+            .DMA_ADDR_WIDTH(DMA_ADDR_WIDTH),
+            .DMA_LEN_WIDTH(DMA_LEN_WIDTH),
+            .DMA_TAG_WIDTH(DMA_TAG_WIDTH_INT),
+            .REQ_TAG_WIDTH(REQ_TAG_WIDTH),
+            .DESC_REQ_TAG_WIDTH(PORT_DESC_REQ_TAG_WIDTH),
+            .QUEUE_REQ_TAG_WIDTH(QUEUE_REQ_TAG_WIDTH),
+            .QUEUE_OP_TAG_WIDTH(QUEUE_OP_TAG_WIDTH),
+            .TX_QUEUE_INDEX_WIDTH(TX_QUEUE_INDEX_WIDTH),
+            .RX_QUEUE_INDEX_WIDTH(RX_QUEUE_INDEX_WIDTH),
+            .QUEUE_INDEX_WIDTH(QUEUE_INDEX_WIDTH),
+            .TX_CPL_QUEUE_INDEX_WIDTH(TX_CPL_QUEUE_INDEX_WIDTH),
+            .RX_CPL_QUEUE_INDEX_WIDTH(RX_CPL_QUEUE_INDEX_WIDTH),
+            .CPL_QUEUE_INDEX_WIDTH(CPL_QUEUE_INDEX_WIDTH),
+            .TX_DESC_TABLE_SIZE(TX_DESC_TABLE_SIZE),
+            .TX_PKT_TABLE_SIZE(TX_PKT_TABLE_SIZE),
+            .RX_DESC_TABLE_SIZE(RX_DESC_TABLE_SIZE),
+            .RX_PKT_TABLE_SIZE(RX_PKT_TABLE_SIZE),
+            .DESC_TABLE_DMA_OP_COUNT_WIDTH(((2**LOG_BLOCK_SIZE_WIDTH)-1)+1),
+            .TX_MAX_DESC_REQ(TX_MAX_DESC_REQ),
+            .TX_DESC_FIFO_SIZE(TX_MAX_DESC_REQ*(2**((2**LOG_BLOCK_SIZE_WIDTH)-1))),
+            .RX_MAX_DESC_REQ(RX_MAX_DESC_REQ),
+            .RX_DESC_FIFO_SIZE(RX_MAX_DESC_REQ*(2**((2**LOG_BLOCK_SIZE_WIDTH)-1))),
+            .TX_SCHEDULER(TX_SCHEDULER),
+            .TX_SCHEDULER_OP_TABLE_SIZE(TX_SCHEDULER_OP_TABLE_SIZE),
+            .TX_SCHEDULER_PIPELINE(TX_SCHEDULER_PIPELINE),
+            .TDMA_INDEX_WIDTH(TDMA_INDEX_WIDTH),
+            .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+            .PTP_TS_ENABLE(PTP_TS_ENABLE),
+            .PTP_TS_WIDTH(PTP_TS_WIDTH),
+            .TX_CHECKSUM_ENABLE(TX_CHECKSUM_ENABLE),
+            .RX_RSS_ENABLE(RX_RSS_ENABLE),
+            .RX_HASH_ENABLE(RX_HASH_ENABLE),
+            .RX_CHECKSUM_ENABLE(RX_CHECKSUM_ENABLE),
+            .AXIL_DATA_WIDTH(AXIL_DATA_WIDTH),
+            .AXIL_ADDR_WIDTH(AXIL_PORT_ADDR_WIDTH),
+            .AXIL_STRB_WIDTH(AXIL_STRB_WIDTH),
+            .SEG_COUNT(SEG_COUNT),
+            .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+            .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+            .SEG_BE_WIDTH(SEG_BE_WIDTH),
+            .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+            .RAM_PIPELINE(RAM_PIPELINE),
+            .AXIS_DATA_WIDTH(AXIS_DATA_WIDTH),
+            .AXIS_KEEP_WIDTH(AXIS_KEEP_WIDTH),
+            .MAX_TX_SIZE(MAX_TX_SIZE),
+            .MAX_RX_SIZE(MAX_RX_SIZE),
+            .DESC_SIZE(DESC_SIZE),
+            .CPL_SIZE(CPL_SIZE),
+            .AXIS_DESC_DATA_WIDTH(AXIS_DESC_DATA_WIDTH),
+            .AXIS_DESC_KEEP_WIDTH(AXIS_DESC_KEEP_WIDTH),
+            .TX_RAM_SIZE(TX_RAM_SIZE),
+            .RX_RAM_SIZE(RX_RAM_SIZE),
+            .RMT_TX_ENABLE(RMT_TX_ENABLE)
+        )
+        port_inst (
+            .clk(clk),
+            .rst(rst),
+
+            /*
+             * Descriptor request output
+             */
+            .m_axis_desc_req_sel(port_desc_req_sel[n*1 +: 1]),
+            .m_axis_desc_req_queue(port_desc_req_queue[n*QUEUE_INDEX_WIDTH +: QUEUE_INDEX_WIDTH]),
+            .m_axis_desc_req_tag(port_desc_req_tag[n*PORT_DESC_REQ_TAG_WIDTH +: PORT_DESC_REQ_TAG_WIDTH]),
+            .m_axis_desc_req_valid(port_desc_req_valid[n +: 1]),
+            .m_axis_desc_req_ready(port_desc_req_ready[n +: 1]),
+
+            /*
+             * Descriptor response input
+             */
+            .s_axis_desc_req_status_queue(port_desc_req_status_queue[n*QUEUE_INDEX_WIDTH +: QUEUE_INDEX_WIDTH]),
+            .s_axis_desc_req_status_ptr(port_desc_req_status_ptr[n*QUEUE_PTR_WIDTH +: QUEUE_PTR_WIDTH]),
+            .s_axis_desc_req_status_cpl(port_desc_req_status_cpl[n*CPL_QUEUE_INDEX_WIDTH +: CPL_QUEUE_INDEX_WIDTH]),
+            .s_axis_desc_req_status_tag(port_desc_req_status_tag[n*PORT_DESC_REQ_TAG_WIDTH +: PORT_DESC_REQ_TAG_WIDTH]),
+            .s_axis_desc_req_status_empty(port_desc_req_status_empty[n +: 1]),
+            .s_axis_desc_req_status_error(port_desc_req_status_error[n +: 1]),
+            .s_axis_desc_req_status_valid(port_desc_req_status_valid[n +: 1]),
+
+            /*
+             * Descriptor data input
+             */
+            .s_axis_desc_tdata(port_axis_desc_tdata[n*AXIS_DESC_DATA_WIDTH +: AXIS_DESC_DATA_WIDTH]),
+            .s_axis_desc_tkeep(port_axis_desc_tkeep[n*AXIS_DESC_KEEP_WIDTH +: AXIS_DESC_KEEP_WIDTH]),
+            .s_axis_desc_tvalid(port_axis_desc_tvalid[n +: 1]),
+            .s_axis_desc_tready(port_axis_desc_tready[n +: 1]),
+            .s_axis_desc_tlast(port_axis_desc_tlast[n +: 1]),
+            .s_axis_desc_tid(port_axis_desc_tid[n*PORT_DESC_REQ_TAG_WIDTH +: PORT_DESC_REQ_TAG_WIDTH]),
+            .s_axis_desc_tuser(port_axis_desc_tuser[n +: 1]),
+
+            /*
+             * Completion request output
+             */
+            .m_axis_cpl_req_sel(port_cpl_req_sel[n*2 +: 1]),
+            .m_axis_cpl_req_queue(port_cpl_req_queue[n*QUEUE_INDEX_WIDTH +: QUEUE_INDEX_WIDTH]),
+            .m_axis_cpl_req_tag(port_cpl_req_tag[n*PORT_DESC_REQ_TAG_WIDTH +: PORT_DESC_REQ_TAG_WIDTH]),
+            .m_axis_cpl_req_data(port_cpl_req_data[n*CPL_SIZE*8 +: CPL_SIZE*8]),
+            .m_axis_cpl_req_valid(port_cpl_req_valid[n +: 1]),
+            .m_axis_cpl_req_ready(port_cpl_req_ready[n +: 1]),
+
+            /*
+             * Completion response input
+             */
+            .s_axis_cpl_req_status_tag(port_cpl_req_status_tag[n*PORT_DESC_REQ_TAG_WIDTH +: PORT_DESC_REQ_TAG_WIDTH]),
+            .s_axis_cpl_req_status_full(port_cpl_req_status_full[n +: 1]),
+            .s_axis_cpl_req_status_error(port_cpl_req_status_error[n +: 1]),
+            .s_axis_cpl_req_status_valid(port_cpl_req_status_valid[n +: 1]),
+
+            /*
+             * TX doorbell input
+             */
+            .s_axis_tx_doorbell_queue(tx_doorbell_queue),
+            .s_axis_tx_doorbell_valid(tx_doorbell_valid),
+
+            /*
+             * DMA read descriptor output
+             */
+            .m_axis_dma_read_desc_dma_addr(port_dma_read_desc_dma_addr[n*DMA_ADDR_WIDTH +: DMA_ADDR_WIDTH]),
+            .m_axis_dma_read_desc_ram_addr(port_dma_read_desc_ram_addr[n*RAM_ADDR_WIDTH +: RAM_ADDR_WIDTH]),
+            .m_axis_dma_read_desc_len(port_dma_read_desc_len[n*DMA_LEN_WIDTH +: DMA_LEN_WIDTH]),
+            .m_axis_dma_read_desc_tag(port_dma_read_desc_tag[n*DMA_TAG_WIDTH_INT +: DMA_TAG_WIDTH_INT]),
+            .m_axis_dma_read_desc_valid(port_dma_read_desc_valid[n +: 1]),
+            .m_axis_dma_read_desc_ready(port_dma_read_desc_ready[n +: 1]),
+
+            /*
+             * DMA read descriptor status input
+             */
+            .s_axis_dma_read_desc_status_tag(port_dma_read_desc_status_tag[n*DMA_TAG_WIDTH_INT +: DMA_TAG_WIDTH_INT]),
+            .s_axis_dma_read_desc_status_valid(port_dma_read_desc_status_valid[n +: 1]),
+
+            /*
+             * DMA write descriptor output
+             */
+            .m_axis_dma_write_desc_dma_addr(port_dma_write_desc_dma_addr[n*DMA_ADDR_WIDTH +: DMA_ADDR_WIDTH]),
+            .m_axis_dma_write_desc_ram_addr(port_dma_write_desc_ram_addr[n*RAM_ADDR_WIDTH +: RAM_ADDR_WIDTH]),
+            .m_axis_dma_write_desc_len(port_dma_write_desc_len[n*DMA_LEN_WIDTH +: DMA_LEN_WIDTH]),
+            .m_axis_dma_write_desc_tag(port_dma_write_desc_tag[n*DMA_TAG_WIDTH_INT +: DMA_TAG_WIDTH_INT]),
+            .m_axis_dma_write_desc_valid(port_dma_write_desc_valid[n +: 1]),
+            .m_axis_dma_write_desc_ready(port_dma_write_desc_ready[n +: 1]),
+
+            /*
+             * DMA write descriptor status input
+             */
+            .s_axis_dma_write_desc_status_tag(port_dma_write_desc_status_tag[n*DMA_TAG_WIDTH_INT +: DMA_TAG_WIDTH_INT]),
+            .s_axis_dma_write_desc_status_valid(port_dma_write_desc_status_valid[n +: 1]),
+
+            /*
+             * AXI-Lite slave interface
+             */
+            .s_axil_awaddr(axil_port_awaddr[n*AXIL_ADDR_WIDTH +: AXIL_ADDR_WIDTH]),
+            .s_axil_awprot(axil_port_awprot[n*3 +: 3]),
+            .s_axil_awvalid(axil_port_awvalid[n +: 1]),
+            .s_axil_awready(axil_port_awready[n +: 1]),
+            .s_axil_wdata(axil_port_wdata[n*AXIL_DATA_WIDTH +: AXIL_DATA_WIDTH]),
+            .s_axil_wstrb(axil_port_wstrb[n*AXIL_STRB_WIDTH +: AXIL_STRB_WIDTH]),
+            .s_axil_wvalid(axil_port_wvalid[n +: 1]),
+            .s_axil_wready(axil_port_wready[n +: 1]),
+            .s_axil_bresp(axil_port_bresp[n*2 +: 2]),
+            .s_axil_bvalid(axil_port_bvalid[n +: 1]),
+            .s_axil_bready(axil_port_bready[n +: 1]),
+            .s_axil_araddr(axil_port_araddr[n*AXIL_ADDR_WIDTH +: AXIL_ADDR_WIDTH]),
+            .s_axil_arprot(axil_port_arprot[n*3 +: 3]),
+            .s_axil_arvalid(axil_port_arvalid[n +: 1]),
+            .s_axil_arready(axil_port_arready[n +: 1]),
+            .s_axil_rdata(axil_port_rdata[n*AXIL_DATA_WIDTH +: AXIL_DATA_WIDTH]),
+            .s_axil_rresp(axil_port_rresp[n*2 +: 2]),
+            .s_axil_rvalid(axil_port_rvalid[n +: 1]),
+            .s_axil_rready(axil_port_rready[n +: 1]),
+
+            /*
+             * RAM interface
+             */
+            .dma_ram_wr_cmd_be(port_dma_ram_wr_cmd_be[SEG_COUNT*SEG_BE_WIDTH*n +: SEG_COUNT*SEG_BE_WIDTH]),
+            .dma_ram_wr_cmd_addr(port_dma_ram_wr_cmd_addr[SEG_COUNT*SEG_ADDR_WIDTH*n +: SEG_COUNT*SEG_ADDR_WIDTH]),
+            .dma_ram_wr_cmd_data(port_dma_ram_wr_cmd_data[SEG_COUNT*SEG_DATA_WIDTH*n +: SEG_COUNT*SEG_DATA_WIDTH]),
+            .dma_ram_wr_cmd_valid(port_dma_ram_wr_cmd_valid[SEG_COUNT*n +: SEG_COUNT]),
+            .dma_ram_wr_cmd_ready(port_dma_ram_wr_cmd_ready[SEG_COUNT*n +: SEG_COUNT]),
+            .dma_ram_rd_cmd_addr(port_dma_ram_rd_cmd_addr[SEG_COUNT*SEG_ADDR_WIDTH*n +: SEG_COUNT*SEG_ADDR_WIDTH]),
+            .dma_ram_rd_cmd_valid(port_dma_ram_rd_cmd_valid[SEG_COUNT*n +: SEG_COUNT]),
+            .dma_ram_rd_cmd_ready(port_dma_ram_rd_cmd_ready[SEG_COUNT*n +: SEG_COUNT]),
+            .dma_ram_rd_resp_data(port_dma_ram_rd_resp_data[SEG_COUNT*SEG_DATA_WIDTH*n +: SEG_COUNT*SEG_DATA_WIDTH]),
+            .dma_ram_rd_resp_valid(port_dma_ram_rd_resp_valid[SEG_COUNT*n +: SEG_COUNT]),
+            .dma_ram_rd_resp_ready(port_dma_ram_rd_resp_ready[SEG_COUNT*n +: SEG_COUNT]),
+
+            /*
+             * Transmit data output
+             */
+            .tx_axis_tdata(tx_axis_tdata[n*AXIS_DATA_WIDTH +: AXIS_DATA_WIDTH]),
+            .tx_axis_tkeep(tx_axis_tkeep[n*AXIS_KEEP_WIDTH +: AXIS_KEEP_WIDTH]),
+            .tx_axis_tvalid(tx_axis_tvalid[n +: 1]),
+            .tx_axis_tready(tx_axis_tready[n +: 1]),
+            .tx_axis_tlast(tx_axis_tlast[n +: 1]),
+            //this is slightly different from NetFPGA since there is 1 bit in tuser
+            .tx_axis_tuser(tx_axis_tuser[n +: 1]),
+
+            /*
+             * Transmit timestamp input
+             */
+            .s_axis_tx_ptp_ts_96(s_axis_tx_ptp_ts_96[n*PTP_TS_WIDTH +: PTP_TS_WIDTH]),
+            .s_axis_tx_ptp_ts_valid(s_axis_tx_ptp_ts_valid[n +: 1]),
+            .s_axis_tx_ptp_ts_ready(s_axis_tx_ptp_ts_ready[n +: 1]),
+
+            /*
+             * Receive data input
+             */
+            .rx_axis_tdata(rx_axis_tdata[n*AXIS_DATA_WIDTH +: AXIS_DATA_WIDTH]),
+            .rx_axis_tkeep(rx_axis_tkeep[n*AXIS_KEEP_WIDTH +: AXIS_KEEP_WIDTH]),
+            .rx_axis_tvalid(rx_axis_tvalid[n +: 1]),
+            .rx_axis_tready(rx_axis_tready[n +: 1]),
+            .rx_axis_tlast(rx_axis_tlast[n +: 1]),
+            //this is slightly different from NetFPGA since there is 1 bit in tuser
+            .rx_axis_tuser(rx_axis_tuser[n +: 1]),
+
+            /*
+             * Receive timestamp input
+             */
+            .s_axis_rx_ptp_ts_96(s_axis_rx_ptp_ts_96[n*PTP_TS_WIDTH +: PTP_TS_WIDTH]),
+            .s_axis_rx_ptp_ts_valid(s_axis_rx_ptp_ts_valid[n +: 1]),
+            .s_axis_rx_ptp_ts_ready(s_axis_rx_ptp_ts_ready[n +: 1]),
+
+            /*
+             * PTP clock
+             */
+            .ptp_ts_96(ptp_ts_96),
+            .ptp_ts_step(ptp_ts_step)
+        );
+
+    end
+
+endgenerate
+
+endmodule
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/rtl/one_in_one_out/port-perf.v ./fpga/mqnic/AU250/fpga_100g/rtl/one_in_one_out/port-perf.v
--- ./fpga-raw/mqnic/AU250/fpga_100g/rtl/one_in_one_out/port-perf.v	1970-01-01 08:00:00.000000000 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/rtl/one_in_one_out/port-perf.v	2022-01-31 13:02:15.010256655 +0800
@@ -0,0 +1,2281 @@
+/*
+
+Copyright 2019, The Regents of the University of California.
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+
+   1. Redistributions of source code must retain the above copyright notice,
+      this list of conditions and the following disclaimer.
+
+   2. Redistributions in binary form must reproduce the above copyright notice,
+      this list of conditions and the following disclaimer in the documentation
+      and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE REGENTS OF THE UNIVERSITY OF CALIFORNIA ''AS
+IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE REGENTS OF THE UNIVERSITY OF CALIFORNIA OR
+CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
+OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
+OF SUCH DAMAGE.
+
+The views and conclusions contained in the software and documentation are those
+of the authors and should not be interpreted as representing official policies,
+either expressed or implied, of The Regents of the University of California.
+
+*/
+
+// Language: Verilog 2001
+
+/**
+    Desc:     This is a modified port.v from corundum to support RMT pipeline.
+    Modified: Yang Xiangrui (yangxiangrui11@nudt.edu.cn)
+    Date:     2020/10/12
+*/
+
+`timescale 1ns / 1ps
+
+/*
+ * NIC Port
+ */
+module port #
+(
+    // DMA address width
+    parameter DMA_ADDR_WIDTH = 64,
+    // DMA length field width
+    parameter DMA_LEN_WIDTH = 16,
+    // DMA tag field width
+    parameter DMA_TAG_WIDTH = 8,
+    // Request tag field width
+    parameter REQ_TAG_WIDTH = 8,
+    // Descriptor request tag field width
+    parameter DESC_REQ_TAG_WIDTH = 8,
+    // Queue request tag field width
+    parameter QUEUE_REQ_TAG_WIDTH = 8,
+    // Queue operation tag field width
+    parameter QUEUE_OP_TAG_WIDTH = 8,
+    // Transmit queue index width
+    parameter TX_QUEUE_INDEX_WIDTH = 8,
+    // Receive queue index width
+    parameter RX_QUEUE_INDEX_WIDTH = 8,
+    // Max queue index width
+    parameter QUEUE_INDEX_WIDTH = TX_QUEUE_INDEX_WIDTH > RX_QUEUE_INDEX_WIDTH ? TX_QUEUE_INDEX_WIDTH : RX_QUEUE_INDEX_WIDTH,
+    // Transmit completion queue index width
+    parameter TX_CPL_QUEUE_INDEX_WIDTH = 8,
+    // Receive completion queue index width
+    parameter RX_CPL_QUEUE_INDEX_WIDTH = 8,
+    // Max completion queue index width
+    parameter CPL_QUEUE_INDEX_WIDTH = TX_CPL_QUEUE_INDEX_WIDTH > RX_CPL_QUEUE_INDEX_WIDTH ? TX_CPL_QUEUE_INDEX_WIDTH : RX_CPL_QUEUE_INDEX_WIDTH,
+    // Transmit descriptor table size (number of in-flight operations)
+    parameter TX_DESC_TABLE_SIZE = 16,
+    // Transmit packet table size (number of in-progress packets)
+    parameter TX_PKT_TABLE_SIZE = 8,
+    // Receive descriptor table size (number of in-flight operations)
+    parameter RX_DESC_TABLE_SIZE = 16,
+    // Receive packet table size (number of in-progress packets)
+    parameter RX_PKT_TABLE_SIZE = 8,
+    // Width of descriptor table field for tracking outstanding DMA operations
+    parameter DESC_TABLE_DMA_OP_COUNT_WIDTH = 4,
+    // Max number of in-flight descriptor requests (transmit)
+    parameter TX_MAX_DESC_REQ = 16,
+    // Transmit descriptor FIFO size
+    parameter TX_DESC_FIFO_SIZE = TX_MAX_DESC_REQ*8,
+    // Max number of in-flight descriptor requests (transmit)
+    parameter RX_MAX_DESC_REQ = 16,
+    // Receive descriptor FIFO size
+    parameter RX_DESC_FIFO_SIZE = RX_MAX_DESC_REQ*8,
+    // Transmit scheduler type
+    parameter TX_SCHEDULER = "RR",
+    // Scheduler operation table size
+    parameter TX_SCHEDULER_OP_TABLE_SIZE = 32,
+    // Scheduler pipeline setting
+    parameter TX_SCHEDULER_PIPELINE = 3,
+    // Scheduler TDMA index width
+    parameter TDMA_INDEX_WIDTH = 8,
+    // Queue element pointer width
+    parameter QUEUE_PTR_WIDTH = 16,
+    // Enable PTP timestamping
+    parameter PTP_TS_ENABLE = 1,
+    // PTP timestamp width
+    parameter PTP_TS_WIDTH = 96,
+    // Enable TX checksum offload
+    parameter TX_CHECKSUM_ENABLE = 0,
+    // Enable RX RSS
+    parameter RX_RSS_ENABLE = 1,
+    // Enable RX hashing
+    parameter RX_HASH_ENABLE = 1,
+    // Enable RX checksum offload
+    parameter RX_CHECKSUM_ENABLE = 1,
+    // Width of AXI lite data bus in bits
+    parameter AXIL_DATA_WIDTH = 32,
+    // Width of AXI lite address bus in bits
+    parameter AXIL_ADDR_WIDTH = 16,
+    // Width of AXI lite wstrb (width of data bus in words)
+    parameter AXIL_STRB_WIDTH = (AXIL_DATA_WIDTH/8),
+    // DMA RAM segment count
+    parameter SEG_COUNT = 2,
+    // DMA RAM segment data width
+    parameter SEG_DATA_WIDTH = 64,
+    // DMA RAM segment address width
+    parameter SEG_ADDR_WIDTH = 8,
+    // DMA RAM segment byte enable width
+    parameter SEG_BE_WIDTH = SEG_DATA_WIDTH/8,
+    // DMA RAM address width
+    parameter RAM_ADDR_WIDTH = SEG_ADDR_WIDTH+$clog2(SEG_COUNT)+$clog2(SEG_BE_WIDTH),
+    // DMA RAM pipeline stages
+    parameter RAM_PIPELINE = 2,
+    // Width of AXI stream interfaces in bits
+    parameter AXIS_DATA_WIDTH = 256,
+    // AXI stream tkeep signal width (words per cycle)
+    parameter AXIS_KEEP_WIDTH = AXIS_DATA_WIDTH/8,
+    // Max transmit packet size
+    parameter MAX_TX_SIZE = 2048,
+    // Max receive packet size
+    parameter MAX_RX_SIZE = 2048,
+    // Descriptor size (in bytes)
+    parameter DESC_SIZE = 16,
+    // Descriptor size (in bytes)
+    parameter CPL_SIZE = 32,
+    // Width of AXI stream descriptor interfaces in bits
+    parameter AXIS_DESC_DATA_WIDTH = DESC_SIZE*8,
+    // AXI stream descriptor tkeep signal width (words per cycle)
+    parameter AXIS_DESC_KEEP_WIDTH = AXIS_DESC_DATA_WIDTH/8,
+    // DMA TX RAM size
+    parameter TX_RAM_SIZE = TX_PKT_TABLE_SIZE*MAX_TX_SIZE,
+    // DMA RX RAM size
+    parameter RX_RAM_SIZE = RX_PKT_TABLE_SIZE*MAX_RX_SIZE,
+    // Enable RMT pipeline on TX
+    parameter RMT_TX_ENABLE = 1
+)
+(
+    input  wire                                 clk,
+    input  wire                                 rst,
+
+    /*
+     * Descriptor request output
+     */
+    output wire [0:0]                           m_axis_desc_req_sel,
+    output wire [QUEUE_INDEX_WIDTH-1:0]         m_axis_desc_req_queue,
+    output wire [DESC_REQ_TAG_WIDTH-1:0]        m_axis_desc_req_tag,
+    output wire                                 m_axis_desc_req_valid,
+    input  wire                                 m_axis_desc_req_ready,
+
+    /*
+     * Descriptor request status input
+     */
+    input  wire [QUEUE_INDEX_WIDTH-1:0]         s_axis_desc_req_status_queue,
+    input  wire [QUEUE_PTR_WIDTH-1:0]           s_axis_desc_req_status_ptr,
+    input  wire [CPL_QUEUE_INDEX_WIDTH-1:0]     s_axis_desc_req_status_cpl,
+    input  wire [DESC_REQ_TAG_WIDTH-1:0]        s_axis_desc_req_status_tag,
+    input  wire                                 s_axis_desc_req_status_empty,
+    input  wire                                 s_axis_desc_req_status_error,
+    input  wire                                 s_axis_desc_req_status_valid,
+
+    /*
+     * Descriptor data input
+     */
+    input  wire [AXIS_DESC_DATA_WIDTH-1:0]      s_axis_desc_tdata,
+    input  wire [AXIS_DESC_KEEP_WIDTH-1:0]      s_axis_desc_tkeep,
+    input  wire                                 s_axis_desc_tvalid,
+    output wire                                 s_axis_desc_tready,
+    input  wire                                 s_axis_desc_tlast,
+    input  wire [DESC_REQ_TAG_WIDTH-1:0]        s_axis_desc_tid,
+    input  wire                                 s_axis_desc_tuser,
+
+    /*
+     * Completion request output
+     */
+    output wire [0:0]                           m_axis_cpl_req_sel,
+    output wire [QUEUE_INDEX_WIDTH-1:0]         m_axis_cpl_req_queue,
+    output wire [DESC_REQ_TAG_WIDTH-1:0]        m_axis_cpl_req_tag,
+    output wire [CPL_SIZE*8-1:0]                m_axis_cpl_req_data,
+    output wire                                 m_axis_cpl_req_valid,
+    input  wire                                 m_axis_cpl_req_ready,
+
+    /*
+     * Completion request status input
+     */
+    input  wire [DESC_REQ_TAG_WIDTH-1:0]        s_axis_cpl_req_status_tag,
+    input  wire                                 s_axis_cpl_req_status_full,
+    input  wire                                 s_axis_cpl_req_status_error,
+    input  wire                                 s_axis_cpl_req_status_valid,
+
+    /*
+     * TX doorbell input
+     */
+    input  wire [TX_QUEUE_INDEX_WIDTH-1:0]      s_axis_tx_doorbell_queue,
+    input  wire                                 s_axis_tx_doorbell_valid,
+
+    /*
+     * DMA read descriptor output
+     */
+    output wire [DMA_ADDR_WIDTH-1:0]            m_axis_dma_read_desc_dma_addr,
+    output wire [RAM_ADDR_WIDTH-1:0]            m_axis_dma_read_desc_ram_addr,
+    output wire [DMA_LEN_WIDTH-1:0]             m_axis_dma_read_desc_len,
+    output wire [DMA_TAG_WIDTH-1:0]             m_axis_dma_read_desc_tag,
+    output wire                                 m_axis_dma_read_desc_valid,
+    input  wire                                 m_axis_dma_read_desc_ready,
+
+    /*
+     * DMA read descriptor status input
+     */
+    input  wire [DMA_TAG_WIDTH-1:0]             s_axis_dma_read_desc_status_tag,
+    input  wire                                 s_axis_dma_read_desc_status_valid,
+
+    /*
+     * DMA write descriptor output
+     */
+    output wire [DMA_ADDR_WIDTH-1:0]            m_axis_dma_write_desc_dma_addr,
+    output wire [RAM_ADDR_WIDTH-1:0]            m_axis_dma_write_desc_ram_addr,
+    output wire [DMA_LEN_WIDTH-1:0]             m_axis_dma_write_desc_len,
+    output wire [DMA_TAG_WIDTH-1:0]             m_axis_dma_write_desc_tag,
+    output wire                                 m_axis_dma_write_desc_valid,
+    input  wire                                 m_axis_dma_write_desc_ready,
+
+    /*
+     * DMA write descriptor status input
+     */
+    input  wire [DMA_TAG_WIDTH-1:0]             s_axis_dma_write_desc_status_tag,
+    input  wire                                 s_axis_dma_write_desc_status_valid,
+
+    /*
+     * AXI-Lite slave interface
+     */
+    input  wire [AXIL_ADDR_WIDTH-1:0]           s_axil_awaddr,
+    input  wire [2:0]                           s_axil_awprot,
+    input  wire                                 s_axil_awvalid,
+    output wire                                 s_axil_awready,
+    input  wire [AXIL_DATA_WIDTH-1:0]           s_axil_wdata,
+    input  wire [AXIL_STRB_WIDTH-1:0]           s_axil_wstrb,
+    input  wire                                 s_axil_wvalid,
+    output wire                                 s_axil_wready,
+    output wire [1:0]                           s_axil_bresp,
+    output wire                                 s_axil_bvalid,
+    input  wire                                 s_axil_bready,
+    input  wire [AXIL_ADDR_WIDTH-1:0]           s_axil_araddr,
+    input  wire [2:0]                           s_axil_arprot,
+    input  wire                                 s_axil_arvalid,
+    output wire                                 s_axil_arready,
+    output wire [AXIL_DATA_WIDTH-1:0]           s_axil_rdata,
+    output wire [1:0]                           s_axil_rresp,
+    output wire                                 s_axil_rvalid,
+    input  wire                                 s_axil_rready,
+
+    /*
+     * RAM interface
+     */
+    input  wire [SEG_COUNT*SEG_BE_WIDTH-1:0]    dma_ram_wr_cmd_be,
+    input  wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0]  dma_ram_wr_cmd_addr,
+    input  wire [SEG_COUNT*SEG_DATA_WIDTH-1:0]  dma_ram_wr_cmd_data,
+    input  wire [SEG_COUNT-1:0]                 dma_ram_wr_cmd_valid,
+    output wire [SEG_COUNT-1:0]                 dma_ram_wr_cmd_ready,
+    input  wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0]  dma_ram_rd_cmd_addr,
+    input  wire [SEG_COUNT-1:0]                 dma_ram_rd_cmd_valid,
+    output wire [SEG_COUNT-1:0]                 dma_ram_rd_cmd_ready,
+    output wire [SEG_COUNT*SEG_DATA_WIDTH-1:0]  dma_ram_rd_resp_data,
+    output wire [SEG_COUNT-1:0]                 dma_ram_rd_resp_valid,
+    input  wire [SEG_COUNT-1:0]                 dma_ram_rd_resp_ready,
+
+    /*
+     * Transmit data output
+     */
+    output wire [AXIS_DATA_WIDTH-1:0]           tx_axis_tdata,
+    output wire [AXIS_KEEP_WIDTH-1:0]           tx_axis_tkeep,
+    output wire                                 tx_axis_tvalid,
+    input  wire                                 tx_axis_tready,
+    output wire                                 tx_axis_tlast,
+    output wire                                 tx_axis_tuser,
+
+    /*
+     * Transmit PTP timestamp input
+     */
+    input  wire [PTP_TS_WIDTH-1:0]              s_axis_tx_ptp_ts_96,
+    input  wire                                 s_axis_tx_ptp_ts_valid,
+    output wire                                 s_axis_tx_ptp_ts_ready,
+
+    /*
+     * Receive data input
+     */
+    input  wire [AXIS_DATA_WIDTH-1:0]           rx_axis_tdata,
+    input  wire [AXIS_KEEP_WIDTH-1:0]           rx_axis_tkeep,
+    input  wire                                 rx_axis_tvalid,
+    output wire                                 rx_axis_tready,
+    input  wire                                 rx_axis_tlast,
+    input  wire                                 rx_axis_tuser,
+
+    /*
+     * Receive PTP timestamp input
+     */
+    input  wire [PTP_TS_WIDTH-1:0]              s_axis_rx_ptp_ts_96,
+    input  wire                                 s_axis_rx_ptp_ts_valid,
+    output wire                                 s_axis_rx_ptp_ts_ready,
+
+    /*
+     * PTP clock
+     */
+    input  wire [PTP_TS_WIDTH-1:0]              ptp_ts_96,
+    input  wire                                 ptp_ts_step,
+
+	//
+	output reg [15:0]							vlan_drop_flags,
+	input wire [31:0]							ctrl_token
+);
+
+parameter DMA_CLIENT_TAG_WIDTH = $clog2(TX_DESC_TABLE_SIZE > RX_DESC_TABLE_SIZE ? TX_DESC_TABLE_SIZE : RX_DESC_TABLE_SIZE);
+parameter DMA_CLIENT_LEN_WIDTH = DMA_LEN_WIDTH;
+
+parameter DESC_REQ_TAG_WIDTH_INT = DESC_REQ_TAG_WIDTH - $clog2(2);
+
+parameter SCHED_COUNT = (TX_SCHEDULER == "TDMA_RR") ? 2 : 1;
+parameter AXIL_SCHED_ADDR_WIDTH = AXIL_ADDR_WIDTH-$clog2(SCHED_COUNT+1);
+
+// parameter sizing helpers
+function [31:0] w_32(input [31:0] val);
+    w_32 = val;
+endfunction
+
+// AXI lite connections
+wire [AXIL_ADDR_WIDTH-1:0] axil_ctrl_awaddr;
+wire [2:0]                 axil_ctrl_awprot;
+wire                       axil_ctrl_awvalid;
+wire                       axil_ctrl_awready;
+wire [AXIL_DATA_WIDTH-1:0] axil_ctrl_wdata;
+wire [AXIL_STRB_WIDTH-1:0] axil_ctrl_wstrb;
+wire                       axil_ctrl_wvalid;
+wire                       axil_ctrl_wready;
+wire [1:0]                 axil_ctrl_bresp;
+wire                       axil_ctrl_bvalid;
+wire                       axil_ctrl_bready;
+wire [AXIL_ADDR_WIDTH-1:0] axil_ctrl_araddr;
+wire [2:0]                 axil_ctrl_arprot;
+wire                       axil_ctrl_arvalid;
+wire                       axil_ctrl_arready;
+wire [AXIL_DATA_WIDTH-1:0] axil_ctrl_rdata;
+wire [1:0]                 axil_ctrl_rresp;
+wire                       axil_ctrl_rvalid;
+wire                       axil_ctrl_rready;
+
+wire [SCHED_COUNT*AXIL_ADDR_WIDTH-1:0] axil_sched_awaddr;
+wire [SCHED_COUNT*3-1:0]               axil_sched_awprot;
+wire [SCHED_COUNT-1:0]                 axil_sched_awvalid;
+wire [SCHED_COUNT-1:0]                 axil_sched_awready;
+wire [SCHED_COUNT*AXIL_DATA_WIDTH-1:0] axil_sched_wdata;
+wire [SCHED_COUNT*AXIL_STRB_WIDTH-1:0] axil_sched_wstrb;
+wire [SCHED_COUNT-1:0]                 axil_sched_wvalid;
+wire [SCHED_COUNT-1:0]                 axil_sched_wready;
+wire [SCHED_COUNT*2-1:0]               axil_sched_bresp;
+wire [SCHED_COUNT-1:0]                 axil_sched_bvalid;
+wire [SCHED_COUNT-1:0]                 axil_sched_bready;
+wire [SCHED_COUNT*AXIL_ADDR_WIDTH-1:0] axil_sched_araddr;
+wire [SCHED_COUNT*3-1:0]               axil_sched_arprot;
+wire [SCHED_COUNT-1:0]                 axil_sched_arvalid;
+wire [SCHED_COUNT-1:0]                 axil_sched_arready;
+wire [SCHED_COUNT*AXIL_DATA_WIDTH-1:0] axil_sched_rdata;
+wire [SCHED_COUNT*2-1:0]               axil_sched_rresp;
+wire [SCHED_COUNT-1:0]                 axil_sched_rvalid;
+wire [SCHED_COUNT-1:0]                 axil_sched_rready;
+
+// //rmt related
+// wire [AXIL_ADDR_WIDTH-1:0]      axil_rmt_awaddr;
+// wire [2:0]                      axil_rmt_awprot;
+// wire                            axil_rmt_awvalid;
+// wire                            axil_rmt_awready;
+// wire [AXIL_DATA_WIDTH-1:0]      axil_rmt_wdata;
+// wire [AXIL_STRB_WIDTH-1:0]      axil_rmt_wstrb;
+// wire                            axil_rmt_wvalid;
+// wire                            axil_rmt_wready;
+// wire [1:0]                      axil_rmt_bresp;
+// wire                            axil_rmt_bvalid;
+// wire                            axil_rmt_bready;
+// wire [AXIL_ADDR_WIDTH-1:0]      axil_rmt_araddr;
+// wire [2:0]                      axil_rmt_arprot;
+// wire                            axil_rmt_arvalid;
+// wire                            axil_rmt_arready;
+// wire [AXIL_DATA_WIDTH-1:0]      axil_rmt_rdata;
+// wire [1:0]                      axil_rmt_rresp;
+// wire                            axil_rmt_rvalid;
+// wire                            axil_rmt_rready;
+
+// Checksumming and RSS
+wire [AXIS_DATA_WIDTH-1:0] rx_axis_tdata_int;
+wire [AXIS_KEEP_WIDTH-1:0] rx_axis_tkeep_int;
+wire                       rx_axis_tvalid_int;
+wire                       rx_axis_tready_int;
+wire                       rx_axis_tlast_int;
+wire                       rx_axis_tuser_int;
+
+wire [AXIS_DATA_WIDTH-1:0] tx_axis_tdata_int;
+wire [AXIS_KEEP_WIDTH-1:0] tx_axis_tkeep_int;
+wire                       tx_axis_tvalid_int;
+wire                       tx_axis_tready_int;
+wire                       tx_axis_tlast_int;
+wire                       tx_axis_tuser_int;
+
+wire [AXIS_DATA_WIDTH-1:0] tx_axis_tdata_int_2;
+wire [AXIS_KEEP_WIDTH-1:0] tx_axis_tkeep_int_2;
+wire                       tx_axis_tvalid_int_2;
+wire                       tx_axis_tready_int_2;
+wire                       tx_axis_tlast_int_2;
+wire                       tx_axis_tuser_int_2;
+
+// Descriptor and completion
+wire [0:0]                           rx_desc_req_sel = 1'b1;
+wire [QUEUE_INDEX_WIDTH-1:0]         rx_desc_req_queue;
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    rx_desc_req_tag;
+wire                                 rx_desc_req_valid;
+wire                                 rx_desc_req_ready;
+
+wire [QUEUE_INDEX_WIDTH-1:0]         rx_desc_req_status_queue;
+wire [QUEUE_PTR_WIDTH-1:0]           rx_desc_req_status_ptr;
+wire [CPL_QUEUE_INDEX_WIDTH-1:0]     rx_desc_req_status_cpl;
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    rx_desc_req_status_tag;
+wire                                 rx_desc_req_status_empty;
+wire                                 rx_desc_req_status_error;
+wire                                 rx_desc_req_status_valid;
+
+wire [AXIS_DESC_DATA_WIDTH-1:0]      rx_desc_tdata;
+wire [AXIS_DESC_KEEP_WIDTH-1:0]      rx_desc_tkeep;
+wire                                 rx_desc_tvalid;
+wire                                 rx_desc_tready;
+wire                                 rx_desc_tlast;
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    rx_desc_tid;
+wire                                 rx_desc_tuser;
+
+wire [AXIS_DESC_DATA_WIDTH-1:0]      rx_fifo_desc_tdata;
+wire [AXIS_DESC_KEEP_WIDTH-1:0]      rx_fifo_desc_tkeep;
+wire                                 rx_fifo_desc_tvalid;
+wire                                 rx_fifo_desc_tready;
+wire                                 rx_fifo_desc_tlast;
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    rx_fifo_desc_tid;
+wire                                 rx_fifo_desc_tuser;
+
+wire [0:0]                           tx_desc_req_sel = 1'b0;
+wire [QUEUE_INDEX_WIDTH-1:0]         tx_desc_req_queue;
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    tx_desc_req_tag;
+wire                                 tx_desc_req_valid;
+wire                                 tx_desc_req_ready;
+
+wire [QUEUE_INDEX_WIDTH-1:0]         tx_desc_req_status_queue;
+wire [QUEUE_PTR_WIDTH-1:0]           tx_desc_req_status_ptr;
+wire [CPL_QUEUE_INDEX_WIDTH-1:0]     tx_desc_req_status_cpl;
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    tx_desc_req_status_tag;
+wire                                 tx_desc_req_status_empty;
+wire                                 tx_desc_req_status_error;
+wire                                 tx_desc_req_status_valid;
+
+wire [AXIS_DESC_DATA_WIDTH-1:0]      tx_desc_tdata;
+wire [AXIS_DESC_KEEP_WIDTH-1:0]      tx_desc_tkeep;
+wire                                 tx_desc_tvalid;
+wire                                 tx_desc_tready;
+wire                                 tx_desc_tlast;
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    tx_desc_tid;
+wire                                 tx_desc_tuser;
+
+wire [AXIS_DESC_DATA_WIDTH-1:0]      tx_fifo_desc_tdata;
+wire [AXIS_DESC_KEEP_WIDTH-1:0]      tx_fifo_desc_tkeep;
+wire                                 tx_fifo_desc_tvalid;
+wire                                 tx_fifo_desc_tready;
+wire                                 tx_fifo_desc_tlast;
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    tx_fifo_desc_tid;
+wire                                 tx_fifo_desc_tuser;
+
+wire [0:0]                           rx_cpl_req_sel = 1'b1;
+wire [QUEUE_INDEX_WIDTH-1:0]         rx_cpl_req_queue;
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    rx_cpl_req_tag;
+wire [CPL_SIZE*8-1:0]                rx_cpl_req_data;
+wire                                 rx_cpl_req_valid;
+wire                                 rx_cpl_req_ready;
+
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    rx_cpl_req_status_tag;
+wire                                 rx_cpl_req_status_full;
+wire                                 rx_cpl_req_status_error;
+wire                                 rx_cpl_req_status_valid;
+
+wire [0:0]                           tx_cpl_req_sel = 1'b0;
+wire [QUEUE_INDEX_WIDTH-1:0]         tx_cpl_req_queue;
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    tx_cpl_req_tag;
+wire [CPL_SIZE*8-1:0]                tx_cpl_req_data;
+wire                                 tx_cpl_req_valid;
+wire                                 tx_cpl_req_ready;
+
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    tx_cpl_req_status_tag;
+wire                                 tx_cpl_req_status_full;
+wire                                 tx_cpl_req_status_error;
+wire                                 tx_cpl_req_status_valid;
+
+// Scheduler
+wire [TX_QUEUE_INDEX_WIDTH-1:0] tx_sched_ctrl_queue;
+wire                            tx_sched_ctrl_enable;
+wire                            tx_sched_ctrl_valid;
+wire                            tx_sched_ctrl_ready;
+
+// TX engine
+wire [TX_QUEUE_INDEX_WIDTH-1:0] tx_req_queue;
+wire [REQ_TAG_WIDTH-1:0]        tx_req_tag;
+wire                            tx_req_valid;
+wire                            tx_req_ready;
+
+wire [DMA_CLIENT_LEN_WIDTH-1:0] tx_req_status_len;
+wire [REQ_TAG_WIDTH-1:0]        tx_req_status_tag;
+wire                            tx_req_status_valid;
+
+// RX engine
+wire [RX_QUEUE_INDEX_WIDTH-1:0] rx_req_queue;
+wire [REQ_TAG_WIDTH-1:0]        rx_req_tag;
+wire                            rx_req_valid;
+wire                            rx_req_ready;
+
+wire [REQ_TAG_WIDTH-1:0]        rx_req_status_tag;
+wire                            rx_req_status_valid;
+
+// Timestamps
+wire [95:0]              rx_ptp_ts_96;
+wire                     rx_ptp_ts_valid;
+wire                     rx_ptp_ts_ready;
+
+wire [95:0]              tx_ptp_ts_96;
+wire                     tx_ptp_ts_valid;
+wire                     tx_ptp_ts_ready;
+
+// RX hashing
+wire [31:0]              rx_hash;
+wire [3:0]               rx_hash_type;
+wire                     rx_hash_valid;
+
+wire [31:0]              rx_fifo_hash;
+wire [3:0]               rx_fifo_hash_type;
+wire                     rx_fifo_hash_valid;
+wire                     rx_fifo_hash_ready;
+
+// Checksums
+wire [15:0]              rx_csum;
+wire                     rx_csum_valid;
+
+wire [15:0]              rx_fifo_csum;
+wire                     rx_fifo_csum_valid;
+wire                     rx_fifo_csum_ready;
+
+wire                     tx_csum_cmd_csum_enable;
+wire [7:0]               tx_csum_cmd_csum_start;
+wire [7:0]               tx_csum_cmd_csum_offset;
+wire                     tx_csum_cmd_valid;
+wire                     tx_csum_cmd_ready;
+
+wire                     tx_fifo_csum_cmd_csum_enable;
+wire [7:0]               tx_fifo_csum_cmd_csum_start;
+wire [7:0]               tx_fifo_csum_cmd_csum_offset;
+wire                     tx_fifo_csum_cmd_valid;
+wire                     tx_fifo_csum_cmd_ready;
+
+// Interface DMA control
+wire [RAM_ADDR_WIDTH-1:0]       dma_tx_desc_addr;
+wire [DMA_CLIENT_LEN_WIDTH-1:0] dma_tx_desc_len;
+wire [DMA_CLIENT_TAG_WIDTH-1:0] dma_tx_desc_tag;
+wire                            dma_tx_desc_user;
+wire                            dma_tx_desc_valid;
+wire                            dma_tx_desc_ready;
+
+wire [DMA_CLIENT_TAG_WIDTH-1:0] dma_tx_desc_status_tag;
+wire                            dma_tx_desc_status_valid;
+
+wire [RAM_ADDR_WIDTH-1:0]       dma_rx_desc_addr;
+wire [DMA_CLIENT_LEN_WIDTH-1:0] dma_rx_desc_len;
+wire [DMA_CLIENT_TAG_WIDTH-1:0] dma_rx_desc_tag;
+wire                            dma_rx_desc_valid;
+wire                            dma_rx_desc_ready;
+
+wire [DMA_CLIENT_LEN_WIDTH-1:0] dma_rx_desc_status_len;
+wire [DMA_CLIENT_TAG_WIDTH-1:0] dma_rx_desc_status_tag;
+wire                            dma_rx_desc_status_user;
+wire                            dma_rx_desc_status_valid;
+
+wire                            dma_enable = 1;
+
+//RMT pipeline
+
+
+
+// Port control registers
+reg axil_ctrl_awready_reg = 1'b0;
+reg axil_ctrl_wready_reg = 1'b0;
+reg axil_ctrl_bvalid_reg = 1'b0;
+reg axil_ctrl_arready_reg = 1'b0;
+reg [AXIL_DATA_WIDTH-1:0] axil_ctrl_rdata_reg = {AXIL_DATA_WIDTH{1'b0}};
+reg axil_ctrl_rvalid_reg = 1'b0;
+
+reg sched_enable_reg = 1'b0;
+
+reg [RX_QUEUE_INDEX_WIDTH-1:0] rss_mask_reg = 0;
+
+reg [DMA_CLIENT_LEN_WIDTH-1:0] tx_mtu_reg = MAX_TX_SIZE;
+reg [DMA_CLIENT_LEN_WIDTH-1:0] rx_mtu_reg = MAX_RX_SIZE;
+
+reg tdma_enable_reg = 1'b0;
+wire tdma_locked;
+wire tdma_error;
+
+// wire [31:0] ctrl_token;
+// reg [15:0] vlan_drop_flags;
+
+reg [79:0] set_tdma_schedule_start_reg = 0;
+reg set_tdma_schedule_start_valid_reg = 0;
+reg [79:0] set_tdma_schedule_period_reg = 0;
+reg set_tdma_schedule_period_valid_reg = 0;
+reg [79:0] set_tdma_timeslot_period_reg = 0;
+reg set_tdma_timeslot_period_valid_reg = 0;
+reg [79:0] set_tdma_active_period_reg = 0;
+reg set_tdma_active_period_valid_reg = 0;
+
+wire tdma_schedule_start;
+wire [TDMA_INDEX_WIDTH-1:0] tdma_timeslot_index;
+wire tdma_timeslot_start;
+wire tdma_timeslot_end;
+wire tdma_timeslot_active;
+
+assign axil_ctrl_awready = axil_ctrl_awready_reg;
+assign axil_ctrl_wready = axil_ctrl_wready_reg;
+assign axil_ctrl_bresp = 2'b00;
+assign axil_ctrl_bvalid = axil_ctrl_bvalid_reg;
+assign axil_ctrl_arready = axil_ctrl_arready_reg;
+assign axil_ctrl_rdata = axil_ctrl_rdata_reg;
+assign axil_ctrl_rresp = 2'b00;
+assign axil_ctrl_rvalid = axil_ctrl_rvalid_reg;
+
+always @(posedge clk) begin
+    axil_ctrl_awready_reg <= 1'b0;
+    axil_ctrl_wready_reg <= 1'b0;
+    axil_ctrl_bvalid_reg <= axil_ctrl_bvalid_reg && !axil_ctrl_bready;
+    axil_ctrl_arready_reg <= 1'b0;
+    axil_ctrl_rvalid_reg <= axil_ctrl_rvalid_reg && !axil_ctrl_rready;
+
+    set_tdma_schedule_start_valid_reg <= 1'b0;
+    set_tdma_schedule_period_valid_reg <= 1'b0;
+    set_tdma_timeslot_period_valid_reg <= 1'b0;
+    set_tdma_active_period_valid_reg <= 1'b0;
+
+	//
+	vlan_drop_flags <= 0;
+
+
+    if (axil_ctrl_awvalid && axil_ctrl_wvalid && !axil_ctrl_bvalid) begin
+        // write operation
+        axil_ctrl_awready_reg <= 1'b1;
+        axil_ctrl_wready_reg <= 1'b1;
+        axil_ctrl_bvalid_reg <= 1'b1;
+
+        if(RMT_TX_ENABLE) begin
+            case ({axil_ctrl_awaddr[15:2], 2'b00})
+                16'h0040: begin
+                    // Scheduler enable
+                    if (axil_ctrl_wstrb[0]) begin
+                        sched_enable_reg <= axil_ctrl_wdata[0];
+                    end
+                end
+                16'h0080: rss_mask_reg <= axil_ctrl_wdata; // RSS mask
+                16'h0100: tx_mtu_reg <= axil_ctrl_wdata; // TX MTU
+                16'h0200: rx_mtu_reg <= axil_ctrl_wdata; // RX MTU
+                16'h1000: begin
+                    // TDMA control
+                    if (axil_ctrl_wstrb[0]) begin
+                        tdma_enable_reg <= axil_ctrl_wdata[0];
+                    end
+                end
+                16'h1014: set_tdma_schedule_start_reg[29:0] <= axil_ctrl_wdata; // TDMA schedule start ns
+                16'h1018: set_tdma_schedule_start_reg[63:32] <= axil_ctrl_wdata; // TDMA schedule start sec l
+                16'h101C: begin
+                    // TDMA schedule start sec h
+                    set_tdma_schedule_start_reg[79:64] <= axil_ctrl_wdata;
+                    set_tdma_schedule_start_valid_reg <= 1'b1;
+                end
+                16'h1024: set_tdma_schedule_period_reg[29:0] <= axil_ctrl_wdata; // TDMA schedule period ns
+                16'h1028: set_tdma_schedule_period_reg[63:32] <= axil_ctrl_wdata; // TDMA schedule period sec l
+                16'h102C: begin
+                    // TDMA schedule period sec h
+                    set_tdma_schedule_period_reg[79:64] <= axil_ctrl_wdata;
+                    set_tdma_schedule_period_valid_reg <= 1'b1;
+                end
+                16'h1034: set_tdma_timeslot_period_reg[29:0] <= axil_ctrl_wdata; // TDMA timeslot period ns
+                16'h1038: set_tdma_timeslot_period_reg[63:32] <= axil_ctrl_wdata; // TDMA timeslot period sec l
+                16'h103C: begin
+                    // TDMA timeslot period sec h
+                    set_tdma_timeslot_period_reg[79:64] <= axil_ctrl_wdata;
+                    set_tdma_timeslot_period_valid_reg <= 1'b1;
+                end
+                16'h1044: set_tdma_active_period_reg[29:0] <= axil_ctrl_wdata; // TDMA active period ns
+                16'h1048: set_tdma_active_period_reg[63:32] <= axil_ctrl_wdata; // TDMA active period sec l
+                16'h104C: begin
+                    // TDMA active period sec h
+                    set_tdma_active_period_reg[79:64] <= axil_ctrl_wdata;
+                    set_tdma_active_period_valid_reg <= 1'b1;
+                end
+                //checkme: for sync while RMT reconf
+                16'h2028: vlan_drop_flags <= axil_ctrl_wdata;
+            endcase
+        end
+        else begin
+            case ({axil_ctrl_awaddr[15:2], 2'b00})
+                16'h0040: begin
+                    // Scheduler enable
+                    if (axil_ctrl_wstrb[0]) begin
+                        sched_enable_reg <= axil_ctrl_wdata[0];
+                    end
+                end
+                16'h0080: rss_mask_reg <= axil_ctrl_wdata; // RSS mask
+                16'h0100: tx_mtu_reg <= axil_ctrl_wdata; // TX MTU
+                16'h0200: rx_mtu_reg <= axil_ctrl_wdata; // RX MTU
+                16'h1000: begin
+                    // TDMA control
+                    if (axil_ctrl_wstrb[0]) begin
+                        tdma_enable_reg <= axil_ctrl_wdata[0];
+                    end
+                end
+                16'h1014: set_tdma_schedule_start_reg[29:0] <= axil_ctrl_wdata; // TDMA schedule start ns
+                16'h1018: set_tdma_schedule_start_reg[63:32] <= axil_ctrl_wdata; // TDMA schedule start sec l
+                16'h101C: begin
+                    // TDMA schedule start sec h
+                    set_tdma_schedule_start_reg[79:64] <= axil_ctrl_wdata;
+                    set_tdma_schedule_start_valid_reg <= 1'b1;
+                end
+                16'h1024: set_tdma_schedule_period_reg[29:0] <= axil_ctrl_wdata; // TDMA schedule period ns
+                16'h1028: set_tdma_schedule_period_reg[63:32] <= axil_ctrl_wdata; // TDMA schedule period sec l
+                16'h102C: begin
+                    // TDMA schedule period sec h
+                    set_tdma_schedule_period_reg[79:64] <= axil_ctrl_wdata;
+                    set_tdma_schedule_period_valid_reg <= 1'b1;
+                end
+                16'h1034: set_tdma_timeslot_period_reg[29:0] <= axil_ctrl_wdata; // TDMA timeslot period ns
+                16'h1038: set_tdma_timeslot_period_reg[63:32] <= axil_ctrl_wdata; // TDMA timeslot period sec l
+                16'h103C: begin
+                    // TDMA timeslot period sec h
+                    set_tdma_timeslot_period_reg[79:64] <= axil_ctrl_wdata;
+                    set_tdma_timeslot_period_valid_reg <= 1'b1;
+                end
+                16'h1044: set_tdma_active_period_reg[29:0] <= axil_ctrl_wdata; // TDMA active period ns
+                16'h1048: set_tdma_active_period_reg[63:32] <= axil_ctrl_wdata; // TDMA active period sec l
+                16'h104C: begin
+                    // TDMA active period sec h
+                    set_tdma_active_period_reg[79:64] <= axil_ctrl_wdata;
+                    set_tdma_active_period_valid_reg <= 1'b1;
+                end
+            endcase
+        end
+
+        
+    end
+
+    if (axil_ctrl_arvalid && !axil_ctrl_rvalid) begin
+        // read operation
+        axil_ctrl_arready_reg <= 1'b1;
+        axil_ctrl_rvalid_reg <= 1'b1;
+        axil_ctrl_rdata_reg <= {AXIL_DATA_WIDTH{1'b0}};
+        if(RMT_TX_ENABLE) begin
+            case ({axil_ctrl_araddr[15:2], 2'b00})
+                16'h0000: axil_ctrl_rdata_reg <= 32'd0;       // port_id
+                16'h0004: begin
+                    // port_features
+                    axil_ctrl_rdata_reg[0] <= RX_RSS_ENABLE && RX_HASH_ENABLE;
+                    axil_ctrl_rdata_reg[4] <= PTP_TS_ENABLE;
+                    axil_ctrl_rdata_reg[8] <= TX_CHECKSUM_ENABLE;
+                    axil_ctrl_rdata_reg[9] <= RX_CHECKSUM_ENABLE;
+                    axil_ctrl_rdata_reg[10] <= RX_HASH_ENABLE;
+                end
+                16'h0008: axil_ctrl_rdata_reg <= MAX_TX_SIZE; // port_mtu
+                16'h0010: axil_ctrl_rdata_reg <= SCHED_COUNT; // scheduler_count
+                16'h0014: axil_ctrl_rdata_reg <= 2**AXIL_SCHED_ADDR_WIDTH; // scheduler_offset
+                16'h0018: axil_ctrl_rdata_reg <= 2**AXIL_SCHED_ADDR_WIDTH; // scheduler_stride
+                16'h001C: axil_ctrl_rdata_reg <= 32'd0;       // scheduler_type
+                16'h0040: begin
+                    // Scheduler enable
+                    axil_ctrl_rdata_reg[0] <= sched_enable_reg;
+                end
+                16'h0080: axil_ctrl_rdata_reg <= rss_mask_reg; // RSS mask
+                16'h0100: axil_ctrl_rdata_reg <= tx_mtu_reg; // TX MTU
+                16'h0200: axil_ctrl_rdata_reg <= rx_mtu_reg; // RX MTU
+                16'h1000: begin
+                    // TDMA control
+                    axil_ctrl_rdata_reg[0] <= tdma_enable_reg;
+                end
+                16'h1004: begin
+                    // TDMA status
+                    axil_ctrl_rdata_reg[0] <= tdma_locked;
+                    axil_ctrl_rdata_reg[1] <= tdma_error;
+                end
+                16'h1008: axil_ctrl_rdata_reg <= 2**TDMA_INDEX_WIDTH; // TDMA timeslot count
+                16'h1014: axil_ctrl_rdata_reg <= set_tdma_schedule_start_reg[29:0]; // TDMA schedule start ns
+                16'h1018: axil_ctrl_rdata_reg <= set_tdma_schedule_start_reg[63:32]; // TDMA schedule start sec l
+                16'h101C: axil_ctrl_rdata_reg <= set_tdma_schedule_start_reg[79:64]; // TDMA schedule start sec h
+                16'h1024: axil_ctrl_rdata_reg <= set_tdma_schedule_period_reg[29:0]; // TDMA schedule period ns
+                16'h1028: axil_ctrl_rdata_reg <= set_tdma_schedule_period_reg[63:32]; // TDMA schedule period sec l
+                16'h102C: axil_ctrl_rdata_reg <= set_tdma_schedule_period_reg[79:64]; // TDMA schedule period sec h
+                16'h1034: axil_ctrl_rdata_reg <= set_tdma_timeslot_period_reg[29:0]; // TDMA timeslot period ns
+                16'h1038: axil_ctrl_rdata_reg <= set_tdma_timeslot_period_reg[63:32]; // TDMA timeslot period sec l
+                16'h103C: axil_ctrl_rdata_reg <= set_tdma_timeslot_period_reg[79:64]; // TDMA timeslot period sec h
+                16'h1044: axil_ctrl_rdata_reg <= set_tdma_active_period_reg[29:0]; // TDMA active period ns
+                16'h1048: axil_ctrl_rdata_reg <= set_tdma_active_period_reg[63:32]; // TDMA active period sec l
+                16'h104C: axil_ctrl_rdata_reg <= set_tdma_active_period_reg[79:64]; // TDMA active period sec h
+                16'h2024: begin
+                    axil_ctrl_rdata_reg <= ctrl_token;
+                end
+                16'h2028: begin
+                    axil_ctrl_rdata_reg <= vlan_drop_flags;
+                end
+            endcase
+        end
+        else begin
+            case ({axil_ctrl_araddr[15:2], 2'b00})
+                16'h0000: axil_ctrl_rdata_reg <= 32'd0;       // port_id
+                16'h0004: begin
+                    // port_features
+                    axil_ctrl_rdata_reg[0] <= RX_RSS_ENABLE && RX_HASH_ENABLE;
+                    axil_ctrl_rdata_reg[4] <= PTP_TS_ENABLE;
+                    axil_ctrl_rdata_reg[8] <= TX_CHECKSUM_ENABLE;
+                    axil_ctrl_rdata_reg[9] <= RX_CHECKSUM_ENABLE;
+                    axil_ctrl_rdata_reg[10] <= RX_HASH_ENABLE;
+                end
+                16'h0008: axil_ctrl_rdata_reg <= MAX_TX_SIZE; // port_mtu
+                16'h0010: axil_ctrl_rdata_reg <= SCHED_COUNT; // scheduler_count
+                16'h0014: axil_ctrl_rdata_reg <= 2**AXIL_SCHED_ADDR_WIDTH; // scheduler_offset
+                16'h0018: axil_ctrl_rdata_reg <= 2**AXIL_SCHED_ADDR_WIDTH; // scheduler_stride
+                16'h001C: axil_ctrl_rdata_reg <= 32'd0;       // scheduler_type
+                16'h0040: begin
+                    // Scheduler enable
+                    axil_ctrl_rdata_reg[0] <= sched_enable_reg;
+                end
+                16'h0080: axil_ctrl_rdata_reg <= rss_mask_reg; // RSS mask
+                16'h0100: axil_ctrl_rdata_reg <= tx_mtu_reg; // TX MTU
+                16'h0200: axil_ctrl_rdata_reg <= rx_mtu_reg; // RX MTU
+                16'h1000: begin
+                    // TDMA control
+                    axil_ctrl_rdata_reg[0] <= tdma_enable_reg;
+                end
+                16'h1004: begin
+                    // TDMA status
+                    axil_ctrl_rdata_reg[0] <= tdma_locked;
+                    axil_ctrl_rdata_reg[1] <= tdma_error;
+                end
+                16'h1008: axil_ctrl_rdata_reg <= 2**TDMA_INDEX_WIDTH; // TDMA timeslot count
+                16'h1014: axil_ctrl_rdata_reg <= set_tdma_schedule_start_reg[29:0]; // TDMA schedule start ns
+                16'h1018: axil_ctrl_rdata_reg <= set_tdma_schedule_start_reg[63:32]; // TDMA schedule start sec l
+                16'h101C: axil_ctrl_rdata_reg <= set_tdma_schedule_start_reg[79:64]; // TDMA schedule start sec h
+                16'h1024: axil_ctrl_rdata_reg <= set_tdma_schedule_period_reg[29:0]; // TDMA schedule period ns
+                16'h1028: axil_ctrl_rdata_reg <= set_tdma_schedule_period_reg[63:32]; // TDMA schedule period sec l
+                16'h102C: axil_ctrl_rdata_reg <= set_tdma_schedule_period_reg[79:64]; // TDMA schedule period sec h
+                16'h1034: axil_ctrl_rdata_reg <= set_tdma_timeslot_period_reg[29:0]; // TDMA timeslot period ns
+                16'h1038: axil_ctrl_rdata_reg <= set_tdma_timeslot_period_reg[63:32]; // TDMA timeslot period sec l
+                16'h103C: axil_ctrl_rdata_reg <= set_tdma_timeslot_period_reg[79:64]; // TDMA timeslot period sec h
+                16'h1044: axil_ctrl_rdata_reg <= set_tdma_active_period_reg[29:0]; // TDMA active period ns
+                16'h1048: axil_ctrl_rdata_reg <= set_tdma_active_period_reg[63:32]; // TDMA active period sec l
+                16'h104C: axil_ctrl_rdata_reg <= set_tdma_active_period_reg[79:64]; // TDMA active period sec h
+            endcase
+        end
+    end
+
+    if (rst) begin
+        axil_ctrl_awready_reg <= 1'b0;
+        axil_ctrl_wready_reg <= 1'b0;
+        axil_ctrl_bvalid_reg <= 1'b0;
+        axil_ctrl_arready_reg <= 1'b0;
+        axil_ctrl_rvalid_reg <= 1'b0;
+
+        sched_enable_reg <= 1'b0;
+        rss_mask_reg <= 0;
+        tx_mtu_reg <= MAX_TX_SIZE;
+        rx_mtu_reg <= MAX_RX_SIZE;
+        tdma_enable_reg <= 1'b0;
+    end
+end
+
+// AXI lite interconnect
+parameter AXIL_S_COUNT = 1;
+parameter AXIL_M_COUNT = SCHED_COUNT+1;
+
+axil_interconnect #(
+    .DATA_WIDTH(AXIL_DATA_WIDTH),
+    .ADDR_WIDTH(AXIL_ADDR_WIDTH),
+    .STRB_WIDTH(AXIL_STRB_WIDTH),
+    .S_COUNT(AXIL_S_COUNT),
+    .M_COUNT(AXIL_M_COUNT),
+    .M_ADDR_WIDTH({AXIL_M_COUNT{w_32(AXIL_SCHED_ADDR_WIDTH)}}),
+    .M_CONNECT_READ({AXIL_M_COUNT{{AXIL_S_COUNT{1'b1}}}}),
+    .M_CONNECT_WRITE({AXIL_M_COUNT{{AXIL_S_COUNT{1'b1}}}})
+)
+axil_interconnect_inst (
+    .clk(clk),
+    .rst(rst),
+    .s_axil_awaddr(s_axil_awaddr),
+    .s_axil_awprot(s_axil_awprot),
+    .s_axil_awvalid(s_axil_awvalid),
+    .s_axil_awready(s_axil_awready),
+    .s_axil_wdata(s_axil_wdata),
+    .s_axil_wstrb(s_axil_wstrb),
+    .s_axil_wvalid(s_axil_wvalid),
+    .s_axil_wready(s_axil_wready),
+    .s_axil_bresp(s_axil_bresp),
+    .s_axil_bvalid(s_axil_bvalid),
+    .s_axil_bready(s_axil_bready),
+    .s_axil_araddr(s_axil_araddr),
+    .s_axil_arprot(s_axil_arprot),
+    .s_axil_arvalid(s_axil_arvalid),
+    .s_axil_arready(s_axil_arready),
+    .s_axil_rdata(s_axil_rdata),
+    .s_axil_rresp(s_axil_rresp),
+    .s_axil_rvalid(s_axil_rvalid),
+    .s_axil_rready(s_axil_rready),
+    .m_axil_awaddr( {axil_sched_awaddr,  axil_ctrl_awaddr} ),
+    .m_axil_awprot( {axil_sched_awprot,  axil_ctrl_awprot} ),
+    .m_axil_awvalid({axil_sched_awvalid, axil_ctrl_awvalid} ),
+    .m_axil_awready({axil_sched_awready, axil_ctrl_awready} ),
+    .m_axil_wdata(  {axil_sched_wdata,   axil_ctrl_wdata} ),
+    .m_axil_wstrb(  {axil_sched_wstrb,   axil_ctrl_wstrb} ),
+    .m_axil_wvalid( {axil_sched_wvalid,  axil_ctrl_wvalid} ),
+    .m_axil_wready( {axil_sched_wready,  axil_ctrl_wready} ),
+    .m_axil_bresp(  {axil_sched_bresp,   axil_ctrl_bresp} ),
+    .m_axil_bvalid( {axil_sched_bvalid,  axil_ctrl_bvalid} ),
+    .m_axil_bready( {axil_sched_bready,  axil_ctrl_bready} ),
+    .m_axil_araddr( {axil_sched_araddr,  axil_ctrl_araddr} ),
+    .m_axil_arprot( {axil_sched_arprot,  axil_ctrl_arprot} ),
+    .m_axil_arvalid({axil_sched_arvalid, axil_ctrl_arvalid} ),
+    .m_axil_arready({axil_sched_arready, axil_ctrl_arready} ),
+    .m_axil_rdata(  {axil_sched_rdata,   axil_ctrl_rdata} ),
+    .m_axil_rresp(  {axil_sched_rresp,   axil_ctrl_rresp} ),
+    .m_axil_rvalid( {axil_sched_rvalid,  axil_ctrl_rvalid} ),
+    .m_axil_rready( {axil_sched_rready,  axil_ctrl_rready} )
+);
+
+desc_op_mux #(
+    .PORTS(2),
+    .SELECT_WIDTH(1),
+    .QUEUE_INDEX_WIDTH(QUEUE_INDEX_WIDTH),
+    .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+    .CPL_QUEUE_INDEX_WIDTH(CPL_QUEUE_INDEX_WIDTH),
+    .S_REQ_TAG_WIDTH(DESC_REQ_TAG_WIDTH_INT),
+    .M_REQ_TAG_WIDTH(DESC_REQ_TAG_WIDTH),
+    .AXIS_DATA_WIDTH(AXIS_DESC_DATA_WIDTH),
+    .AXIS_KEEP_WIDTH(AXIS_DESC_KEEP_WIDTH),
+    .ARB_TYPE("ROUND_ROBIN"),
+    .LSB_PRIORITY("HIGH")
+)
+desc_op_mux_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Descriptor request output
+     */
+    .m_axis_req_sel(m_axis_desc_req_sel),
+    .m_axis_req_queue(m_axis_desc_req_queue),
+    .m_axis_req_tag(m_axis_desc_req_tag),
+    .m_axis_req_valid(m_axis_desc_req_valid),
+    .m_axis_req_ready(m_axis_desc_req_ready),
+
+    /*
+     * Descriptor request status input
+     */
+    .s_axis_req_status_queue(s_axis_desc_req_status_queue),
+    .s_axis_req_status_ptr(s_axis_desc_req_status_ptr),
+    .s_axis_req_status_cpl(s_axis_desc_req_status_cpl),
+    .s_axis_req_status_tag(s_axis_desc_req_status_tag),
+    .s_axis_req_status_empty(s_axis_desc_req_status_empty),
+    .s_axis_req_status_error(s_axis_desc_req_status_error),
+    .s_axis_req_status_valid(s_axis_desc_req_status_valid),
+
+    /*
+     * Descriptor data input
+     */
+    .s_axis_desc_tdata(s_axis_desc_tdata),
+    .s_axis_desc_tkeep(s_axis_desc_tkeep),
+    .s_axis_desc_tvalid(s_axis_desc_tvalid),
+    .s_axis_desc_tready(s_axis_desc_tready),
+    .s_axis_desc_tlast(s_axis_desc_tlast),
+    .s_axis_desc_tid(s_axis_desc_tid),
+    .s_axis_desc_tuser(s_axis_desc_tuser),
+
+    /*
+     * Descriptor request input
+     */
+    .s_axis_req_sel({rx_desc_req_sel, tx_desc_req_sel}),
+    .s_axis_req_queue({rx_desc_req_queue, tx_desc_req_queue}),
+    .s_axis_req_tag({rx_desc_req_tag, tx_desc_req_tag}),
+    .s_axis_req_valid({rx_desc_req_valid, tx_desc_req_valid}),
+    .s_axis_req_ready({rx_desc_req_ready, tx_desc_req_ready}),
+
+    /*
+     * Descriptor response output
+     */
+    .m_axis_req_status_queue({rx_desc_req_status_queue, tx_desc_req_status_queue}),
+    .m_axis_req_status_ptr({rx_desc_req_status_ptr, tx_desc_req_status_ptr}),
+    .m_axis_req_status_cpl({rx_desc_req_status_cpl, tx_desc_req_status_cpl}),
+    .m_axis_req_status_tag({rx_desc_req_status_tag, tx_desc_req_status_tag}),
+    .m_axis_req_status_empty({rx_desc_req_status_empty, tx_desc_req_status_empty}),
+    .m_axis_req_status_error({rx_desc_req_status_error, tx_desc_req_status_error}),
+    .m_axis_req_status_valid({rx_desc_req_status_valid, tx_desc_req_status_valid}),
+
+    /*
+     * Descriptor data output
+     */
+    .m_axis_desc_tdata({rx_desc_tdata, tx_desc_tdata}),
+    .m_axis_desc_tkeep({rx_desc_tkeep, tx_desc_tkeep}),
+    .m_axis_desc_tvalid({rx_desc_tvalid, tx_desc_tvalid}),
+    .m_axis_desc_tready({rx_desc_tready, tx_desc_tready}),
+    .m_axis_desc_tlast({rx_desc_tlast, tx_desc_tlast}),
+    .m_axis_desc_tid({rx_desc_tid, tx_desc_tid}),
+    .m_axis_desc_tuser({rx_desc_tuser, tx_desc_tuser})
+);
+
+cpl_op_mux #(
+    .PORTS(2),
+    .SELECT_WIDTH(1),
+    .QUEUE_INDEX_WIDTH(QUEUE_INDEX_WIDTH),
+    .S_REQ_TAG_WIDTH(DESC_REQ_TAG_WIDTH_INT),
+    .M_REQ_TAG_WIDTH(DESC_REQ_TAG_WIDTH),
+    .CPL_SIZE(CPL_SIZE),
+    .ARB_TYPE("ROUND_ROBIN"),
+    .LSB_PRIORITY("HIGH")
+)
+cpl_op_mux_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Completion request output
+     */
+    .m_axis_req_sel(m_axis_cpl_req_sel),
+    .m_axis_req_queue(m_axis_cpl_req_queue),
+    .m_axis_req_tag(m_axis_cpl_req_tag),
+    .m_axis_req_data(m_axis_cpl_req_data),
+    .m_axis_req_valid(m_axis_cpl_req_valid),
+    .m_axis_req_ready(m_axis_cpl_req_ready),
+
+    /*
+     * Completion request status input
+     */
+    .s_axis_req_status_tag(s_axis_cpl_req_status_tag),
+    .s_axis_req_status_full(s_axis_cpl_req_status_full),
+    .s_axis_req_status_error(s_axis_cpl_req_status_error),
+    .s_axis_req_status_valid(s_axis_cpl_req_status_valid),
+
+    /*
+     * Completion request input
+     */
+    .s_axis_req_sel({rx_cpl_req_sel, tx_cpl_req_sel}),
+    .s_axis_req_queue({rx_cpl_req_queue, tx_cpl_req_queue}),
+    .s_axis_req_tag({rx_cpl_req_tag, tx_cpl_req_tag}),
+    .s_axis_req_data({rx_cpl_req_data, tx_cpl_req_data}),
+    .s_axis_req_valid({rx_cpl_req_valid, tx_cpl_req_valid}),
+    .s_axis_req_ready({rx_cpl_req_ready, tx_cpl_req_ready}),
+
+    /*
+     * Completion response output
+     */
+    .m_axis_req_status_tag({rx_cpl_req_status_tag, tx_cpl_req_status_tag}),
+    .m_axis_req_status_full({rx_cpl_req_status_full, tx_cpl_req_status_full}),
+    .m_axis_req_status_error({rx_cpl_req_status_error, tx_cpl_req_status_error}),
+    .m_axis_req_status_valid({rx_cpl_req_status_valid, tx_cpl_req_status_valid})
+);
+
+generate
+
+if (TX_SCHEDULER == "RR" || TX_SCHEDULER == "TDMA_RR") begin
+
+    tx_scheduler_rr #(
+        .AXIL_DATA_WIDTH(AXIL_DATA_WIDTH),
+        .AXIL_ADDR_WIDTH(AXIL_SCHED_ADDR_WIDTH),
+        .AXIL_STRB_WIDTH(AXIL_STRB_WIDTH),
+        .DMA_CLIENT_LEN_WIDTH(DMA_CLIENT_LEN_WIDTH),
+        .REQ_TAG_WIDTH(REQ_TAG_WIDTH),
+        .OP_TABLE_SIZE(TX_SCHEDULER_OP_TABLE_SIZE),
+        .QUEUE_INDEX_WIDTH(TX_QUEUE_INDEX_WIDTH),
+        .PIPELINE(TX_SCHEDULER_PIPELINE),
+        .SCHED_CTRL_ENABLE(TX_SCHEDULER == "TDMA_RR")
+    )
+    tx_scheduler_inst (
+        .clk(clk),
+        .rst(rst),
+
+        /*
+         * Transmit request output (queue index)
+         */
+        .m_axis_tx_req_queue(tx_req_queue),
+        .m_axis_tx_req_tag(tx_req_tag),
+        .m_axis_tx_req_valid(tx_req_valid),
+        .m_axis_tx_req_ready(tx_req_ready),
+
+        /*
+         * Transmit request status input
+         */
+        .s_axis_tx_req_status_len(tx_req_status_len),
+        .s_axis_tx_req_status_tag(tx_req_status_tag),
+        .s_axis_tx_req_status_valid(tx_req_status_valid),
+
+        /*
+         * Doorbell input
+         */
+        .s_axis_doorbell_queue(s_axis_tx_doorbell_queue),
+        .s_axis_doorbell_valid(s_axis_tx_doorbell_valid),
+
+        /*
+         * Scheduler control input
+         */
+        .s_axis_sched_ctrl_queue(tx_sched_ctrl_queue),
+        .s_axis_sched_ctrl_enable(tx_sched_ctrl_enable),
+        .s_axis_sched_ctrl_valid(tx_sched_ctrl_valid),
+        .s_axis_sched_ctrl_ready(tx_sched_ctrl_ready),
+
+        /*
+         * AXI-Lite slave interface
+         */
+        .s_axil_awaddr(axil_sched_awaddr[0*AXIL_ADDR_WIDTH +: AXIL_ADDR_WIDTH]),
+        .s_axil_awprot(axil_sched_awprot[0*3 +: 3]),
+        .s_axil_awvalid(axil_sched_awvalid[0*1 +: 1]),
+        .s_axil_awready(axil_sched_awready[0*1 +: 1]),
+        .s_axil_wdata(axil_sched_wdata[0*AXIL_DATA_WIDTH +: AXIL_DATA_WIDTH]),
+        .s_axil_wstrb(axil_sched_wstrb[0*AXIL_STRB_WIDTH +: AXIL_STRB_WIDTH]),
+        .s_axil_wvalid(axil_sched_wvalid[0*1 +: 1]),
+        .s_axil_wready(axil_sched_wready[0*1 +: 1]),
+        .s_axil_bresp(axil_sched_bresp[0*2 +: 2]),
+        .s_axil_bvalid(axil_sched_bvalid[0*1 +: 1]),
+        .s_axil_bready(axil_sched_bready[0*1 +: 1]),
+        .s_axil_araddr(axil_sched_araddr[0*AXIL_ADDR_WIDTH +: AXIL_ADDR_WIDTH]),
+        .s_axil_arprot(axil_sched_arprot[0*3 +: 3]),
+        .s_axil_arvalid(axil_sched_arvalid[0*1 +: 1]),
+        .s_axil_arready(axil_sched_arready[0*1 +: 1]),
+        .s_axil_rdata(axil_sched_rdata[0*AXIL_DATA_WIDTH +: AXIL_DATA_WIDTH]),
+        .s_axil_rresp(axil_sched_rresp[0*2 +: 2]),
+        .s_axil_rvalid(axil_sched_rvalid[0*1 +: 1]),
+        .s_axil_rready(axil_sched_rready[0*1 +: 1]),
+
+        /*
+         * Control
+         */
+        .enable(sched_enable_reg),
+        .active()
+    );
+
+end
+
+if (TX_SCHEDULER == "TDMA_RR") begin
+
+    tdma_scheduler #(
+        .INDEX_WIDTH(TDMA_INDEX_WIDTH),
+        .SCHEDULE_START_S(48'h0),
+        .SCHEDULE_START_NS(30'h0),
+        .SCHEDULE_PERIOD_S(48'd0),
+        .SCHEDULE_PERIOD_NS(30'd1000000),
+        .TIMESLOT_PERIOD_S(48'd0),
+        .TIMESLOT_PERIOD_NS(30'd100000),
+        .ACTIVE_PERIOD_S(48'd0),
+        .ACTIVE_PERIOD_NS(30'd100000)
+    )
+    tdma_scheduler_inst (
+        .clk(clk),
+        .rst(rst),
+        .input_ts_96(ptp_ts_96),
+        .input_ts_step(ptp_ts_step),
+        .enable(tdma_enable_reg),
+        .input_schedule_start(set_tdma_schedule_start_reg),
+        .input_schedule_start_valid(set_tdma_schedule_start_valid_reg),
+        .input_schedule_period(set_tdma_schedule_period_reg),
+        .input_schedule_period_valid(set_tdma_schedule_period_valid_reg),
+        .input_timeslot_period(set_tdma_timeslot_period_reg),
+        .input_timeslot_period_valid(set_tdma_timeslot_period_valid_reg),
+        .input_active_period(set_tdma_active_period_reg),
+        .input_active_period_valid(set_tdma_active_period_valid_reg),
+        .locked(tdma_locked),
+        .error(tdma_error),
+        .schedule_start(tdma_schedule_start),
+        .timeslot_index(tdma_timeslot_index),
+        .timeslot_start(tdma_timeslot_start),
+        .timeslot_end(tdma_timeslot_end),
+        .timeslot_active(tdma_timeslot_active)
+    );
+
+    tx_scheduler_ctrl_tdma #(
+        .AXIL_DATA_WIDTH(AXIL_DATA_WIDTH),
+        .AXIL_ADDR_WIDTH(AXIL_SCHED_ADDR_WIDTH),
+        .AXIL_STRB_WIDTH(AXIL_STRB_WIDTH),
+        .TDMA_INDEX_WIDTH(TDMA_INDEX_WIDTH),
+        .QUEUE_INDEX_WIDTH(TX_QUEUE_INDEX_WIDTH),
+        .PIPELINE(2)
+    )
+    tx_scheduler_ctrl_tdma_inst (
+        .clk(clk),
+        .rst(rst),
+
+        /*
+         * Scheduler control output
+         */
+        .m_axis_sched_ctrl_queue(tx_sched_ctrl_queue),
+        .m_axis_sched_ctrl_enable(tx_sched_ctrl_enable),
+        .m_axis_sched_ctrl_valid(tx_sched_ctrl_valid),
+        .m_axis_sched_ctrl_ready(tx_sched_ctrl_ready),
+
+        /*
+         * AXI-Lite slave interface
+         */
+        .s_axil_awaddr(axil_sched_awaddr[1*AXIL_ADDR_WIDTH +: AXIL_ADDR_WIDTH]),
+        .s_axil_awprot(axil_sched_awprot[1*3 +: 3]),
+        .s_axil_awvalid(axil_sched_awvalid[1*1 +: 1]),
+        .s_axil_awready(axil_sched_awready[1*1 +: 1]),
+        .s_axil_wdata(axil_sched_wdata[1*AXIL_DATA_WIDTH +: AXIL_DATA_WIDTH]),
+        .s_axil_wstrb(axil_sched_wstrb[1*AXIL_STRB_WIDTH +: AXIL_STRB_WIDTH]),
+        .s_axil_wvalid(axil_sched_wvalid[1*1 +: 1]),
+        .s_axil_wready(axil_sched_wready[1*1 +: 1]),
+        .s_axil_bresp(axil_sched_bresp[1*2 +: 2]),
+        .s_axil_bvalid(axil_sched_bvalid[1*1 +: 1]),
+        .s_axil_bready(axil_sched_bready[1*1 +: 1]),
+        .s_axil_araddr(axil_sched_araddr[1*AXIL_ADDR_WIDTH +: AXIL_ADDR_WIDTH]),
+        .s_axil_arprot(axil_sched_arprot[1*3 +: 3]),
+        .s_axil_arvalid(axil_sched_arvalid[1*1 +: 1]),
+        .s_axil_arready(axil_sched_arready[1*1 +: 1]),
+        .s_axil_rdata(axil_sched_rdata[1*AXIL_DATA_WIDTH +: AXIL_DATA_WIDTH]),
+        .s_axil_rresp(axil_sched_rresp[1*2 +: 2]),
+        .s_axil_rvalid(axil_sched_rvalid[1*1 +: 1]),
+        .s_axil_rready(axil_sched_rready[1*1 +: 1]),
+
+        /*
+         * TDMA schedule inputs
+         */
+        .tdma_schedule_start(tdma_schedule_start),
+        .tdma_timeslot_index(tdma_timeslot_index),
+        .tdma_timeslot_start(tdma_timeslot_start),
+        .tdma_timeslot_end(tdma_timeslot_end),
+        .tdma_timeslot_active(tdma_timeslot_active)
+    );
+
+end
+
+endgenerate
+
+axis_fifo #(
+    .DEPTH(TX_DESC_FIFO_SIZE*DESC_SIZE),
+    .DATA_WIDTH(AXIS_DESC_DATA_WIDTH),
+    .KEEP_WIDTH(AXIS_DESC_KEEP_WIDTH),
+    .LAST_ENABLE(1),
+    .ID_ENABLE(1),
+    .ID_WIDTH(DESC_REQ_TAG_WIDTH_INT),
+    .DEST_ENABLE(0),
+    .USER_ENABLE(0),
+    .FRAME_FIFO(0)
+)
+tx_desc_fifo (
+    .clk(clk),
+    .rst(rst),
+
+    // AXI input
+    .s_axis_tdata(tx_desc_tdata),
+    .s_axis_tkeep(tx_desc_tkeep),
+    .s_axis_tvalid(tx_desc_tvalid),
+    .s_axis_tready(tx_desc_tready),
+    .s_axis_tlast(tx_desc_tlast),
+    .s_axis_tid(tx_desc_tid),
+    .s_axis_tdest(0),
+    .s_axis_tuser(tx_desc_tuser),
+
+    // AXI output
+    .m_axis_tdata(tx_fifo_desc_tdata),
+    .m_axis_tkeep(tx_fifo_desc_tkeep),
+    .m_axis_tvalid(tx_fifo_desc_tvalid),
+    .m_axis_tready(tx_fifo_desc_tready),
+    .m_axis_tlast(tx_fifo_desc_tlast),
+    .m_axis_tid(tx_fifo_desc_tid),
+    .m_axis_tdest(),
+    .m_axis_tuser(tx_fifo_desc_tuser),
+
+    // Status
+    .status_overflow(),
+    .status_bad_frame(),
+    .status_good_frame()
+);
+
+tx_engine #(
+    .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+    .DMA_ADDR_WIDTH(DMA_ADDR_WIDTH),
+    .DMA_LEN_WIDTH(DMA_LEN_WIDTH),
+    .DMA_CLIENT_LEN_WIDTH(DMA_CLIENT_LEN_WIDTH),
+    .REQ_TAG_WIDTH(REQ_TAG_WIDTH),
+    .DESC_REQ_TAG_WIDTH(DESC_REQ_TAG_WIDTH_INT),
+    .DMA_TAG_WIDTH(DMA_TAG_WIDTH),
+    .DMA_CLIENT_TAG_WIDTH(DMA_CLIENT_TAG_WIDTH),
+    .QUEUE_REQ_TAG_WIDTH(QUEUE_REQ_TAG_WIDTH),
+    .QUEUE_OP_TAG_WIDTH(QUEUE_OP_TAG_WIDTH),
+    .QUEUE_INDEX_WIDTH(TX_QUEUE_INDEX_WIDTH),
+    .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+    .CPL_QUEUE_INDEX_WIDTH(TX_CPL_QUEUE_INDEX_WIDTH),
+    .DESC_TABLE_SIZE(TX_DESC_TABLE_SIZE),
+    .DESC_TABLE_DMA_OP_COUNT_WIDTH(DESC_TABLE_DMA_OP_COUNT_WIDTH),
+    .MAX_TX_SIZE(MAX_TX_SIZE),
+    .TX_BUFFER_OFFSET(0),
+    .TX_BUFFER_SIZE(TX_RAM_SIZE),
+    .TX_BUFFER_STEP_SIZE(SEG_COUNT*SEG_BE_WIDTH),
+    .DESC_SIZE(DESC_SIZE),
+    .CPL_SIZE(CPL_SIZE),
+    .MAX_DESC_REQ(TX_MAX_DESC_REQ),
+    .AXIS_DESC_DATA_WIDTH(AXIS_DESC_DATA_WIDTH),
+    .AXIS_DESC_KEEP_WIDTH(AXIS_DESC_KEEP_WIDTH),
+    .PTP_TS_ENABLE(PTP_TS_ENABLE),
+    .TX_CHECKSUM_ENABLE(TX_CHECKSUM_ENABLE)
+)
+tx_engine_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Transmit request input (queue index)
+     */
+    .s_axis_tx_req_queue(tx_req_queue),
+    .s_axis_tx_req_tag(tx_req_tag),
+    .s_axis_tx_req_valid(tx_req_valid),
+    .s_axis_tx_req_ready(tx_req_ready),
+
+    /*
+     * Transmit request status output
+     */
+    .m_axis_tx_req_status_len(tx_req_status_len),
+    .m_axis_tx_req_status_tag(tx_req_status_tag),
+    .m_axis_tx_req_status_valid(tx_req_status_valid),
+
+    /*
+     * Descriptor request output
+     */
+    .m_axis_desc_req_queue(tx_desc_req_queue),
+    .m_axis_desc_req_tag(tx_desc_req_tag),
+    .m_axis_desc_req_valid(tx_desc_req_valid),
+    .m_axis_desc_req_ready(tx_desc_req_ready),
+
+    /*
+     * Descriptor request status input
+     */
+    .s_axis_desc_req_status_queue(tx_desc_req_status_queue),
+    .s_axis_desc_req_status_ptr(tx_desc_req_status_ptr),
+    .s_axis_desc_req_status_cpl(tx_desc_req_status_cpl),
+    .s_axis_desc_req_status_tag(tx_desc_req_status_tag),
+    .s_axis_desc_req_status_empty(tx_desc_req_status_empty),
+    .s_axis_desc_req_status_error(tx_desc_req_status_error),
+    .s_axis_desc_req_status_valid(tx_desc_req_status_valid),
+
+    /*
+     * Descriptor data input
+     */
+    .s_axis_desc_tdata(tx_fifo_desc_tdata),
+    .s_axis_desc_tkeep(tx_fifo_desc_tkeep),
+    .s_axis_desc_tvalid(tx_fifo_desc_tvalid),
+    .s_axis_desc_tready(tx_fifo_desc_tready),
+    .s_axis_desc_tlast(tx_fifo_desc_tlast),
+    .s_axis_desc_tid(tx_fifo_desc_tid),
+    .s_axis_desc_tuser(tx_fifo_desc_tuser),
+
+    /*
+     * Completion request output
+     */
+    .m_axis_cpl_req_queue(tx_cpl_req_queue),
+    .m_axis_cpl_req_tag(tx_cpl_req_tag),
+    .m_axis_cpl_req_data(tx_cpl_req_data),
+    .m_axis_cpl_req_valid(tx_cpl_req_valid),
+    .m_axis_cpl_req_ready(tx_cpl_req_ready),
+
+    /*
+     * Completion request status input
+     */
+    .s_axis_cpl_req_status_tag(tx_cpl_req_status_tag),
+    .s_axis_cpl_req_status_full(tx_cpl_req_status_full),
+    .s_axis_cpl_req_status_error(tx_cpl_req_status_error),
+    .s_axis_cpl_req_status_valid(tx_cpl_req_status_valid),
+
+    /*
+     * DMA read descriptor output
+     */
+    .m_axis_dma_read_desc_dma_addr(m_axis_dma_read_desc_dma_addr),
+    .m_axis_dma_read_desc_ram_addr(m_axis_dma_read_desc_ram_addr),
+    .m_axis_dma_read_desc_len(m_axis_dma_read_desc_len),
+    .m_axis_dma_read_desc_tag(m_axis_dma_read_desc_tag),
+    .m_axis_dma_read_desc_valid(m_axis_dma_read_desc_valid),
+    .m_axis_dma_read_desc_ready(m_axis_dma_read_desc_ready),
+
+    /*
+     * DMA read descriptor status input
+     */
+    .s_axis_dma_read_desc_status_tag(s_axis_dma_read_desc_status_tag),
+    .s_axis_dma_read_desc_status_valid(s_axis_dma_read_desc_status_valid),
+
+    /*
+     * Transmit descriptor output
+     */
+    .m_axis_tx_desc_addr(dma_tx_desc_addr),
+    .m_axis_tx_desc_len(dma_tx_desc_len),
+    .m_axis_tx_desc_tag(dma_tx_desc_tag),
+    .m_axis_tx_desc_user(dma_tx_desc_user),
+    .m_axis_tx_desc_valid(dma_tx_desc_valid),
+    .m_axis_tx_desc_ready(dma_tx_desc_ready),
+
+    /*
+     * Transmit descriptor status input
+     */
+    .s_axis_tx_desc_status_tag(dma_tx_desc_status_tag),
+    .s_axis_tx_desc_status_valid(dma_tx_desc_status_valid),
+
+    /*
+     * Transmit checksum command output
+     */
+    .m_axis_tx_csum_cmd_csum_enable(tx_csum_cmd_csum_enable),
+    .m_axis_tx_csum_cmd_csum_start(tx_csum_cmd_csum_start),
+    .m_axis_tx_csum_cmd_csum_offset(tx_csum_cmd_csum_offset),
+    .m_axis_tx_csum_cmd_valid(tx_csum_cmd_valid),
+    .m_axis_tx_csum_cmd_ready(tx_csum_cmd_ready),
+
+    /*
+     * Transmit timestamp input
+     */
+    .s_axis_tx_ptp_ts_96(s_axis_tx_ptp_ts_96),
+    .s_axis_tx_ptp_ts_valid(s_axis_tx_ptp_ts_valid),
+    .s_axis_tx_ptp_ts_ready(s_axis_tx_ptp_ts_ready),
+
+    /*
+     * Configuration
+     */
+    .enable(1'b1)
+);
+
+axis_fifo #(
+    .DEPTH(RX_DESC_FIFO_SIZE*DESC_SIZE),
+    .DATA_WIDTH(AXIS_DESC_DATA_WIDTH),
+    .KEEP_WIDTH(AXIS_DESC_KEEP_WIDTH),
+    .LAST_ENABLE(1),
+    .ID_ENABLE(1),
+    .ID_WIDTH(DESC_REQ_TAG_WIDTH_INT),
+    .DEST_ENABLE(0),
+    .USER_ENABLE(0),
+    .FRAME_FIFO(0)
+)
+rx_desc_fifo (
+    .clk(clk),
+    .rst(rst),
+
+    // AXI input
+    .s_axis_tdata(rx_desc_tdata),
+    .s_axis_tkeep(rx_desc_tkeep),
+    .s_axis_tvalid(rx_desc_tvalid),
+    .s_axis_tready(rx_desc_tready),
+    .s_axis_tlast(rx_desc_tlast),
+    .s_axis_tid(rx_desc_tid),
+    .s_axis_tdest(0),
+    .s_axis_tuser(rx_desc_tuser),
+
+    // AXI output
+    .m_axis_tdata(rx_fifo_desc_tdata),
+    .m_axis_tkeep(rx_fifo_desc_tkeep),
+    .m_axis_tvalid(rx_fifo_desc_tvalid),
+    .m_axis_tready(rx_fifo_desc_tready),
+    .m_axis_tlast(rx_fifo_desc_tlast),
+    .m_axis_tid(rx_fifo_desc_tid),
+    .m_axis_tdest(),
+    .m_axis_tuser(rx_fifo_desc_tuser),
+
+    // Status
+    .status_overflow(),
+    .status_bad_frame(),
+    .status_good_frame()
+);
+
+rx_engine #(
+    .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+    .DMA_ADDR_WIDTH(DMA_ADDR_WIDTH),
+    .DMA_LEN_WIDTH(DMA_LEN_WIDTH),
+    .DMA_CLIENT_LEN_WIDTH(DMA_CLIENT_LEN_WIDTH),
+    .REQ_TAG_WIDTH(REQ_TAG_WIDTH),
+    .DESC_REQ_TAG_WIDTH(DESC_REQ_TAG_WIDTH_INT),
+    .DMA_TAG_WIDTH(DMA_TAG_WIDTH),
+    .DMA_CLIENT_TAG_WIDTH(DMA_CLIENT_TAG_WIDTH),
+    .QUEUE_REQ_TAG_WIDTH(QUEUE_REQ_TAG_WIDTH),
+    .QUEUE_OP_TAG_WIDTH(QUEUE_OP_TAG_WIDTH),
+    .QUEUE_INDEX_WIDTH(RX_QUEUE_INDEX_WIDTH),
+    .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+    .CPL_QUEUE_INDEX_WIDTH(RX_CPL_QUEUE_INDEX_WIDTH),
+    .DESC_TABLE_SIZE(RX_DESC_TABLE_SIZE),
+    .DESC_TABLE_DMA_OP_COUNT_WIDTH(DESC_TABLE_DMA_OP_COUNT_WIDTH),
+    .MAX_RX_SIZE(MAX_RX_SIZE),
+    .RX_BUFFER_OFFSET(0),
+    .RX_BUFFER_SIZE(RX_RAM_SIZE),
+    .RX_BUFFER_STEP_SIZE(SEG_COUNT*SEG_BE_WIDTH),
+    .DESC_SIZE(DESC_SIZE),
+    .CPL_SIZE(CPL_SIZE),
+    .MAX_DESC_REQ(RX_MAX_DESC_REQ),
+    .AXIS_DESC_DATA_WIDTH(AXIS_DESC_DATA_WIDTH),
+    .AXIS_DESC_KEEP_WIDTH(AXIS_DESC_KEEP_WIDTH),
+    .PTP_TS_ENABLE(PTP_TS_ENABLE),
+    .RX_HASH_ENABLE(RX_HASH_ENABLE),
+    .RX_CHECKSUM_ENABLE(RX_CHECKSUM_ENABLE)
+)
+rx_engine_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Receive request input (queue index)
+     */
+    .s_axis_rx_req_queue(rx_req_queue),
+    .s_axis_rx_req_tag(rx_req_tag),
+    .s_axis_rx_req_valid(rx_req_valid),
+    .s_axis_rx_req_ready(rx_req_ready),
+
+    /*
+     * Receive request status output
+     */
+    .m_axis_rx_req_status_tag(rx_req_status_tag),
+    .m_axis_rx_req_status_valid(rx_req_status_valid),
+
+    /*
+     * Descriptor request output
+     */
+    .m_axis_desc_req_queue(rx_desc_req_queue),
+    .m_axis_desc_req_tag(rx_desc_req_tag),
+    .m_axis_desc_req_valid(rx_desc_req_valid),
+    .m_axis_desc_req_ready(rx_desc_req_ready),
+
+    /*
+     * Descriptor request status input
+     */
+    .s_axis_desc_req_status_queue(rx_desc_req_status_queue),
+    .s_axis_desc_req_status_ptr(rx_desc_req_status_ptr),
+    .s_axis_desc_req_status_cpl(rx_desc_req_status_cpl),
+    .s_axis_desc_req_status_tag(rx_desc_req_status_tag),
+    .s_axis_desc_req_status_empty(rx_desc_req_status_empty),
+    .s_axis_desc_req_status_error(rx_desc_req_status_error),
+    .s_axis_desc_req_status_valid(rx_desc_req_status_valid),
+
+    /*
+     * Descriptor data input
+     */
+    .s_axis_desc_tdata(rx_fifo_desc_tdata),
+    .s_axis_desc_tkeep(rx_fifo_desc_tkeep),
+    .s_axis_desc_tvalid(rx_fifo_desc_tvalid),
+    .s_axis_desc_tready(rx_fifo_desc_tready),
+    .s_axis_desc_tlast(rx_fifo_desc_tlast),
+    .s_axis_desc_tid(rx_fifo_desc_tid),
+    .s_axis_desc_tuser(rx_fifo_desc_tuser),
+
+    /*
+     * Completion request output
+     */
+    .m_axis_cpl_req_queue(rx_cpl_req_queue),
+    .m_axis_cpl_req_tag(rx_cpl_req_tag),
+    .m_axis_cpl_req_data(rx_cpl_req_data),
+    .m_axis_cpl_req_valid(rx_cpl_req_valid),
+    .m_axis_cpl_req_ready(rx_cpl_req_ready),
+
+    /*
+     * Completion request status input
+     */
+    .s_axis_cpl_req_status_tag(rx_cpl_req_status_tag),
+    .s_axis_cpl_req_status_full(rx_cpl_req_status_full),
+    .s_axis_cpl_req_status_error(rx_cpl_req_status_error),
+    .s_axis_cpl_req_status_valid(rx_cpl_req_status_valid),
+
+    /*
+     * DMA write descriptor output
+     */
+    .m_axis_dma_write_desc_dma_addr(m_axis_dma_write_desc_dma_addr),
+    .m_axis_dma_write_desc_ram_addr(m_axis_dma_write_desc_ram_addr),
+    .m_axis_dma_write_desc_len(m_axis_dma_write_desc_len),
+    .m_axis_dma_write_desc_tag(m_axis_dma_write_desc_tag),
+    .m_axis_dma_write_desc_valid(m_axis_dma_write_desc_valid),
+    .m_axis_dma_write_desc_ready(m_axis_dma_write_desc_ready),
+
+    /*
+     * DMA write descriptor status input
+     */
+    .s_axis_dma_write_desc_status_tag(s_axis_dma_write_desc_status_tag),
+    .s_axis_dma_write_desc_status_valid(s_axis_dma_write_desc_status_valid),
+
+    /*
+     * Receive descriptor output
+     */
+    .m_axis_rx_desc_addr(dma_rx_desc_addr),
+    .m_axis_rx_desc_len(dma_rx_desc_len),
+    .m_axis_rx_desc_tag(dma_rx_desc_tag),
+    .m_axis_rx_desc_valid(dma_rx_desc_valid),
+    .m_axis_rx_desc_ready(dma_rx_desc_ready),
+
+    /*
+     * Receive descriptor status input
+     */
+    .s_axis_rx_desc_status_len(dma_rx_desc_status_len),
+    .s_axis_rx_desc_status_tag(dma_rx_desc_status_tag),
+    .s_axis_rx_desc_status_user(dma_rx_desc_status_user),
+    .s_axis_rx_desc_status_valid(dma_rx_desc_status_valid),
+
+    /*
+     * Receive timestamp input
+     */
+    .s_axis_rx_ptp_ts_96(s_axis_rx_ptp_ts_96),
+    .s_axis_rx_ptp_ts_valid(s_axis_rx_ptp_ts_valid),
+    .s_axis_rx_ptp_ts_ready(s_axis_rx_ptp_ts_ready),
+
+    /*
+     * Receive hash input
+     */
+    .s_axis_rx_hash(rx_fifo_hash),
+    .s_axis_rx_hash_type(rx_fifo_hash_type),
+    .s_axis_rx_hash_valid(rx_fifo_hash_valid),
+    .s_axis_rx_hash_ready(rx_fifo_hash_ready),
+
+    /*
+     * Receive checksum input
+     */
+    .s_axis_rx_csum(rx_fifo_csum),
+    .s_axis_rx_csum_valid(rx_fifo_csum_valid),
+    .s_axis_rx_csum_ready(rx_fifo_csum_ready),
+
+    /*
+     * Configuration
+     */
+    .mtu(rx_mtu_reg),
+    .enable(1'b1)
+);
+
+generate
+
+if (RX_HASH_ENABLE) begin
+
+    rx_hash #(
+        .DATA_WIDTH(AXIS_DATA_WIDTH)
+    )
+    rx_hash_inst (
+        .clk(clk),
+        .rst(rst),
+        .s_axis_tdata(rx_axis_tdata),
+        .s_axis_tkeep(rx_axis_tkeep),
+        .s_axis_tvalid(rx_axis_tvalid & rx_axis_tready),
+        .s_axis_tlast(rx_axis_tlast),
+        .hash_key(320'h6d5a56da255b0ec24167253d43a38fb0d0ca2bcbae7b30b477cb2da38030f20c6a42b73bbeac01fa),
+        .m_axis_hash(rx_hash),
+        .m_axis_hash_type(rx_hash_type),
+        .m_axis_hash_valid(rx_hash_valid)
+    );
+
+    axis_fifo #(
+        .DEPTH(32),
+        .DATA_WIDTH(32+4),
+        .KEEP_ENABLE(0),
+        .LAST_ENABLE(0),
+        .ID_ENABLE(0),
+        .DEST_ENABLE(0),
+        .USER_ENABLE(0),
+        .FRAME_FIFO(0)
+    )
+    rx_hash_fifo (
+        .clk(clk),
+        .rst(rst),
+
+        // AXI input
+        .s_axis_tdata({rx_hash_type, rx_hash}),
+        .s_axis_tkeep(0),
+        .s_axis_tvalid(rx_hash_valid),
+        .s_axis_tready(),
+        .s_axis_tlast(0),
+        .s_axis_tid(0),
+        .s_axis_tdest(0),
+        .s_axis_tuser(0),
+
+        // AXI output
+        .m_axis_tdata({rx_fifo_hash_type, rx_fifo_hash}),
+        .m_axis_tkeep(),
+        .m_axis_tvalid(rx_fifo_hash_valid),
+        .m_axis_tready(rx_fifo_hash_ready),
+        .m_axis_tlast(),
+        .m_axis_tid(),
+        .m_axis_tdest(),
+        .m_axis_tuser(),
+
+        // Status
+        .status_overflow(),
+        .status_bad_frame(),
+        .status_good_frame()
+    );
+
+end else begin
+
+    assign rx_fifo_hash = 32'd0;
+    assign rx_fifo_type = 4'd0;
+    assign rx_fifo_hash_valid = 1'b0;
+
+end
+
+if (RX_RSS_ENABLE && RX_HASH_ENABLE) begin
+
+    axis_fifo #(
+        .DEPTH(AXIS_KEEP_WIDTH*32),
+        .DATA_WIDTH(AXIS_DATA_WIDTH),
+        .KEEP_ENABLE(AXIS_KEEP_WIDTH > 1),
+        .KEEP_WIDTH(AXIS_KEEP_WIDTH),
+        .LAST_ENABLE(1),
+        .ID_ENABLE(0),
+        .DEST_ENABLE(0),
+        .USER_ENABLE(1),
+        .USER_WIDTH(1),
+        .FRAME_FIFO(0)
+    )
+    rx_hash_data_fifo (
+        .clk(clk),
+        .rst(rst),
+
+        // AXI input
+        .s_axis_tdata(rx_axis_tdata),
+        .s_axis_tkeep(rx_axis_tkeep),
+        .s_axis_tvalid(rx_axis_tvalid),
+        .s_axis_tready(rx_axis_tready),
+        .s_axis_tlast(rx_axis_tlast),
+        .s_axis_tid(0),
+        .s_axis_tdest(0),
+        .s_axis_tuser(rx_axis_tuser),
+
+        // AXI output
+        .m_axis_tdata(rx_axis_tdata_int),
+        .m_axis_tkeep(rx_axis_tkeep_int),
+        .m_axis_tvalid(rx_axis_tvalid_int),
+        .m_axis_tready(rx_axis_tready_int),
+        .m_axis_tlast(rx_axis_tlast_int),
+        .m_axis_tid(),
+        .m_axis_tdest(),
+        .m_axis_tuser(rx_axis_tuser_int),
+
+        // Status
+        .status_overflow(),
+        .status_bad_frame(),
+        .status_good_frame()
+    );
+
+    // Generate RX requests (RSS)
+    assign rx_req_tag = 0;
+
+    axis_fifo #(
+        .DEPTH(32),
+        .DATA_WIDTH(RX_QUEUE_INDEX_WIDTH),
+        .KEEP_ENABLE(0),
+        .LAST_ENABLE(0),
+        .ID_ENABLE(0),
+        .DEST_ENABLE(0),
+        .USER_ENABLE(0),
+        .FRAME_FIFO(0)
+    )
+    rx_req_fifo (
+        .clk(clk),
+        .rst(rst),
+
+        // AXI input
+        .s_axis_tdata(rx_hash & rss_mask_reg),
+        .s_axis_tkeep(0),
+        .s_axis_tvalid(rx_hash_valid),
+        .s_axis_tready(),
+        .s_axis_tlast(0),
+        .s_axis_tid(0),
+        .s_axis_tdest(0),
+        .s_axis_tuser(0),
+
+        // AXI output
+        .m_axis_tdata(rx_req_queue),
+        .m_axis_tkeep(),
+        .m_axis_tvalid(rx_req_valid),
+        .m_axis_tready(rx_req_ready),
+        .m_axis_tlast(),
+        .m_axis_tid(),
+        .m_axis_tdest(),
+        .m_axis_tuser(),
+
+        // Status
+        .status_overflow(),
+        .status_bad_frame(),
+        .status_good_frame()
+    );
+
+end else begin
+
+    assign rx_axis_tdata_int = rx_axis_tdata;
+    assign rx_axis_tkeep_int = rx_axis_tkeep;
+    assign rx_axis_tvalid_int = rx_axis_tvalid;
+    assign rx_axis_tready = rx_axis_tready_int;
+    assign rx_axis_tlast_int = rx_axis_tlast;
+    assign rx_axis_tuser_int = rx_axis_tuser;
+
+    // Generate RX requests (no RSS)
+    reg rx_frame_reg = 1'b0;
+    reg rx_req_valid_reg = 1'b0;
+
+    assign rx_req_queue = 0;
+    assign rx_req_tag = 0;
+    assign rx_req_valid = rx_axis_tvalid_int && !rx_frame_reg;
+
+    always @(posedge clk) begin
+        if (rx_req_ready) begin
+            rx_req_valid_reg <= 1'b0;
+        end
+
+        if (rx_axis_tready_int && rx_axis_tvalid_int) begin
+            if (!rx_frame_reg) begin
+                rx_req_valid_reg <= 1'b1;
+            end
+            rx_frame_reg <= !rx_axis_tlast_int;
+        end
+
+        if (rst) begin
+            rx_frame_reg <= 1'b0;
+            rx_req_valid_reg <= 1'b0;
+        end
+    end
+
+end
+
+if (RX_CHECKSUM_ENABLE) begin
+
+    rx_checksum #(
+        .DATA_WIDTH(AXIS_DATA_WIDTH)
+    )
+    rx_checksum_inst (
+        .clk(clk),
+        .rst(rst),
+        .s_axis_tdata(rx_axis_tdata_int),
+        .s_axis_tkeep(rx_axis_tkeep_int),
+        .s_axis_tvalid(rx_axis_tvalid_int & rx_axis_tready_int),
+        .s_axis_tlast(rx_axis_tlast_int),
+        .m_axis_csum(rx_csum),
+        .m_axis_csum_valid(rx_csum_valid)
+    );
+
+    axis_fifo #(
+        .DEPTH(32),
+        .DATA_WIDTH(16),
+        .KEEP_ENABLE(0),
+        .LAST_ENABLE(0),
+        .ID_ENABLE(0),
+        .DEST_ENABLE(0),
+        .USER_ENABLE(0),
+        .FRAME_FIFO(0)
+    )
+    rx_csum_fifo (
+        .clk(clk),
+        .rst(rst),
+
+        // AXI input
+        .s_axis_tdata(rx_csum),
+        .s_axis_tkeep(0),
+        .s_axis_tvalid(rx_csum_valid),
+        .s_axis_tready(),
+        .s_axis_tlast(0),
+        .s_axis_tid(0),
+        .s_axis_tdest(0),
+        .s_axis_tuser(0),
+
+        // AXI output
+        .m_axis_tdata(rx_fifo_csum),
+        .m_axis_tkeep(),
+        .m_axis_tvalid(rx_fifo_csum_valid),
+        .m_axis_tready(rx_fifo_csum_ready),
+        .m_axis_tlast(),
+        .m_axis_tid(),
+        .m_axis_tdest(),
+        .m_axis_tuser(),
+
+        // Status
+        .status_overflow(),
+        .status_bad_frame(),
+        .status_good_frame()
+    );
+
+end else begin
+
+    assign rx_fifo_csum = 16'd0;
+    assign rx_fifo_csum_valid = 1'b0;
+
+end
+
+if (TX_CHECKSUM_ENABLE) begin
+
+    axis_fifo #(
+        .DEPTH(32),
+        .DATA_WIDTH(1+8+8),
+        .KEEP_ENABLE(0),
+        .LAST_ENABLE(0),
+        .ID_ENABLE(0),
+        .DEST_ENABLE(0),
+        .USER_ENABLE(0),
+        .FRAME_FIFO(0)
+    )
+    tx_csum_fifo (
+        .clk(clk),
+        .rst(rst),
+
+        // AXI input
+        .s_axis_tdata({tx_csum_cmd_csum_enable, tx_csum_cmd_csum_start, tx_csum_cmd_csum_offset}),
+        .s_axis_tkeep(0),
+        .s_axis_tvalid(tx_csum_cmd_valid),
+        .s_axis_tready(tx_csum_cmd_ready),
+        .s_axis_tlast(0),
+        .s_axis_tid(0),
+        .s_axis_tdest(0),
+        .s_axis_tuser(0),
+
+        // AXI output
+        .m_axis_tdata({tx_fifo_csum_cmd_csum_enable, tx_fifo_csum_cmd_csum_start, tx_fifo_csum_cmd_csum_offset}),
+        .m_axis_tkeep(),
+        .m_axis_tvalid(tx_fifo_csum_cmd_valid),
+        .m_axis_tready(tx_fifo_csum_cmd_ready),
+        .m_axis_tlast(),
+        .m_axis_tid(),
+        .m_axis_tdest(),
+        .m_axis_tuser(),
+
+        // Status
+        .status_overflow(),
+        .status_bad_frame(),
+        .status_good_frame()
+    );
+
+    tx_checksum #(
+        .DATA_WIDTH(AXIS_DATA_WIDTH),
+        .ID_ENABLE(0),
+        .DEST_ENABLE(0),
+        .USER_ENABLE(1),
+        .USER_WIDTH(1),
+        .USE_INIT_VALUE(0),
+        .DATA_FIFO_DEPTH(MAX_TX_SIZE),
+        .CHECKSUM_FIFO_DEPTH(64)
+    )
+    tx_checksum_inst (
+        .clk(clk),
+        .rst(rst),
+
+        /*
+         * AXI input
+         */
+        .s_axis_tdata(tx_axis_tdata_int),
+        .s_axis_tkeep(tx_axis_tkeep_int),
+        .s_axis_tvalid(tx_axis_tvalid_int),
+        .s_axis_tready(tx_axis_tready_int),
+        .s_axis_tlast(tx_axis_tlast_int),
+        .s_axis_tid(0),
+        .s_axis_tdest(0),
+        .s_axis_tuser(tx_axis_tuser_int),
+
+        /*
+         * AXI output
+         */
+        .m_axis_tdata(tx_axis_tdata_int_2),
+        .m_axis_tkeep(tx_axis_tkeep_int_2),
+        .m_axis_tvalid(tx_axis_tvalid_int_2),
+        .m_axis_tready(tx_axis_tready_int_2),
+        .m_axis_tlast(tx_axis_tlast_int_2),
+        .m_axis_tid(),
+        .m_axis_tdest(),
+        .m_axis_tuser(0),
+
+        /*
+         * Control
+         */
+        .s_axis_cmd_csum_enable(tx_fifo_csum_cmd_csum_enable),
+        .s_axis_cmd_csum_start(tx_fifo_csum_cmd_csum_start),
+        .s_axis_cmd_csum_offset(tx_fifo_csum_cmd_csum_offset),
+        .s_axis_cmd_csum_init(16'd0),
+        .s_axis_cmd_valid(tx_fifo_csum_cmd_valid),
+        .s_axis_cmd_ready(tx_fifo_csum_cmd_ready)
+    );
+
+end else begin
+
+    assign tx_axis_tdata_int_2 = tx_axis_tdata_int;
+    assign tx_axis_tkeep_int_2 = tx_axis_tkeep_int;
+    assign tx_axis_tvalid_int_2 = tx_axis_tvalid_int;
+    assign tx_axis_tready_int = tx_axis_tready_int_2;
+    assign tx_axis_tlast_int_2 = tx_axis_tlast_int;
+    assign tx_axis_tuser_int_2 = tx_axis_tuser_int;
+
+    assign tx_csum_cmd_ready = 1'b1;
+
+end
+
+//added RMT plugins for tx path.
+
+if (RMT_TX_ENABLE) begin
+
+    rmt_wrapper
+    rmt_wrapper_tx
+    (
+    	.clk(clk),		// axis clk
+    	.aresetn(~rst),	
+        .vlan_drop_flags(vlan_drop_flags),
+        .ctrl_token(ctrl_token),
+
+    	// input Slave AXI Stream
+    	.s_axis_tdata(tx_axis_tdata_int_2),
+    	.s_axis_tkeep(tx_axis_tkeep_int_2),
+    	.s_axis_tuser(tx_axis_tuser_int_2),
+    	.s_axis_tvalid(tx_axis_tvalid_int_2),
+    	.s_axis_tready(tx_axis_tready_int_2),
+    	.s_axis_tlast(tx_axis_tlast_int_2),
+
+    	// output Master AXI Stream
+    	.m_axis_tdata(tx_axis_tdata),
+    	.m_axis_tkeep(tx_axis_tkeep),
+    	.m_axis_tuser(0),
+    	.m_axis_tvalid(tx_axis_tvalid),
+    	.m_axis_tready(tx_axis_tready),
+    	.m_axis_tlast(tx_axis_tlast)
+
+        // /*
+        // * AXI-Lite slave interface
+        // */
+        // .s_axil_awaddr(axil_rmt_awaddr),
+        // .s_axil_awprot(axil_rmt_awprot),
+        // .s_axil_awvalid(axil_rmt_awvalid),
+        // .s_axil_awready(axil_rmt_awready),
+        // .s_axil_wdata(axil_rmt_wdata),
+        // .s_axil_wstrb(axil_rmt_wstrb),
+        // .s_axil_wvalid(axil_rmt_wvalid),
+        // .s_axil_wready(axil_rmt_wready),
+        // .s_axil_bresp(axil_rmt_bresp),
+        // .s_axil_bvalid(axil_rmt_bvalid),
+        // .s_axil_bready(axil_rmt_bready),
+
+        // .s_axil_araddr(axil_rmt_araddr),
+        // .s_axil_arprot(axil_rmt_arprot),
+        // .s_axil_arvalid(axil_rmt_arvalid),
+        // .s_axil_arready(axil_rmt_arready),
+        // .s_axil_rdata(axil_rmt_rdata),
+        // .s_axil_rresp(axil_rmt_rresp),
+        // .s_axil_rvalid(axil_rmt_rvalid),
+        // .s_axil_rready(axil_rmt_rready)
+    );
+
+
+end 
+
+else begin
+
+    assign tx_axis_tdata = tx_axis_tdata_int_2;
+    assign tx_axis_tkeep = tx_axis_tkeep_int_2;
+    assign tx_axis_tvalid = tx_axis_tvalid_int_2;
+    assign tx_axis_tready_int_2 = tx_axis_tready;
+    assign tx_axis_tlast = tx_axis_tlast_int_2;
+    assign tx_axis_tuser = tx_axis_tuser_int_2;
+
+end
+
+endgenerate
+
+wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0]  dma_ram_rd_cmd_addr_int;
+wire [SEG_COUNT-1:0]                 dma_ram_rd_cmd_valid_int;
+wire [SEG_COUNT-1:0]                 dma_ram_rd_cmd_ready_int;
+wire [SEG_COUNT*SEG_DATA_WIDTH-1:0]  dma_ram_rd_resp_data_int;
+wire [SEG_COUNT-1:0]                 dma_ram_rd_resp_valid_int;
+wire [SEG_COUNT-1:0]                 dma_ram_rd_resp_ready_int;
+
+dma_psdpram #(
+    .SIZE(TX_RAM_SIZE),
+    .SEG_COUNT(SEG_COUNT),
+    .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+    .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+    .SEG_BE_WIDTH(SEG_BE_WIDTH),
+    .PIPELINE(RAM_PIPELINE)
+)
+dma_psdpram_tx_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Write port
+     */
+    .wr_cmd_be(dma_ram_wr_cmd_be),
+    .wr_cmd_addr(dma_ram_wr_cmd_addr),
+    .wr_cmd_data(dma_ram_wr_cmd_data),
+    .wr_cmd_valid(dma_ram_wr_cmd_valid),
+    .wr_cmd_ready(dma_ram_wr_cmd_ready),
+
+    /*
+     * Read port
+     */
+    .rd_cmd_addr(dma_ram_rd_cmd_addr_int),
+    .rd_cmd_valid(dma_ram_rd_cmd_valid_int),
+    .rd_cmd_ready(dma_ram_rd_cmd_ready_int),
+    .rd_resp_data(dma_ram_rd_resp_data_int),
+    .rd_resp_valid(dma_ram_rd_resp_valid_int),
+    .rd_resp_ready(dma_ram_rd_resp_ready_int)
+);
+
+dma_client_axis_source #(
+    .SEG_COUNT(SEG_COUNT),
+    .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+    .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+    .SEG_BE_WIDTH(SEG_BE_WIDTH),
+    .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+    .AXIS_DATA_WIDTH(AXIS_DATA_WIDTH),
+    .AXIS_KEEP_ENABLE(AXIS_KEEP_WIDTH > 1),
+    .AXIS_KEEP_WIDTH(AXIS_KEEP_WIDTH),
+    .AXIS_LAST_ENABLE(1),
+    .AXIS_ID_ENABLE(0),
+    .AXIS_DEST_ENABLE(0),
+    .AXIS_USER_ENABLE(1),
+    .AXIS_USER_WIDTH(1),
+    .LEN_WIDTH(DMA_CLIENT_LEN_WIDTH),
+    .TAG_WIDTH(DMA_CLIENT_TAG_WIDTH)
+)
+dma_client_axis_source_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * DMA read descriptor input
+     */
+    .s_axis_read_desc_ram_addr(dma_tx_desc_addr),
+    .s_axis_read_desc_len(dma_tx_desc_len),
+    .s_axis_read_desc_tag(dma_tx_desc_tag),
+    .s_axis_read_desc_id(0),
+    .s_axis_read_desc_dest(0),
+    .s_axis_read_desc_user(dma_tx_desc_user),
+    .s_axis_read_desc_valid(dma_tx_desc_valid),
+    .s_axis_read_desc_ready(dma_tx_desc_ready),
+
+    /*
+     * DMA read descriptor status output
+     */
+    .m_axis_read_desc_status_tag(dma_tx_desc_status_tag),
+    .m_axis_read_desc_status_valid(dma_tx_desc_status_valid),
+
+    /*
+     * AXI stream read data output
+     */
+    .m_axis_read_data_tdata(tx_axis_tdata_int),
+    .m_axis_read_data_tkeep(tx_axis_tkeep_int),
+    .m_axis_read_data_tvalid(tx_axis_tvalid_int),
+    .m_axis_read_data_tready(tx_axis_tready_int),
+    .m_axis_read_data_tlast(tx_axis_tlast_int),
+    .m_axis_read_data_tid(),
+    .m_axis_read_data_tdest(),
+    .m_axis_read_data_tuser(tx_axis_tuser_int),
+
+    /*
+     * RAM interface
+     */
+    .ram_rd_cmd_addr(dma_ram_rd_cmd_addr_int),
+    .ram_rd_cmd_valid(dma_ram_rd_cmd_valid_int),
+    .ram_rd_cmd_ready(dma_ram_rd_cmd_ready_int),
+    .ram_rd_resp_data(dma_ram_rd_resp_data_int),
+    .ram_rd_resp_valid(dma_ram_rd_resp_valid_int),
+    .ram_rd_resp_ready(dma_ram_rd_resp_ready_int),
+
+    /*
+     * Configuration
+     */
+    .enable(dma_enable)
+);
+
+wire [SEG_COUNT*SEG_BE_WIDTH-1:0]    dma_ram_wr_cmd_be_int;
+wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0]  dma_ram_wr_cmd_addr_int;
+wire [SEG_COUNT*SEG_DATA_WIDTH-1:0]  dma_ram_wr_cmd_data_int;
+wire [SEG_COUNT-1:0]                 dma_ram_wr_cmd_valid_int;
+wire [SEG_COUNT-1:0]                 dma_ram_wr_cmd_ready_int;
+
+dma_psdpram #(
+    .SIZE(RX_RAM_SIZE),
+    .SEG_COUNT(SEG_COUNT),
+    .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+    .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+    .SEG_BE_WIDTH(SEG_BE_WIDTH),
+    .PIPELINE(RAM_PIPELINE)
+)
+dma_psdpram_rx_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Write port
+     */
+    .wr_cmd_be(dma_ram_wr_cmd_be_int),
+    .wr_cmd_addr(dma_ram_wr_cmd_addr_int),
+    .wr_cmd_data(dma_ram_wr_cmd_data_int),
+    .wr_cmd_valid(dma_ram_wr_cmd_valid_int),
+    .wr_cmd_ready(dma_ram_wr_cmd_ready_int),
+
+    /*
+     * Read port
+     */
+    .rd_cmd_addr(dma_ram_rd_cmd_addr),
+    .rd_cmd_valid(dma_ram_rd_cmd_valid),
+    .rd_cmd_ready(dma_ram_rd_cmd_ready),
+    .rd_resp_data(dma_ram_rd_resp_data),
+    .rd_resp_valid(dma_ram_rd_resp_valid),
+    .rd_resp_ready(dma_ram_rd_resp_ready)
+);
+
+dma_client_axis_sink #(
+    .SEG_COUNT(SEG_COUNT),
+    .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+    .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+    .SEG_BE_WIDTH(SEG_BE_WIDTH),
+    .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+    .AXIS_DATA_WIDTH(AXIS_DATA_WIDTH),
+    .AXIS_KEEP_ENABLE(AXIS_KEEP_WIDTH > 1),
+    .AXIS_KEEP_WIDTH(AXIS_KEEP_WIDTH),
+    .AXIS_LAST_ENABLE(1),
+    .AXIS_ID_ENABLE(0),
+    .AXIS_DEST_ENABLE(0),
+    .AXIS_USER_ENABLE(1),
+    .AXIS_USER_WIDTH(1),
+    .LEN_WIDTH(DMA_CLIENT_LEN_WIDTH),
+    .TAG_WIDTH(DMA_CLIENT_TAG_WIDTH)
+)
+dma_client_axis_sink_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * DMA write descriptor input
+     */
+    .s_axis_write_desc_ram_addr(dma_rx_desc_addr),
+    .s_axis_write_desc_len(dma_rx_desc_len),
+    .s_axis_write_desc_tag(dma_rx_desc_tag),
+    .s_axis_write_desc_valid(dma_rx_desc_valid),
+    .s_axis_write_desc_ready(dma_rx_desc_ready),
+
+    /*
+     * DMA write descriptor status output
+     */
+    .m_axis_write_desc_status_len(dma_rx_desc_status_len),
+    .m_axis_write_desc_status_tag(dma_rx_desc_status_tag),
+    .m_axis_write_desc_status_id(),
+    .m_axis_write_desc_status_dest(),
+    .m_axis_write_desc_status_user(dma_rx_desc_status_user),
+    .m_axis_write_desc_status_valid(dma_rx_desc_status_valid),
+
+    /*
+     * AXI stream write data input
+     */
+    .s_axis_write_data_tdata(rx_axis_tdata_int),
+    .s_axis_write_data_tkeep(rx_axis_tkeep_int),
+    .s_axis_write_data_tvalid(rx_axis_tvalid_int),
+    .s_axis_write_data_tready(rx_axis_tready_int),
+    .s_axis_write_data_tlast(rx_axis_tlast_int),
+    .s_axis_write_data_tid(0),
+    .s_axis_write_data_tdest(0),
+    .s_axis_write_data_tuser(rx_axis_tuser_int),
+
+    /*
+     * RAM interface
+     */
+    .ram_wr_cmd_be(dma_ram_wr_cmd_be_int),
+    .ram_wr_cmd_addr(dma_ram_wr_cmd_addr_int),
+    .ram_wr_cmd_data(dma_ram_wr_cmd_data_int),
+    .ram_wr_cmd_valid(dma_ram_wr_cmd_valid_int),
+    .ram_wr_cmd_ready(dma_ram_wr_cmd_ready_int),
+
+    /*
+     * Configuration
+     */
+    .enable(dma_enable),
+    .abort(1'b0)
+);
+
+endmodule
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/rtl/one_in_one_out/port.v ./fpga/mqnic/AU250/fpga_100g/rtl/one_in_one_out/port.v
--- ./fpga-raw/mqnic/AU250/fpga_100g/rtl/one_in_one_out/port.v	1970-01-01 08:00:00.000000000 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/rtl/one_in_one_out/port.v	2022-01-31 13:02:15.010256655 +0800
@@ -0,0 +1,2277 @@
+/*
+
+Copyright 2019, The Regents of the University of California.
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+
+   1. Redistributions of source code must retain the above copyright notice,
+      this list of conditions and the following disclaimer.
+
+   2. Redistributions in binary form must reproduce the above copyright notice,
+      this list of conditions and the following disclaimer in the documentation
+      and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE REGENTS OF THE UNIVERSITY OF CALIFORNIA ''AS
+IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE REGENTS OF THE UNIVERSITY OF CALIFORNIA OR
+CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
+OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
+OF SUCH DAMAGE.
+
+The views and conclusions contained in the software and documentation are those
+of the authors and should not be interpreted as representing official policies,
+either expressed or implied, of The Regents of the University of California.
+
+*/
+
+// Language: Verilog 2001
+
+/**
+    Desc:     This is a modified port.v from corundum to support RMT pipeline.
+    Modified: Yang Xiangrui (yangxiangrui11@nudt.edu.cn)
+    Date:     2020/10/12
+*/
+
+`timescale 1ns / 1ps
+
+/*
+ * NIC Port
+ */
+module port #
+(
+    // DMA address width
+    parameter DMA_ADDR_WIDTH = 64,
+    // DMA length field width
+    parameter DMA_LEN_WIDTH = 16,
+    // DMA tag field width
+    parameter DMA_TAG_WIDTH = 8,
+    // Request tag field width
+    parameter REQ_TAG_WIDTH = 8,
+    // Descriptor request tag field width
+    parameter DESC_REQ_TAG_WIDTH = 8,
+    // Queue request tag field width
+    parameter QUEUE_REQ_TAG_WIDTH = 8,
+    // Queue operation tag field width
+    parameter QUEUE_OP_TAG_WIDTH = 8,
+    // Transmit queue index width
+    parameter TX_QUEUE_INDEX_WIDTH = 8,
+    // Receive queue index width
+    parameter RX_QUEUE_INDEX_WIDTH = 8,
+    // Max queue index width
+    parameter QUEUE_INDEX_WIDTH = TX_QUEUE_INDEX_WIDTH > RX_QUEUE_INDEX_WIDTH ? TX_QUEUE_INDEX_WIDTH : RX_QUEUE_INDEX_WIDTH,
+    // Transmit completion queue index width
+    parameter TX_CPL_QUEUE_INDEX_WIDTH = 8,
+    // Receive completion queue index width
+    parameter RX_CPL_QUEUE_INDEX_WIDTH = 8,
+    // Max completion queue index width
+    parameter CPL_QUEUE_INDEX_WIDTH = TX_CPL_QUEUE_INDEX_WIDTH > RX_CPL_QUEUE_INDEX_WIDTH ? TX_CPL_QUEUE_INDEX_WIDTH : RX_CPL_QUEUE_INDEX_WIDTH,
+    // Transmit descriptor table size (number of in-flight operations)
+    parameter TX_DESC_TABLE_SIZE = 16,
+    // Transmit packet table size (number of in-progress packets)
+    parameter TX_PKT_TABLE_SIZE = 8,
+    // Receive descriptor table size (number of in-flight operations)
+    parameter RX_DESC_TABLE_SIZE = 16,
+    // Receive packet table size (number of in-progress packets)
+    parameter RX_PKT_TABLE_SIZE = 8,
+    // Width of descriptor table field for tracking outstanding DMA operations
+    parameter DESC_TABLE_DMA_OP_COUNT_WIDTH = 4,
+    // Max number of in-flight descriptor requests (transmit)
+    parameter TX_MAX_DESC_REQ = 16,
+    // Transmit descriptor FIFO size
+    parameter TX_DESC_FIFO_SIZE = TX_MAX_DESC_REQ*8,
+    // Max number of in-flight descriptor requests (transmit)
+    parameter RX_MAX_DESC_REQ = 16,
+    // Receive descriptor FIFO size
+    parameter RX_DESC_FIFO_SIZE = RX_MAX_DESC_REQ*8,
+    // Transmit scheduler type
+    parameter TX_SCHEDULER = "RR",
+    // Scheduler operation table size
+    parameter TX_SCHEDULER_OP_TABLE_SIZE = 32,
+    // Scheduler pipeline setting
+    parameter TX_SCHEDULER_PIPELINE = 3,
+    // Scheduler TDMA index width
+    parameter TDMA_INDEX_WIDTH = 8,
+    // Queue element pointer width
+    parameter QUEUE_PTR_WIDTH = 16,
+    // Enable PTP timestamping
+    parameter PTP_TS_ENABLE = 1,
+    // PTP timestamp width
+    parameter PTP_TS_WIDTH = 96,
+    // Enable TX checksum offload
+    parameter TX_CHECKSUM_ENABLE = 0,
+    // Enable RX RSS
+    parameter RX_RSS_ENABLE = 1,
+    // Enable RX hashing
+    parameter RX_HASH_ENABLE = 1,
+    // Enable RX checksum offload
+    parameter RX_CHECKSUM_ENABLE = 1,
+    // Width of AXI lite data bus in bits
+    parameter AXIL_DATA_WIDTH = 32,
+    // Width of AXI lite address bus in bits
+    parameter AXIL_ADDR_WIDTH = 16,
+    // Width of AXI lite wstrb (width of data bus in words)
+    parameter AXIL_STRB_WIDTH = (AXIL_DATA_WIDTH/8),
+    // DMA RAM segment count
+    parameter SEG_COUNT = 2,
+    // DMA RAM segment data width
+    parameter SEG_DATA_WIDTH = 64,
+    // DMA RAM segment address width
+    parameter SEG_ADDR_WIDTH = 8,
+    // DMA RAM segment byte enable width
+    parameter SEG_BE_WIDTH = SEG_DATA_WIDTH/8,
+    // DMA RAM address width
+    parameter RAM_ADDR_WIDTH = SEG_ADDR_WIDTH+$clog2(SEG_COUNT)+$clog2(SEG_BE_WIDTH),
+    // DMA RAM pipeline stages
+    parameter RAM_PIPELINE = 2,
+    // Width of AXI stream interfaces in bits
+    parameter AXIS_DATA_WIDTH = 256,
+    // AXI stream tkeep signal width (words per cycle)
+    parameter AXIS_KEEP_WIDTH = AXIS_DATA_WIDTH/8,
+    // Max transmit packet size
+    parameter MAX_TX_SIZE = 2048,
+    // Max receive packet size
+    parameter MAX_RX_SIZE = 2048,
+    // Descriptor size (in bytes)
+    parameter DESC_SIZE = 16,
+    // Descriptor size (in bytes)
+    parameter CPL_SIZE = 32,
+    // Width of AXI stream descriptor interfaces in bits
+    parameter AXIS_DESC_DATA_WIDTH = DESC_SIZE*8,
+    // AXI stream descriptor tkeep signal width (words per cycle)
+    parameter AXIS_DESC_KEEP_WIDTH = AXIS_DESC_DATA_WIDTH/8,
+    // DMA TX RAM size
+    parameter TX_RAM_SIZE = TX_PKT_TABLE_SIZE*MAX_TX_SIZE,
+    // DMA RX RAM size
+    parameter RX_RAM_SIZE = RX_PKT_TABLE_SIZE*MAX_RX_SIZE,
+    // Enable RMT pipeline on TX
+    parameter RMT_TX_ENABLE = 1
+)
+(
+    input  wire                                 clk,
+    input  wire                                 rst,
+
+    /*
+     * Descriptor request output
+     */
+    output wire [0:0]                           m_axis_desc_req_sel,
+    output wire [QUEUE_INDEX_WIDTH-1:0]         m_axis_desc_req_queue,
+    output wire [DESC_REQ_TAG_WIDTH-1:0]        m_axis_desc_req_tag,
+    output wire                                 m_axis_desc_req_valid,
+    input  wire                                 m_axis_desc_req_ready,
+
+    /*
+     * Descriptor request status input
+     */
+    input  wire [QUEUE_INDEX_WIDTH-1:0]         s_axis_desc_req_status_queue,
+    input  wire [QUEUE_PTR_WIDTH-1:0]           s_axis_desc_req_status_ptr,
+    input  wire [CPL_QUEUE_INDEX_WIDTH-1:0]     s_axis_desc_req_status_cpl,
+    input  wire [DESC_REQ_TAG_WIDTH-1:0]        s_axis_desc_req_status_tag,
+    input  wire                                 s_axis_desc_req_status_empty,
+    input  wire                                 s_axis_desc_req_status_error,
+    input  wire                                 s_axis_desc_req_status_valid,
+
+    /*
+     * Descriptor data input
+     */
+    input  wire [AXIS_DESC_DATA_WIDTH-1:0]      s_axis_desc_tdata,
+    input  wire [AXIS_DESC_KEEP_WIDTH-1:0]      s_axis_desc_tkeep,
+    input  wire                                 s_axis_desc_tvalid,
+    output wire                                 s_axis_desc_tready,
+    input  wire                                 s_axis_desc_tlast,
+    input  wire [DESC_REQ_TAG_WIDTH-1:0]        s_axis_desc_tid,
+    input  wire                                 s_axis_desc_tuser,
+
+    /*
+     * Completion request output
+     */
+    output wire [0:0]                           m_axis_cpl_req_sel,
+    output wire [QUEUE_INDEX_WIDTH-1:0]         m_axis_cpl_req_queue,
+    output wire [DESC_REQ_TAG_WIDTH-1:0]        m_axis_cpl_req_tag,
+    output wire [CPL_SIZE*8-1:0]                m_axis_cpl_req_data,
+    output wire                                 m_axis_cpl_req_valid,
+    input  wire                                 m_axis_cpl_req_ready,
+
+    /*
+     * Completion request status input
+     */
+    input  wire [DESC_REQ_TAG_WIDTH-1:0]        s_axis_cpl_req_status_tag,
+    input  wire                                 s_axis_cpl_req_status_full,
+    input  wire                                 s_axis_cpl_req_status_error,
+    input  wire                                 s_axis_cpl_req_status_valid,
+
+    /*
+     * TX doorbell input
+     */
+    input  wire [TX_QUEUE_INDEX_WIDTH-1:0]      s_axis_tx_doorbell_queue,
+    input  wire                                 s_axis_tx_doorbell_valid,
+
+    /*
+     * DMA read descriptor output
+     */
+    output wire [DMA_ADDR_WIDTH-1:0]            m_axis_dma_read_desc_dma_addr,
+    output wire [RAM_ADDR_WIDTH-1:0]            m_axis_dma_read_desc_ram_addr,
+    output wire [DMA_LEN_WIDTH-1:0]             m_axis_dma_read_desc_len,
+    output wire [DMA_TAG_WIDTH-1:0]             m_axis_dma_read_desc_tag,
+    output wire                                 m_axis_dma_read_desc_valid,
+    input  wire                                 m_axis_dma_read_desc_ready,
+
+    /*
+     * DMA read descriptor status input
+     */
+    input  wire [DMA_TAG_WIDTH-1:0]             s_axis_dma_read_desc_status_tag,
+    input  wire                                 s_axis_dma_read_desc_status_valid,
+
+    /*
+     * DMA write descriptor output
+     */
+    output wire [DMA_ADDR_WIDTH-1:0]            m_axis_dma_write_desc_dma_addr,
+    output wire [RAM_ADDR_WIDTH-1:0]            m_axis_dma_write_desc_ram_addr,
+    output wire [DMA_LEN_WIDTH-1:0]             m_axis_dma_write_desc_len,
+    output wire [DMA_TAG_WIDTH-1:0]             m_axis_dma_write_desc_tag,
+    output wire                                 m_axis_dma_write_desc_valid,
+    input  wire                                 m_axis_dma_write_desc_ready,
+
+    /*
+     * DMA write descriptor status input
+     */
+    input  wire [DMA_TAG_WIDTH-1:0]             s_axis_dma_write_desc_status_tag,
+    input  wire                                 s_axis_dma_write_desc_status_valid,
+
+    /*
+     * AXI-Lite slave interface
+     */
+    input  wire [AXIL_ADDR_WIDTH-1:0]           s_axil_awaddr,
+    input  wire [2:0]                           s_axil_awprot,
+    input  wire                                 s_axil_awvalid,
+    output wire                                 s_axil_awready,
+    input  wire [AXIL_DATA_WIDTH-1:0]           s_axil_wdata,
+    input  wire [AXIL_STRB_WIDTH-1:0]           s_axil_wstrb,
+    input  wire                                 s_axil_wvalid,
+    output wire                                 s_axil_wready,
+    output wire [1:0]                           s_axil_bresp,
+    output wire                                 s_axil_bvalid,
+    input  wire                                 s_axil_bready,
+    input  wire [AXIL_ADDR_WIDTH-1:0]           s_axil_araddr,
+    input  wire [2:0]                           s_axil_arprot,
+    input  wire                                 s_axil_arvalid,
+    output wire                                 s_axil_arready,
+    output wire [AXIL_DATA_WIDTH-1:0]           s_axil_rdata,
+    output wire [1:0]                           s_axil_rresp,
+    output wire                                 s_axil_rvalid,
+    input  wire                                 s_axil_rready,
+
+    /*
+     * RAM interface
+     */
+    input  wire [SEG_COUNT*SEG_BE_WIDTH-1:0]    dma_ram_wr_cmd_be,
+    input  wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0]  dma_ram_wr_cmd_addr,
+    input  wire [SEG_COUNT*SEG_DATA_WIDTH-1:0]  dma_ram_wr_cmd_data,
+    input  wire [SEG_COUNT-1:0]                 dma_ram_wr_cmd_valid,
+    output wire [SEG_COUNT-1:0]                 dma_ram_wr_cmd_ready,
+    input  wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0]  dma_ram_rd_cmd_addr,
+    input  wire [SEG_COUNT-1:0]                 dma_ram_rd_cmd_valid,
+    output wire [SEG_COUNT-1:0]                 dma_ram_rd_cmd_ready,
+    output wire [SEG_COUNT*SEG_DATA_WIDTH-1:0]  dma_ram_rd_resp_data,
+    output wire [SEG_COUNT-1:0]                 dma_ram_rd_resp_valid,
+    input  wire [SEG_COUNT-1:0]                 dma_ram_rd_resp_ready,
+
+    /*
+     * Transmit data output
+     */
+    output wire [AXIS_DATA_WIDTH-1:0]           tx_axis_tdata,
+    output wire [AXIS_KEEP_WIDTH-1:0]           tx_axis_tkeep,
+    output wire                                 tx_axis_tvalid,
+    input  wire                                 tx_axis_tready,
+    output wire                                 tx_axis_tlast,
+    output wire                                 tx_axis_tuser,
+
+    /*
+     * Transmit PTP timestamp input
+     */
+    input  wire [PTP_TS_WIDTH-1:0]              s_axis_tx_ptp_ts_96,
+    input  wire                                 s_axis_tx_ptp_ts_valid,
+    output wire                                 s_axis_tx_ptp_ts_ready,
+
+    /*
+     * Receive data input
+     */
+    input  wire [AXIS_DATA_WIDTH-1:0]           rx_axis_tdata,
+    input  wire [AXIS_KEEP_WIDTH-1:0]           rx_axis_tkeep,
+    input  wire                                 rx_axis_tvalid,
+    output wire                                 rx_axis_tready,
+    input  wire                                 rx_axis_tlast,
+    input  wire                                 rx_axis_tuser,
+
+    /*
+     * Receive PTP timestamp input
+     */
+    input  wire [PTP_TS_WIDTH-1:0]              s_axis_rx_ptp_ts_96,
+    input  wire                                 s_axis_rx_ptp_ts_valid,
+    output wire                                 s_axis_rx_ptp_ts_ready,
+
+    /*
+     * PTP clock
+     */
+    input  wire [PTP_TS_WIDTH-1:0]              ptp_ts_96,
+    input  wire                                 ptp_ts_step
+);
+
+parameter DMA_CLIENT_TAG_WIDTH = $clog2(TX_DESC_TABLE_SIZE > RX_DESC_TABLE_SIZE ? TX_DESC_TABLE_SIZE : RX_DESC_TABLE_SIZE);
+parameter DMA_CLIENT_LEN_WIDTH = DMA_LEN_WIDTH;
+
+parameter DESC_REQ_TAG_WIDTH_INT = DESC_REQ_TAG_WIDTH - $clog2(2);
+
+parameter SCHED_COUNT = (TX_SCHEDULER == "TDMA_RR") ? 2 : 1;
+parameter AXIL_SCHED_ADDR_WIDTH = AXIL_ADDR_WIDTH-$clog2(SCHED_COUNT+1);
+
+// parameter sizing helpers
+function [31:0] w_32(input [31:0] val);
+    w_32 = val;
+endfunction
+
+// AXI lite connections
+wire [AXIL_ADDR_WIDTH-1:0] axil_ctrl_awaddr;
+wire [2:0]                 axil_ctrl_awprot;
+wire                       axil_ctrl_awvalid;
+wire                       axil_ctrl_awready;
+wire [AXIL_DATA_WIDTH-1:0] axil_ctrl_wdata;
+wire [AXIL_STRB_WIDTH-1:0] axil_ctrl_wstrb;
+wire                       axil_ctrl_wvalid;
+wire                       axil_ctrl_wready;
+wire [1:0]                 axil_ctrl_bresp;
+wire                       axil_ctrl_bvalid;
+wire                       axil_ctrl_bready;
+wire [AXIL_ADDR_WIDTH-1:0] axil_ctrl_araddr;
+wire [2:0]                 axil_ctrl_arprot;
+wire                       axil_ctrl_arvalid;
+wire                       axil_ctrl_arready;
+wire [AXIL_DATA_WIDTH-1:0] axil_ctrl_rdata;
+wire [1:0]                 axil_ctrl_rresp;
+wire                       axil_ctrl_rvalid;
+wire                       axil_ctrl_rready;
+
+wire [SCHED_COUNT*AXIL_ADDR_WIDTH-1:0] axil_sched_awaddr;
+wire [SCHED_COUNT*3-1:0]               axil_sched_awprot;
+wire [SCHED_COUNT-1:0]                 axil_sched_awvalid;
+wire [SCHED_COUNT-1:0]                 axil_sched_awready;
+wire [SCHED_COUNT*AXIL_DATA_WIDTH-1:0] axil_sched_wdata;
+wire [SCHED_COUNT*AXIL_STRB_WIDTH-1:0] axil_sched_wstrb;
+wire [SCHED_COUNT-1:0]                 axil_sched_wvalid;
+wire [SCHED_COUNT-1:0]                 axil_sched_wready;
+wire [SCHED_COUNT*2-1:0]               axil_sched_bresp;
+wire [SCHED_COUNT-1:0]                 axil_sched_bvalid;
+wire [SCHED_COUNT-1:0]                 axil_sched_bready;
+wire [SCHED_COUNT*AXIL_ADDR_WIDTH-1:0] axil_sched_araddr;
+wire [SCHED_COUNT*3-1:0]               axil_sched_arprot;
+wire [SCHED_COUNT-1:0]                 axil_sched_arvalid;
+wire [SCHED_COUNT-1:0]                 axil_sched_arready;
+wire [SCHED_COUNT*AXIL_DATA_WIDTH-1:0] axil_sched_rdata;
+wire [SCHED_COUNT*2-1:0]               axil_sched_rresp;
+wire [SCHED_COUNT-1:0]                 axil_sched_rvalid;
+wire [SCHED_COUNT-1:0]                 axil_sched_rready;
+
+// //rmt related
+// wire [AXIL_ADDR_WIDTH-1:0]      axil_rmt_awaddr;
+// wire [2:0]                      axil_rmt_awprot;
+// wire                            axil_rmt_awvalid;
+// wire                            axil_rmt_awready;
+// wire [AXIL_DATA_WIDTH-1:0]      axil_rmt_wdata;
+// wire [AXIL_STRB_WIDTH-1:0]      axil_rmt_wstrb;
+// wire                            axil_rmt_wvalid;
+// wire                            axil_rmt_wready;
+// wire [1:0]                      axil_rmt_bresp;
+// wire                            axil_rmt_bvalid;
+// wire                            axil_rmt_bready;
+// wire [AXIL_ADDR_WIDTH-1:0]      axil_rmt_araddr;
+// wire [2:0]                      axil_rmt_arprot;
+// wire                            axil_rmt_arvalid;
+// wire                            axil_rmt_arready;
+// wire [AXIL_DATA_WIDTH-1:0]      axil_rmt_rdata;
+// wire [1:0]                      axil_rmt_rresp;
+// wire                            axil_rmt_rvalid;
+// wire                            axil_rmt_rready;
+
+// Checksumming and RSS
+wire [AXIS_DATA_WIDTH-1:0] rx_axis_tdata_int;
+wire [AXIS_KEEP_WIDTH-1:0] rx_axis_tkeep_int;
+wire                       rx_axis_tvalid_int;
+wire                       rx_axis_tready_int;
+wire                       rx_axis_tlast_int;
+wire                       rx_axis_tuser_int;
+
+wire [AXIS_DATA_WIDTH-1:0] tx_axis_tdata_int;
+wire [AXIS_KEEP_WIDTH-1:0] tx_axis_tkeep_int;
+wire                       tx_axis_tvalid_int;
+wire                       tx_axis_tready_int;
+wire                       tx_axis_tlast_int;
+wire                       tx_axis_tuser_int;
+
+wire [AXIS_DATA_WIDTH-1:0] tx_axis_tdata_int_2;
+wire [AXIS_KEEP_WIDTH-1:0] tx_axis_tkeep_int_2;
+wire                       tx_axis_tvalid_int_2;
+wire                       tx_axis_tready_int_2;
+wire                       tx_axis_tlast_int_2;
+wire                       tx_axis_tuser_int_2;
+
+// Descriptor and completion
+wire [0:0]                           rx_desc_req_sel = 1'b1;
+wire [QUEUE_INDEX_WIDTH-1:0]         rx_desc_req_queue;
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    rx_desc_req_tag;
+wire                                 rx_desc_req_valid;
+wire                                 rx_desc_req_ready;
+
+wire [QUEUE_INDEX_WIDTH-1:0]         rx_desc_req_status_queue;
+wire [QUEUE_PTR_WIDTH-1:0]           rx_desc_req_status_ptr;
+wire [CPL_QUEUE_INDEX_WIDTH-1:0]     rx_desc_req_status_cpl;
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    rx_desc_req_status_tag;
+wire                                 rx_desc_req_status_empty;
+wire                                 rx_desc_req_status_error;
+wire                                 rx_desc_req_status_valid;
+
+wire [AXIS_DESC_DATA_WIDTH-1:0]      rx_desc_tdata;
+wire [AXIS_DESC_KEEP_WIDTH-1:0]      rx_desc_tkeep;
+wire                                 rx_desc_tvalid;
+wire                                 rx_desc_tready;
+wire                                 rx_desc_tlast;
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    rx_desc_tid;
+wire                                 rx_desc_tuser;
+
+wire [AXIS_DESC_DATA_WIDTH-1:0]      rx_fifo_desc_tdata;
+wire [AXIS_DESC_KEEP_WIDTH-1:0]      rx_fifo_desc_tkeep;
+wire                                 rx_fifo_desc_tvalid;
+wire                                 rx_fifo_desc_tready;
+wire                                 rx_fifo_desc_tlast;
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    rx_fifo_desc_tid;
+wire                                 rx_fifo_desc_tuser;
+
+wire [0:0]                           tx_desc_req_sel = 1'b0;
+wire [QUEUE_INDEX_WIDTH-1:0]         tx_desc_req_queue;
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    tx_desc_req_tag;
+wire                                 tx_desc_req_valid;
+wire                                 tx_desc_req_ready;
+
+wire [QUEUE_INDEX_WIDTH-1:0]         tx_desc_req_status_queue;
+wire [QUEUE_PTR_WIDTH-1:0]           tx_desc_req_status_ptr;
+wire [CPL_QUEUE_INDEX_WIDTH-1:0]     tx_desc_req_status_cpl;
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    tx_desc_req_status_tag;
+wire                                 tx_desc_req_status_empty;
+wire                                 tx_desc_req_status_error;
+wire                                 tx_desc_req_status_valid;
+
+wire [AXIS_DESC_DATA_WIDTH-1:0]      tx_desc_tdata;
+wire [AXIS_DESC_KEEP_WIDTH-1:0]      tx_desc_tkeep;
+wire                                 tx_desc_tvalid;
+wire                                 tx_desc_tready;
+wire                                 tx_desc_tlast;
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    tx_desc_tid;
+wire                                 tx_desc_tuser;
+
+wire [AXIS_DESC_DATA_WIDTH-1:0]      tx_fifo_desc_tdata;
+wire [AXIS_DESC_KEEP_WIDTH-1:0]      tx_fifo_desc_tkeep;
+wire                                 tx_fifo_desc_tvalid;
+wire                                 tx_fifo_desc_tready;
+wire                                 tx_fifo_desc_tlast;
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    tx_fifo_desc_tid;
+wire                                 tx_fifo_desc_tuser;
+
+wire [0:0]                           rx_cpl_req_sel = 1'b1;
+wire [QUEUE_INDEX_WIDTH-1:0]         rx_cpl_req_queue;
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    rx_cpl_req_tag;
+wire [CPL_SIZE*8-1:0]                rx_cpl_req_data;
+wire                                 rx_cpl_req_valid;
+wire                                 rx_cpl_req_ready;
+
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    rx_cpl_req_status_tag;
+wire                                 rx_cpl_req_status_full;
+wire                                 rx_cpl_req_status_error;
+wire                                 rx_cpl_req_status_valid;
+
+wire [0:0]                           tx_cpl_req_sel = 1'b0;
+wire [QUEUE_INDEX_WIDTH-1:0]         tx_cpl_req_queue;
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    tx_cpl_req_tag;
+wire [CPL_SIZE*8-1:0]                tx_cpl_req_data;
+wire                                 tx_cpl_req_valid;
+wire                                 tx_cpl_req_ready;
+
+wire [DESC_REQ_TAG_WIDTH_INT-1:0]    tx_cpl_req_status_tag;
+wire                                 tx_cpl_req_status_full;
+wire                                 tx_cpl_req_status_error;
+wire                                 tx_cpl_req_status_valid;
+
+// Scheduler
+wire [TX_QUEUE_INDEX_WIDTH-1:0] tx_sched_ctrl_queue;
+wire                            tx_sched_ctrl_enable;
+wire                            tx_sched_ctrl_valid;
+wire                            tx_sched_ctrl_ready;
+
+// TX engine
+wire [TX_QUEUE_INDEX_WIDTH-1:0] tx_req_queue;
+wire [REQ_TAG_WIDTH-1:0]        tx_req_tag;
+wire                            tx_req_valid;
+wire                            tx_req_ready;
+
+wire [DMA_CLIENT_LEN_WIDTH-1:0] tx_req_status_len;
+wire [REQ_TAG_WIDTH-1:0]        tx_req_status_tag;
+wire                            tx_req_status_valid;
+
+// RX engine
+wire [RX_QUEUE_INDEX_WIDTH-1:0] rx_req_queue;
+wire [REQ_TAG_WIDTH-1:0]        rx_req_tag;
+wire                            rx_req_valid;
+wire                            rx_req_ready;
+
+wire [REQ_TAG_WIDTH-1:0]        rx_req_status_tag;
+wire                            rx_req_status_valid;
+
+// Timestamps
+wire [95:0]              rx_ptp_ts_96;
+wire                     rx_ptp_ts_valid;
+wire                     rx_ptp_ts_ready;
+
+wire [95:0]              tx_ptp_ts_96;
+wire                     tx_ptp_ts_valid;
+wire                     tx_ptp_ts_ready;
+
+// RX hashing
+wire [31:0]              rx_hash;
+wire [3:0]               rx_hash_type;
+wire                     rx_hash_valid;
+
+wire [31:0]              rx_fifo_hash;
+wire [3:0]               rx_fifo_hash_type;
+wire                     rx_fifo_hash_valid;
+wire                     rx_fifo_hash_ready;
+
+// Checksums
+wire [15:0]              rx_csum;
+wire                     rx_csum_valid;
+
+wire [15:0]              rx_fifo_csum;
+wire                     rx_fifo_csum_valid;
+wire                     rx_fifo_csum_ready;
+
+wire                     tx_csum_cmd_csum_enable;
+wire [7:0]               tx_csum_cmd_csum_start;
+wire [7:0]               tx_csum_cmd_csum_offset;
+wire                     tx_csum_cmd_valid;
+wire                     tx_csum_cmd_ready;
+
+wire                     tx_fifo_csum_cmd_csum_enable;
+wire [7:0]               tx_fifo_csum_cmd_csum_start;
+wire [7:0]               tx_fifo_csum_cmd_csum_offset;
+wire                     tx_fifo_csum_cmd_valid;
+wire                     tx_fifo_csum_cmd_ready;
+
+// Interface DMA control
+wire [RAM_ADDR_WIDTH-1:0]       dma_tx_desc_addr;
+wire [DMA_CLIENT_LEN_WIDTH-1:0] dma_tx_desc_len;
+wire [DMA_CLIENT_TAG_WIDTH-1:0] dma_tx_desc_tag;
+wire                            dma_tx_desc_user;
+wire                            dma_tx_desc_valid;
+wire                            dma_tx_desc_ready;
+
+wire [DMA_CLIENT_TAG_WIDTH-1:0] dma_tx_desc_status_tag;
+wire                            dma_tx_desc_status_valid;
+
+wire [RAM_ADDR_WIDTH-1:0]       dma_rx_desc_addr;
+wire [DMA_CLIENT_LEN_WIDTH-1:0] dma_rx_desc_len;
+wire [DMA_CLIENT_TAG_WIDTH-1:0] dma_rx_desc_tag;
+wire                            dma_rx_desc_valid;
+wire                            dma_rx_desc_ready;
+
+wire [DMA_CLIENT_LEN_WIDTH-1:0] dma_rx_desc_status_len;
+wire [DMA_CLIENT_TAG_WIDTH-1:0] dma_rx_desc_status_tag;
+wire                            dma_rx_desc_status_user;
+wire                            dma_rx_desc_status_valid;
+
+wire                            dma_enable = 1;
+
+//RMT pipeline
+
+
+
+// Port control registers
+reg axil_ctrl_awready_reg = 1'b0;
+reg axil_ctrl_wready_reg = 1'b0;
+reg axil_ctrl_bvalid_reg = 1'b0;
+reg axil_ctrl_arready_reg = 1'b0;
+reg [AXIL_DATA_WIDTH-1:0] axil_ctrl_rdata_reg = {AXIL_DATA_WIDTH{1'b0}};
+reg axil_ctrl_rvalid_reg = 1'b0;
+
+reg sched_enable_reg = 1'b0;
+
+reg [RX_QUEUE_INDEX_WIDTH-1:0] rss_mask_reg = 0;
+
+reg [DMA_CLIENT_LEN_WIDTH-1:0] tx_mtu_reg = MAX_TX_SIZE;
+reg [DMA_CLIENT_LEN_WIDTH-1:0] rx_mtu_reg = MAX_RX_SIZE;
+
+reg tdma_enable_reg = 1'b0;
+wire tdma_locked;
+wire tdma_error;
+
+wire [31:0] ctrl_token;
+reg [15:0] vlan_drop_flags;
+
+reg [79:0] set_tdma_schedule_start_reg = 0;
+reg set_tdma_schedule_start_valid_reg = 0;
+reg [79:0] set_tdma_schedule_period_reg = 0;
+reg set_tdma_schedule_period_valid_reg = 0;
+reg [79:0] set_tdma_timeslot_period_reg = 0;
+reg set_tdma_timeslot_period_valid_reg = 0;
+reg [79:0] set_tdma_active_period_reg = 0;
+reg set_tdma_active_period_valid_reg = 0;
+
+wire tdma_schedule_start;
+wire [TDMA_INDEX_WIDTH-1:0] tdma_timeslot_index;
+wire tdma_timeslot_start;
+wire tdma_timeslot_end;
+wire tdma_timeslot_active;
+
+assign axil_ctrl_awready = axil_ctrl_awready_reg;
+assign axil_ctrl_wready = axil_ctrl_wready_reg;
+assign axil_ctrl_bresp = 2'b00;
+assign axil_ctrl_bvalid = axil_ctrl_bvalid_reg;
+assign axil_ctrl_arready = axil_ctrl_arready_reg;
+assign axil_ctrl_rdata = axil_ctrl_rdata_reg;
+assign axil_ctrl_rresp = 2'b00;
+assign axil_ctrl_rvalid = axil_ctrl_rvalid_reg;
+
+always @(posedge clk) begin
+    axil_ctrl_awready_reg <= 1'b0;
+    axil_ctrl_wready_reg <= 1'b0;
+    axil_ctrl_bvalid_reg <= axil_ctrl_bvalid_reg && !axil_ctrl_bready;
+    axil_ctrl_arready_reg <= 1'b0;
+    axil_ctrl_rvalid_reg <= axil_ctrl_rvalid_reg && !axil_ctrl_rready;
+
+    set_tdma_schedule_start_valid_reg <= 1'b0;
+    set_tdma_schedule_period_valid_reg <= 1'b0;
+    set_tdma_timeslot_period_valid_reg <= 1'b0;
+    set_tdma_active_period_valid_reg <= 1'b0;
+
+	//
+	vlan_drop_flags <= 0;
+
+
+    if (axil_ctrl_awvalid && axil_ctrl_wvalid && !axil_ctrl_bvalid) begin
+        // write operation
+        axil_ctrl_awready_reg <= 1'b1;
+        axil_ctrl_wready_reg <= 1'b1;
+        axil_ctrl_bvalid_reg <= 1'b1;
+
+        if(RMT_TX_ENABLE) begin
+            case ({axil_ctrl_awaddr[15:2], 2'b00})
+                16'h0040: begin
+                    // Scheduler enable
+                    if (axil_ctrl_wstrb[0]) begin
+                        sched_enable_reg <= axil_ctrl_wdata[0];
+                    end
+                end
+                16'h0080: rss_mask_reg <= axil_ctrl_wdata; // RSS mask
+                16'h0100: tx_mtu_reg <= axil_ctrl_wdata; // TX MTU
+                16'h0200: rx_mtu_reg <= axil_ctrl_wdata; // RX MTU
+                16'h1000: begin
+                    // TDMA control
+                    if (axil_ctrl_wstrb[0]) begin
+                        tdma_enable_reg <= axil_ctrl_wdata[0];
+                    end
+                end
+                16'h1014: set_tdma_schedule_start_reg[29:0] <= axil_ctrl_wdata; // TDMA schedule start ns
+                16'h1018: set_tdma_schedule_start_reg[63:32] <= axil_ctrl_wdata; // TDMA schedule start sec l
+                16'h101C: begin
+                    // TDMA schedule start sec h
+                    set_tdma_schedule_start_reg[79:64] <= axil_ctrl_wdata;
+                    set_tdma_schedule_start_valid_reg <= 1'b1;
+                end
+                16'h1024: set_tdma_schedule_period_reg[29:0] <= axil_ctrl_wdata; // TDMA schedule period ns
+                16'h1028: set_tdma_schedule_period_reg[63:32] <= axil_ctrl_wdata; // TDMA schedule period sec l
+                16'h102C: begin
+                    // TDMA schedule period sec h
+                    set_tdma_schedule_period_reg[79:64] <= axil_ctrl_wdata;
+                    set_tdma_schedule_period_valid_reg <= 1'b1;
+                end
+                16'h1034: set_tdma_timeslot_period_reg[29:0] <= axil_ctrl_wdata; // TDMA timeslot period ns
+                16'h1038: set_tdma_timeslot_period_reg[63:32] <= axil_ctrl_wdata; // TDMA timeslot period sec l
+                16'h103C: begin
+                    // TDMA timeslot period sec h
+                    set_tdma_timeslot_period_reg[79:64] <= axil_ctrl_wdata;
+                    set_tdma_timeslot_period_valid_reg <= 1'b1;
+                end
+                16'h1044: set_tdma_active_period_reg[29:0] <= axil_ctrl_wdata; // TDMA active period ns
+                16'h1048: set_tdma_active_period_reg[63:32] <= axil_ctrl_wdata; // TDMA active period sec l
+                16'h104C: begin
+                    // TDMA active period sec h
+                    set_tdma_active_period_reg[79:64] <= axil_ctrl_wdata;
+                    set_tdma_active_period_valid_reg <= 1'b1;
+                end
+                //checkme: for sync while RMT reconf
+                16'h2028: vlan_drop_flags <= axil_ctrl_wdata;
+            endcase
+        end
+        else begin
+            case ({axil_ctrl_awaddr[15:2], 2'b00})
+                16'h0040: begin
+                    // Scheduler enable
+                    if (axil_ctrl_wstrb[0]) begin
+                        sched_enable_reg <= axil_ctrl_wdata[0];
+                    end
+                end
+                16'h0080: rss_mask_reg <= axil_ctrl_wdata; // RSS mask
+                16'h0100: tx_mtu_reg <= axil_ctrl_wdata; // TX MTU
+                16'h0200: rx_mtu_reg <= axil_ctrl_wdata; // RX MTU
+                16'h1000: begin
+                    // TDMA control
+                    if (axil_ctrl_wstrb[0]) begin
+                        tdma_enable_reg <= axil_ctrl_wdata[0];
+                    end
+                end
+                16'h1014: set_tdma_schedule_start_reg[29:0] <= axil_ctrl_wdata; // TDMA schedule start ns
+                16'h1018: set_tdma_schedule_start_reg[63:32] <= axil_ctrl_wdata; // TDMA schedule start sec l
+                16'h101C: begin
+                    // TDMA schedule start sec h
+                    set_tdma_schedule_start_reg[79:64] <= axil_ctrl_wdata;
+                    set_tdma_schedule_start_valid_reg <= 1'b1;
+                end
+                16'h1024: set_tdma_schedule_period_reg[29:0] <= axil_ctrl_wdata; // TDMA schedule period ns
+                16'h1028: set_tdma_schedule_period_reg[63:32] <= axil_ctrl_wdata; // TDMA schedule period sec l
+                16'h102C: begin
+                    // TDMA schedule period sec h
+                    set_tdma_schedule_period_reg[79:64] <= axil_ctrl_wdata;
+                    set_tdma_schedule_period_valid_reg <= 1'b1;
+                end
+                16'h1034: set_tdma_timeslot_period_reg[29:0] <= axil_ctrl_wdata; // TDMA timeslot period ns
+                16'h1038: set_tdma_timeslot_period_reg[63:32] <= axil_ctrl_wdata; // TDMA timeslot period sec l
+                16'h103C: begin
+                    // TDMA timeslot period sec h
+                    set_tdma_timeslot_period_reg[79:64] <= axil_ctrl_wdata;
+                    set_tdma_timeslot_period_valid_reg <= 1'b1;
+                end
+                16'h1044: set_tdma_active_period_reg[29:0] <= axil_ctrl_wdata; // TDMA active period ns
+                16'h1048: set_tdma_active_period_reg[63:32] <= axil_ctrl_wdata; // TDMA active period sec l
+                16'h104C: begin
+                    // TDMA active period sec h
+                    set_tdma_active_period_reg[79:64] <= axil_ctrl_wdata;
+                    set_tdma_active_period_valid_reg <= 1'b1;
+                end
+            endcase
+        end
+
+        
+    end
+
+    if (axil_ctrl_arvalid && !axil_ctrl_rvalid) begin
+        // read operation
+        axil_ctrl_arready_reg <= 1'b1;
+        axil_ctrl_rvalid_reg <= 1'b1;
+        axil_ctrl_rdata_reg <= {AXIL_DATA_WIDTH{1'b0}};
+        if(RMT_TX_ENABLE) begin
+            case ({axil_ctrl_araddr[15:2], 2'b00})
+                16'h0000: axil_ctrl_rdata_reg <= 32'd0;       // port_id
+                16'h0004: begin
+                    // port_features
+                    axil_ctrl_rdata_reg[0] <= RX_RSS_ENABLE && RX_HASH_ENABLE;
+                    axil_ctrl_rdata_reg[4] <= PTP_TS_ENABLE;
+                    axil_ctrl_rdata_reg[8] <= TX_CHECKSUM_ENABLE;
+                    axil_ctrl_rdata_reg[9] <= RX_CHECKSUM_ENABLE;
+                    axil_ctrl_rdata_reg[10] <= RX_HASH_ENABLE;
+                end
+                16'h0008: axil_ctrl_rdata_reg <= MAX_TX_SIZE; // port_mtu
+                16'h0010: axil_ctrl_rdata_reg <= SCHED_COUNT; // scheduler_count
+                16'h0014: axil_ctrl_rdata_reg <= 2**AXIL_SCHED_ADDR_WIDTH; // scheduler_offset
+                16'h0018: axil_ctrl_rdata_reg <= 2**AXIL_SCHED_ADDR_WIDTH; // scheduler_stride
+                16'h001C: axil_ctrl_rdata_reg <= 32'd0;       // scheduler_type
+                16'h0040: begin
+                    // Scheduler enable
+                    axil_ctrl_rdata_reg[0] <= sched_enable_reg;
+                end
+                16'h0080: axil_ctrl_rdata_reg <= rss_mask_reg; // RSS mask
+                16'h0100: axil_ctrl_rdata_reg <= tx_mtu_reg; // TX MTU
+                16'h0200: axil_ctrl_rdata_reg <= rx_mtu_reg; // RX MTU
+                16'h1000: begin
+                    // TDMA control
+                    axil_ctrl_rdata_reg[0] <= tdma_enable_reg;
+                end
+                16'h1004: begin
+                    // TDMA status
+                    axil_ctrl_rdata_reg[0] <= tdma_locked;
+                    axil_ctrl_rdata_reg[1] <= tdma_error;
+                end
+                16'h1008: axil_ctrl_rdata_reg <= 2**TDMA_INDEX_WIDTH; // TDMA timeslot count
+                16'h1014: axil_ctrl_rdata_reg <= set_tdma_schedule_start_reg[29:0]; // TDMA schedule start ns
+                16'h1018: axil_ctrl_rdata_reg <= set_tdma_schedule_start_reg[63:32]; // TDMA schedule start sec l
+                16'h101C: axil_ctrl_rdata_reg <= set_tdma_schedule_start_reg[79:64]; // TDMA schedule start sec h
+                16'h1024: axil_ctrl_rdata_reg <= set_tdma_schedule_period_reg[29:0]; // TDMA schedule period ns
+                16'h1028: axil_ctrl_rdata_reg <= set_tdma_schedule_period_reg[63:32]; // TDMA schedule period sec l
+                16'h102C: axil_ctrl_rdata_reg <= set_tdma_schedule_period_reg[79:64]; // TDMA schedule period sec h
+                16'h1034: axil_ctrl_rdata_reg <= set_tdma_timeslot_period_reg[29:0]; // TDMA timeslot period ns
+                16'h1038: axil_ctrl_rdata_reg <= set_tdma_timeslot_period_reg[63:32]; // TDMA timeslot period sec l
+                16'h103C: axil_ctrl_rdata_reg <= set_tdma_timeslot_period_reg[79:64]; // TDMA timeslot period sec h
+                16'h1044: axil_ctrl_rdata_reg <= set_tdma_active_period_reg[29:0]; // TDMA active period ns
+                16'h1048: axil_ctrl_rdata_reg <= set_tdma_active_period_reg[63:32]; // TDMA active period sec l
+                16'h104C: axil_ctrl_rdata_reg <= set_tdma_active_period_reg[79:64]; // TDMA active period sec h
+                16'h2024: begin
+                    axil_ctrl_rdata_reg <= ctrl_token;
+                end
+                16'h2028: begin
+                    axil_ctrl_rdata_reg <= vlan_drop_flags;
+                end
+            endcase
+        end
+        else begin
+            case ({axil_ctrl_araddr[15:2], 2'b00})
+                16'h0000: axil_ctrl_rdata_reg <= 32'd0;       // port_id
+                16'h0004: begin
+                    // port_features
+                    axil_ctrl_rdata_reg[0] <= RX_RSS_ENABLE && RX_HASH_ENABLE;
+                    axil_ctrl_rdata_reg[4] <= PTP_TS_ENABLE;
+                    axil_ctrl_rdata_reg[8] <= TX_CHECKSUM_ENABLE;
+                    axil_ctrl_rdata_reg[9] <= RX_CHECKSUM_ENABLE;
+                    axil_ctrl_rdata_reg[10] <= RX_HASH_ENABLE;
+                end
+                16'h0008: axil_ctrl_rdata_reg <= MAX_TX_SIZE; // port_mtu
+                16'h0010: axil_ctrl_rdata_reg <= SCHED_COUNT; // scheduler_count
+                16'h0014: axil_ctrl_rdata_reg <= 2**AXIL_SCHED_ADDR_WIDTH; // scheduler_offset
+                16'h0018: axil_ctrl_rdata_reg <= 2**AXIL_SCHED_ADDR_WIDTH; // scheduler_stride
+                16'h001C: axil_ctrl_rdata_reg <= 32'd0;       // scheduler_type
+                16'h0040: begin
+                    // Scheduler enable
+                    axil_ctrl_rdata_reg[0] <= sched_enable_reg;
+                end
+                16'h0080: axil_ctrl_rdata_reg <= rss_mask_reg; // RSS mask
+                16'h0100: axil_ctrl_rdata_reg <= tx_mtu_reg; // TX MTU
+                16'h0200: axil_ctrl_rdata_reg <= rx_mtu_reg; // RX MTU
+                16'h1000: begin
+                    // TDMA control
+                    axil_ctrl_rdata_reg[0] <= tdma_enable_reg;
+                end
+                16'h1004: begin
+                    // TDMA status
+                    axil_ctrl_rdata_reg[0] <= tdma_locked;
+                    axil_ctrl_rdata_reg[1] <= tdma_error;
+                end
+                16'h1008: axil_ctrl_rdata_reg <= 2**TDMA_INDEX_WIDTH; // TDMA timeslot count
+                16'h1014: axil_ctrl_rdata_reg <= set_tdma_schedule_start_reg[29:0]; // TDMA schedule start ns
+                16'h1018: axil_ctrl_rdata_reg <= set_tdma_schedule_start_reg[63:32]; // TDMA schedule start sec l
+                16'h101C: axil_ctrl_rdata_reg <= set_tdma_schedule_start_reg[79:64]; // TDMA schedule start sec h
+                16'h1024: axil_ctrl_rdata_reg <= set_tdma_schedule_period_reg[29:0]; // TDMA schedule period ns
+                16'h1028: axil_ctrl_rdata_reg <= set_tdma_schedule_period_reg[63:32]; // TDMA schedule period sec l
+                16'h102C: axil_ctrl_rdata_reg <= set_tdma_schedule_period_reg[79:64]; // TDMA schedule period sec h
+                16'h1034: axil_ctrl_rdata_reg <= set_tdma_timeslot_period_reg[29:0]; // TDMA timeslot period ns
+                16'h1038: axil_ctrl_rdata_reg <= set_tdma_timeslot_period_reg[63:32]; // TDMA timeslot period sec l
+                16'h103C: axil_ctrl_rdata_reg <= set_tdma_timeslot_period_reg[79:64]; // TDMA timeslot period sec h
+                16'h1044: axil_ctrl_rdata_reg <= set_tdma_active_period_reg[29:0]; // TDMA active period ns
+                16'h1048: axil_ctrl_rdata_reg <= set_tdma_active_period_reg[63:32]; // TDMA active period sec l
+                16'h104C: axil_ctrl_rdata_reg <= set_tdma_active_period_reg[79:64]; // TDMA active period sec h
+            endcase
+        end
+    end
+
+    if (rst) begin
+        axil_ctrl_awready_reg <= 1'b0;
+        axil_ctrl_wready_reg <= 1'b0;
+        axil_ctrl_bvalid_reg <= 1'b0;
+        axil_ctrl_arready_reg <= 1'b0;
+        axil_ctrl_rvalid_reg <= 1'b0;
+
+        sched_enable_reg <= 1'b0;
+        rss_mask_reg <= 0;
+        tx_mtu_reg <= MAX_TX_SIZE;
+        rx_mtu_reg <= MAX_RX_SIZE;
+        tdma_enable_reg <= 1'b0;
+    end
+end
+
+// AXI lite interconnect
+parameter AXIL_S_COUNT = 1;
+parameter AXIL_M_COUNT = SCHED_COUNT+1;
+
+axil_interconnect #(
+    .DATA_WIDTH(AXIL_DATA_WIDTH),
+    .ADDR_WIDTH(AXIL_ADDR_WIDTH),
+    .STRB_WIDTH(AXIL_STRB_WIDTH),
+    .S_COUNT(AXIL_S_COUNT),
+    .M_COUNT(AXIL_M_COUNT),
+    .M_ADDR_WIDTH({AXIL_M_COUNT{w_32(AXIL_SCHED_ADDR_WIDTH)}}),
+    .M_CONNECT_READ({AXIL_M_COUNT{{AXIL_S_COUNT{1'b1}}}}),
+    .M_CONNECT_WRITE({AXIL_M_COUNT{{AXIL_S_COUNT{1'b1}}}})
+)
+axil_interconnect_inst (
+    .clk(clk),
+    .rst(rst),
+    .s_axil_awaddr(s_axil_awaddr),
+    .s_axil_awprot(s_axil_awprot),
+    .s_axil_awvalid(s_axil_awvalid),
+    .s_axil_awready(s_axil_awready),
+    .s_axil_wdata(s_axil_wdata),
+    .s_axil_wstrb(s_axil_wstrb),
+    .s_axil_wvalid(s_axil_wvalid),
+    .s_axil_wready(s_axil_wready),
+    .s_axil_bresp(s_axil_bresp),
+    .s_axil_bvalid(s_axil_bvalid),
+    .s_axil_bready(s_axil_bready),
+    .s_axil_araddr(s_axil_araddr),
+    .s_axil_arprot(s_axil_arprot),
+    .s_axil_arvalid(s_axil_arvalid),
+    .s_axil_arready(s_axil_arready),
+    .s_axil_rdata(s_axil_rdata),
+    .s_axil_rresp(s_axil_rresp),
+    .s_axil_rvalid(s_axil_rvalid),
+    .s_axil_rready(s_axil_rready),
+    .m_axil_awaddr( {axil_sched_awaddr,  axil_ctrl_awaddr} ),
+    .m_axil_awprot( {axil_sched_awprot,  axil_ctrl_awprot} ),
+    .m_axil_awvalid({axil_sched_awvalid, axil_ctrl_awvalid} ),
+    .m_axil_awready({axil_sched_awready, axil_ctrl_awready} ),
+    .m_axil_wdata(  {axil_sched_wdata,   axil_ctrl_wdata} ),
+    .m_axil_wstrb(  {axil_sched_wstrb,   axil_ctrl_wstrb} ),
+    .m_axil_wvalid( {axil_sched_wvalid,  axil_ctrl_wvalid} ),
+    .m_axil_wready( {axil_sched_wready,  axil_ctrl_wready} ),
+    .m_axil_bresp(  {axil_sched_bresp,   axil_ctrl_bresp} ),
+    .m_axil_bvalid( {axil_sched_bvalid,  axil_ctrl_bvalid} ),
+    .m_axil_bready( {axil_sched_bready,  axil_ctrl_bready} ),
+    .m_axil_araddr( {axil_sched_araddr,  axil_ctrl_araddr} ),
+    .m_axil_arprot( {axil_sched_arprot,  axil_ctrl_arprot} ),
+    .m_axil_arvalid({axil_sched_arvalid, axil_ctrl_arvalid} ),
+    .m_axil_arready({axil_sched_arready, axil_ctrl_arready} ),
+    .m_axil_rdata(  {axil_sched_rdata,   axil_ctrl_rdata} ),
+    .m_axil_rresp(  {axil_sched_rresp,   axil_ctrl_rresp} ),
+    .m_axil_rvalid( {axil_sched_rvalid,  axil_ctrl_rvalid} ),
+    .m_axil_rready( {axil_sched_rready,  axil_ctrl_rready} )
+);
+
+desc_op_mux #(
+    .PORTS(2),
+    .SELECT_WIDTH(1),
+    .QUEUE_INDEX_WIDTH(QUEUE_INDEX_WIDTH),
+    .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+    .CPL_QUEUE_INDEX_WIDTH(CPL_QUEUE_INDEX_WIDTH),
+    .S_REQ_TAG_WIDTH(DESC_REQ_TAG_WIDTH_INT),
+    .M_REQ_TAG_WIDTH(DESC_REQ_TAG_WIDTH),
+    .AXIS_DATA_WIDTH(AXIS_DESC_DATA_WIDTH),
+    .AXIS_KEEP_WIDTH(AXIS_DESC_KEEP_WIDTH),
+    .ARB_TYPE("ROUND_ROBIN"),
+    .LSB_PRIORITY("HIGH")
+)
+desc_op_mux_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Descriptor request output
+     */
+    .m_axis_req_sel(m_axis_desc_req_sel),
+    .m_axis_req_queue(m_axis_desc_req_queue),
+    .m_axis_req_tag(m_axis_desc_req_tag),
+    .m_axis_req_valid(m_axis_desc_req_valid),
+    .m_axis_req_ready(m_axis_desc_req_ready),
+
+    /*
+     * Descriptor request status input
+     */
+    .s_axis_req_status_queue(s_axis_desc_req_status_queue),
+    .s_axis_req_status_ptr(s_axis_desc_req_status_ptr),
+    .s_axis_req_status_cpl(s_axis_desc_req_status_cpl),
+    .s_axis_req_status_tag(s_axis_desc_req_status_tag),
+    .s_axis_req_status_empty(s_axis_desc_req_status_empty),
+    .s_axis_req_status_error(s_axis_desc_req_status_error),
+    .s_axis_req_status_valid(s_axis_desc_req_status_valid),
+
+    /*
+     * Descriptor data input
+     */
+    .s_axis_desc_tdata(s_axis_desc_tdata),
+    .s_axis_desc_tkeep(s_axis_desc_tkeep),
+    .s_axis_desc_tvalid(s_axis_desc_tvalid),
+    .s_axis_desc_tready(s_axis_desc_tready),
+    .s_axis_desc_tlast(s_axis_desc_tlast),
+    .s_axis_desc_tid(s_axis_desc_tid),
+    .s_axis_desc_tuser(s_axis_desc_tuser),
+
+    /*
+     * Descriptor request input
+     */
+    .s_axis_req_sel({rx_desc_req_sel, tx_desc_req_sel}),
+    .s_axis_req_queue({rx_desc_req_queue, tx_desc_req_queue}),
+    .s_axis_req_tag({rx_desc_req_tag, tx_desc_req_tag}),
+    .s_axis_req_valid({rx_desc_req_valid, tx_desc_req_valid}),
+    .s_axis_req_ready({rx_desc_req_ready, tx_desc_req_ready}),
+
+    /*
+     * Descriptor response output
+     */
+    .m_axis_req_status_queue({rx_desc_req_status_queue, tx_desc_req_status_queue}),
+    .m_axis_req_status_ptr({rx_desc_req_status_ptr, tx_desc_req_status_ptr}),
+    .m_axis_req_status_cpl({rx_desc_req_status_cpl, tx_desc_req_status_cpl}),
+    .m_axis_req_status_tag({rx_desc_req_status_tag, tx_desc_req_status_tag}),
+    .m_axis_req_status_empty({rx_desc_req_status_empty, tx_desc_req_status_empty}),
+    .m_axis_req_status_error({rx_desc_req_status_error, tx_desc_req_status_error}),
+    .m_axis_req_status_valid({rx_desc_req_status_valid, tx_desc_req_status_valid}),
+
+    /*
+     * Descriptor data output
+     */
+    .m_axis_desc_tdata({rx_desc_tdata, tx_desc_tdata}),
+    .m_axis_desc_tkeep({rx_desc_tkeep, tx_desc_tkeep}),
+    .m_axis_desc_tvalid({rx_desc_tvalid, tx_desc_tvalid}),
+    .m_axis_desc_tready({rx_desc_tready, tx_desc_tready}),
+    .m_axis_desc_tlast({rx_desc_tlast, tx_desc_tlast}),
+    .m_axis_desc_tid({rx_desc_tid, tx_desc_tid}),
+    .m_axis_desc_tuser({rx_desc_tuser, tx_desc_tuser})
+);
+
+cpl_op_mux #(
+    .PORTS(2),
+    .SELECT_WIDTH(1),
+    .QUEUE_INDEX_WIDTH(QUEUE_INDEX_WIDTH),
+    .S_REQ_TAG_WIDTH(DESC_REQ_TAG_WIDTH_INT),
+    .M_REQ_TAG_WIDTH(DESC_REQ_TAG_WIDTH),
+    .CPL_SIZE(CPL_SIZE),
+    .ARB_TYPE("ROUND_ROBIN"),
+    .LSB_PRIORITY("HIGH")
+)
+cpl_op_mux_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Completion request output
+     */
+    .m_axis_req_sel(m_axis_cpl_req_sel),
+    .m_axis_req_queue(m_axis_cpl_req_queue),
+    .m_axis_req_tag(m_axis_cpl_req_tag),
+    .m_axis_req_data(m_axis_cpl_req_data),
+    .m_axis_req_valid(m_axis_cpl_req_valid),
+    .m_axis_req_ready(m_axis_cpl_req_ready),
+
+    /*
+     * Completion request status input
+     */
+    .s_axis_req_status_tag(s_axis_cpl_req_status_tag),
+    .s_axis_req_status_full(s_axis_cpl_req_status_full),
+    .s_axis_req_status_error(s_axis_cpl_req_status_error),
+    .s_axis_req_status_valid(s_axis_cpl_req_status_valid),
+
+    /*
+     * Completion request input
+     */
+    .s_axis_req_sel({rx_cpl_req_sel, tx_cpl_req_sel}),
+    .s_axis_req_queue({rx_cpl_req_queue, tx_cpl_req_queue}),
+    .s_axis_req_tag({rx_cpl_req_tag, tx_cpl_req_tag}),
+    .s_axis_req_data({rx_cpl_req_data, tx_cpl_req_data}),
+    .s_axis_req_valid({rx_cpl_req_valid, tx_cpl_req_valid}),
+    .s_axis_req_ready({rx_cpl_req_ready, tx_cpl_req_ready}),
+
+    /*
+     * Completion response output
+     */
+    .m_axis_req_status_tag({rx_cpl_req_status_tag, tx_cpl_req_status_tag}),
+    .m_axis_req_status_full({rx_cpl_req_status_full, tx_cpl_req_status_full}),
+    .m_axis_req_status_error({rx_cpl_req_status_error, tx_cpl_req_status_error}),
+    .m_axis_req_status_valid({rx_cpl_req_status_valid, tx_cpl_req_status_valid})
+);
+
+generate
+
+if (TX_SCHEDULER == "RR" || TX_SCHEDULER == "TDMA_RR") begin
+
+    tx_scheduler_rr #(
+        .AXIL_DATA_WIDTH(AXIL_DATA_WIDTH),
+        .AXIL_ADDR_WIDTH(AXIL_SCHED_ADDR_WIDTH),
+        .AXIL_STRB_WIDTH(AXIL_STRB_WIDTH),
+        .DMA_CLIENT_LEN_WIDTH(DMA_CLIENT_LEN_WIDTH),
+        .REQ_TAG_WIDTH(REQ_TAG_WIDTH),
+        .OP_TABLE_SIZE(TX_SCHEDULER_OP_TABLE_SIZE),
+        .QUEUE_INDEX_WIDTH(TX_QUEUE_INDEX_WIDTH),
+        .PIPELINE(TX_SCHEDULER_PIPELINE),
+        .SCHED_CTRL_ENABLE(TX_SCHEDULER == "TDMA_RR")
+    )
+    tx_scheduler_inst (
+        .clk(clk),
+        .rst(rst),
+
+        /*
+         * Transmit request output (queue index)
+         */
+        .m_axis_tx_req_queue(tx_req_queue),
+        .m_axis_tx_req_tag(tx_req_tag),
+        .m_axis_tx_req_valid(tx_req_valid),
+        .m_axis_tx_req_ready(tx_req_ready),
+
+        /*
+         * Transmit request status input
+         */
+        .s_axis_tx_req_status_len(tx_req_status_len),
+        .s_axis_tx_req_status_tag(tx_req_status_tag),
+        .s_axis_tx_req_status_valid(tx_req_status_valid),
+
+        /*
+         * Doorbell input
+         */
+        .s_axis_doorbell_queue(s_axis_tx_doorbell_queue),
+        .s_axis_doorbell_valid(s_axis_tx_doorbell_valid),
+
+        /*
+         * Scheduler control input
+         */
+        .s_axis_sched_ctrl_queue(tx_sched_ctrl_queue),
+        .s_axis_sched_ctrl_enable(tx_sched_ctrl_enable),
+        .s_axis_sched_ctrl_valid(tx_sched_ctrl_valid),
+        .s_axis_sched_ctrl_ready(tx_sched_ctrl_ready),
+
+        /*
+         * AXI-Lite slave interface
+         */
+        .s_axil_awaddr(axil_sched_awaddr[0*AXIL_ADDR_WIDTH +: AXIL_ADDR_WIDTH]),
+        .s_axil_awprot(axil_sched_awprot[0*3 +: 3]),
+        .s_axil_awvalid(axil_sched_awvalid[0*1 +: 1]),
+        .s_axil_awready(axil_sched_awready[0*1 +: 1]),
+        .s_axil_wdata(axil_sched_wdata[0*AXIL_DATA_WIDTH +: AXIL_DATA_WIDTH]),
+        .s_axil_wstrb(axil_sched_wstrb[0*AXIL_STRB_WIDTH +: AXIL_STRB_WIDTH]),
+        .s_axil_wvalid(axil_sched_wvalid[0*1 +: 1]),
+        .s_axil_wready(axil_sched_wready[0*1 +: 1]),
+        .s_axil_bresp(axil_sched_bresp[0*2 +: 2]),
+        .s_axil_bvalid(axil_sched_bvalid[0*1 +: 1]),
+        .s_axil_bready(axil_sched_bready[0*1 +: 1]),
+        .s_axil_araddr(axil_sched_araddr[0*AXIL_ADDR_WIDTH +: AXIL_ADDR_WIDTH]),
+        .s_axil_arprot(axil_sched_arprot[0*3 +: 3]),
+        .s_axil_arvalid(axil_sched_arvalid[0*1 +: 1]),
+        .s_axil_arready(axil_sched_arready[0*1 +: 1]),
+        .s_axil_rdata(axil_sched_rdata[0*AXIL_DATA_WIDTH +: AXIL_DATA_WIDTH]),
+        .s_axil_rresp(axil_sched_rresp[0*2 +: 2]),
+        .s_axil_rvalid(axil_sched_rvalid[0*1 +: 1]),
+        .s_axil_rready(axil_sched_rready[0*1 +: 1]),
+
+        /*
+         * Control
+         */
+        .enable(sched_enable_reg),
+        .active()
+    );
+
+end
+
+if (TX_SCHEDULER == "TDMA_RR") begin
+
+    tdma_scheduler #(
+        .INDEX_WIDTH(TDMA_INDEX_WIDTH),
+        .SCHEDULE_START_S(48'h0),
+        .SCHEDULE_START_NS(30'h0),
+        .SCHEDULE_PERIOD_S(48'd0),
+        .SCHEDULE_PERIOD_NS(30'd1000000),
+        .TIMESLOT_PERIOD_S(48'd0),
+        .TIMESLOT_PERIOD_NS(30'd100000),
+        .ACTIVE_PERIOD_S(48'd0),
+        .ACTIVE_PERIOD_NS(30'd100000)
+    )
+    tdma_scheduler_inst (
+        .clk(clk),
+        .rst(rst),
+        .input_ts_96(ptp_ts_96),
+        .input_ts_step(ptp_ts_step),
+        .enable(tdma_enable_reg),
+        .input_schedule_start(set_tdma_schedule_start_reg),
+        .input_schedule_start_valid(set_tdma_schedule_start_valid_reg),
+        .input_schedule_period(set_tdma_schedule_period_reg),
+        .input_schedule_period_valid(set_tdma_schedule_period_valid_reg),
+        .input_timeslot_period(set_tdma_timeslot_period_reg),
+        .input_timeslot_period_valid(set_tdma_timeslot_period_valid_reg),
+        .input_active_period(set_tdma_active_period_reg),
+        .input_active_period_valid(set_tdma_active_period_valid_reg),
+        .locked(tdma_locked),
+        .error(tdma_error),
+        .schedule_start(tdma_schedule_start),
+        .timeslot_index(tdma_timeslot_index),
+        .timeslot_start(tdma_timeslot_start),
+        .timeslot_end(tdma_timeslot_end),
+        .timeslot_active(tdma_timeslot_active)
+    );
+
+    tx_scheduler_ctrl_tdma #(
+        .AXIL_DATA_WIDTH(AXIL_DATA_WIDTH),
+        .AXIL_ADDR_WIDTH(AXIL_SCHED_ADDR_WIDTH),
+        .AXIL_STRB_WIDTH(AXIL_STRB_WIDTH),
+        .TDMA_INDEX_WIDTH(TDMA_INDEX_WIDTH),
+        .QUEUE_INDEX_WIDTH(TX_QUEUE_INDEX_WIDTH),
+        .PIPELINE(2)
+    )
+    tx_scheduler_ctrl_tdma_inst (
+        .clk(clk),
+        .rst(rst),
+
+        /*
+         * Scheduler control output
+         */
+        .m_axis_sched_ctrl_queue(tx_sched_ctrl_queue),
+        .m_axis_sched_ctrl_enable(tx_sched_ctrl_enable),
+        .m_axis_sched_ctrl_valid(tx_sched_ctrl_valid),
+        .m_axis_sched_ctrl_ready(tx_sched_ctrl_ready),
+
+        /*
+         * AXI-Lite slave interface
+         */
+        .s_axil_awaddr(axil_sched_awaddr[1*AXIL_ADDR_WIDTH +: AXIL_ADDR_WIDTH]),
+        .s_axil_awprot(axil_sched_awprot[1*3 +: 3]),
+        .s_axil_awvalid(axil_sched_awvalid[1*1 +: 1]),
+        .s_axil_awready(axil_sched_awready[1*1 +: 1]),
+        .s_axil_wdata(axil_sched_wdata[1*AXIL_DATA_WIDTH +: AXIL_DATA_WIDTH]),
+        .s_axil_wstrb(axil_sched_wstrb[1*AXIL_STRB_WIDTH +: AXIL_STRB_WIDTH]),
+        .s_axil_wvalid(axil_sched_wvalid[1*1 +: 1]),
+        .s_axil_wready(axil_sched_wready[1*1 +: 1]),
+        .s_axil_bresp(axil_sched_bresp[1*2 +: 2]),
+        .s_axil_bvalid(axil_sched_bvalid[1*1 +: 1]),
+        .s_axil_bready(axil_sched_bready[1*1 +: 1]),
+        .s_axil_araddr(axil_sched_araddr[1*AXIL_ADDR_WIDTH +: AXIL_ADDR_WIDTH]),
+        .s_axil_arprot(axil_sched_arprot[1*3 +: 3]),
+        .s_axil_arvalid(axil_sched_arvalid[1*1 +: 1]),
+        .s_axil_arready(axil_sched_arready[1*1 +: 1]),
+        .s_axil_rdata(axil_sched_rdata[1*AXIL_DATA_WIDTH +: AXIL_DATA_WIDTH]),
+        .s_axil_rresp(axil_sched_rresp[1*2 +: 2]),
+        .s_axil_rvalid(axil_sched_rvalid[1*1 +: 1]),
+        .s_axil_rready(axil_sched_rready[1*1 +: 1]),
+
+        /*
+         * TDMA schedule inputs
+         */
+        .tdma_schedule_start(tdma_schedule_start),
+        .tdma_timeslot_index(tdma_timeslot_index),
+        .tdma_timeslot_start(tdma_timeslot_start),
+        .tdma_timeslot_end(tdma_timeslot_end),
+        .tdma_timeslot_active(tdma_timeslot_active)
+    );
+
+end
+
+endgenerate
+
+axis_fifo #(
+    .DEPTH(TX_DESC_FIFO_SIZE*DESC_SIZE),
+    .DATA_WIDTH(AXIS_DESC_DATA_WIDTH),
+    .KEEP_WIDTH(AXIS_DESC_KEEP_WIDTH),
+    .LAST_ENABLE(1),
+    .ID_ENABLE(1),
+    .ID_WIDTH(DESC_REQ_TAG_WIDTH_INT),
+    .DEST_ENABLE(0),
+    .USER_ENABLE(0),
+    .FRAME_FIFO(0)
+)
+tx_desc_fifo (
+    .clk(clk),
+    .rst(rst),
+
+    // AXI input
+    .s_axis_tdata(tx_desc_tdata),
+    .s_axis_tkeep(tx_desc_tkeep),
+    .s_axis_tvalid(tx_desc_tvalid),
+    .s_axis_tready(tx_desc_tready),
+    .s_axis_tlast(tx_desc_tlast),
+    .s_axis_tid(tx_desc_tid),
+    .s_axis_tdest(0),
+    .s_axis_tuser(tx_desc_tuser),
+
+    // AXI output
+    .m_axis_tdata(tx_fifo_desc_tdata),
+    .m_axis_tkeep(tx_fifo_desc_tkeep),
+    .m_axis_tvalid(tx_fifo_desc_tvalid),
+    .m_axis_tready(tx_fifo_desc_tready),
+    .m_axis_tlast(tx_fifo_desc_tlast),
+    .m_axis_tid(tx_fifo_desc_tid),
+    .m_axis_tdest(),
+    .m_axis_tuser(tx_fifo_desc_tuser),
+
+    // Status
+    .status_overflow(),
+    .status_bad_frame(),
+    .status_good_frame()
+);
+
+tx_engine #(
+    .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+    .DMA_ADDR_WIDTH(DMA_ADDR_WIDTH),
+    .DMA_LEN_WIDTH(DMA_LEN_WIDTH),
+    .DMA_CLIENT_LEN_WIDTH(DMA_CLIENT_LEN_WIDTH),
+    .REQ_TAG_WIDTH(REQ_TAG_WIDTH),
+    .DESC_REQ_TAG_WIDTH(DESC_REQ_TAG_WIDTH_INT),
+    .DMA_TAG_WIDTH(DMA_TAG_WIDTH),
+    .DMA_CLIENT_TAG_WIDTH(DMA_CLIENT_TAG_WIDTH),
+    .QUEUE_REQ_TAG_WIDTH(QUEUE_REQ_TAG_WIDTH),
+    .QUEUE_OP_TAG_WIDTH(QUEUE_OP_TAG_WIDTH),
+    .QUEUE_INDEX_WIDTH(TX_QUEUE_INDEX_WIDTH),
+    .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+    .CPL_QUEUE_INDEX_WIDTH(TX_CPL_QUEUE_INDEX_WIDTH),
+    .DESC_TABLE_SIZE(TX_DESC_TABLE_SIZE),
+    .DESC_TABLE_DMA_OP_COUNT_WIDTH(DESC_TABLE_DMA_OP_COUNT_WIDTH),
+    .MAX_TX_SIZE(MAX_TX_SIZE),
+    .TX_BUFFER_OFFSET(0),
+    .TX_BUFFER_SIZE(TX_RAM_SIZE),
+    .TX_BUFFER_STEP_SIZE(SEG_COUNT*SEG_BE_WIDTH),
+    .DESC_SIZE(DESC_SIZE),
+    .CPL_SIZE(CPL_SIZE),
+    .MAX_DESC_REQ(TX_MAX_DESC_REQ),
+    .AXIS_DESC_DATA_WIDTH(AXIS_DESC_DATA_WIDTH),
+    .AXIS_DESC_KEEP_WIDTH(AXIS_DESC_KEEP_WIDTH),
+    .PTP_TS_ENABLE(PTP_TS_ENABLE),
+    .TX_CHECKSUM_ENABLE(TX_CHECKSUM_ENABLE)
+)
+tx_engine_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Transmit request input (queue index)
+     */
+    .s_axis_tx_req_queue(tx_req_queue),
+    .s_axis_tx_req_tag(tx_req_tag),
+    .s_axis_tx_req_valid(tx_req_valid),
+    .s_axis_tx_req_ready(tx_req_ready),
+
+    /*
+     * Transmit request status output
+     */
+    .m_axis_tx_req_status_len(tx_req_status_len),
+    .m_axis_tx_req_status_tag(tx_req_status_tag),
+    .m_axis_tx_req_status_valid(tx_req_status_valid),
+
+    /*
+     * Descriptor request output
+     */
+    .m_axis_desc_req_queue(tx_desc_req_queue),
+    .m_axis_desc_req_tag(tx_desc_req_tag),
+    .m_axis_desc_req_valid(tx_desc_req_valid),
+    .m_axis_desc_req_ready(tx_desc_req_ready),
+
+    /*
+     * Descriptor request status input
+     */
+    .s_axis_desc_req_status_queue(tx_desc_req_status_queue),
+    .s_axis_desc_req_status_ptr(tx_desc_req_status_ptr),
+    .s_axis_desc_req_status_cpl(tx_desc_req_status_cpl),
+    .s_axis_desc_req_status_tag(tx_desc_req_status_tag),
+    .s_axis_desc_req_status_empty(tx_desc_req_status_empty),
+    .s_axis_desc_req_status_error(tx_desc_req_status_error),
+    .s_axis_desc_req_status_valid(tx_desc_req_status_valid),
+
+    /*
+     * Descriptor data input
+     */
+    .s_axis_desc_tdata(tx_fifo_desc_tdata),
+    .s_axis_desc_tkeep(tx_fifo_desc_tkeep),
+    .s_axis_desc_tvalid(tx_fifo_desc_tvalid),
+    .s_axis_desc_tready(tx_fifo_desc_tready),
+    .s_axis_desc_tlast(tx_fifo_desc_tlast),
+    .s_axis_desc_tid(tx_fifo_desc_tid),
+    .s_axis_desc_tuser(tx_fifo_desc_tuser),
+
+    /*
+     * Completion request output
+     */
+    .m_axis_cpl_req_queue(tx_cpl_req_queue),
+    .m_axis_cpl_req_tag(tx_cpl_req_tag),
+    .m_axis_cpl_req_data(tx_cpl_req_data),
+    .m_axis_cpl_req_valid(tx_cpl_req_valid),
+    .m_axis_cpl_req_ready(tx_cpl_req_ready),
+
+    /*
+     * Completion request status input
+     */
+    .s_axis_cpl_req_status_tag(tx_cpl_req_status_tag),
+    .s_axis_cpl_req_status_full(tx_cpl_req_status_full),
+    .s_axis_cpl_req_status_error(tx_cpl_req_status_error),
+    .s_axis_cpl_req_status_valid(tx_cpl_req_status_valid),
+
+    /*
+     * DMA read descriptor output
+     */
+    .m_axis_dma_read_desc_dma_addr(m_axis_dma_read_desc_dma_addr),
+    .m_axis_dma_read_desc_ram_addr(m_axis_dma_read_desc_ram_addr),
+    .m_axis_dma_read_desc_len(m_axis_dma_read_desc_len),
+    .m_axis_dma_read_desc_tag(m_axis_dma_read_desc_tag),
+    .m_axis_dma_read_desc_valid(m_axis_dma_read_desc_valid),
+    .m_axis_dma_read_desc_ready(m_axis_dma_read_desc_ready),
+
+    /*
+     * DMA read descriptor status input
+     */
+    .s_axis_dma_read_desc_status_tag(s_axis_dma_read_desc_status_tag),
+    .s_axis_dma_read_desc_status_valid(s_axis_dma_read_desc_status_valid),
+
+    /*
+     * Transmit descriptor output
+     */
+    .m_axis_tx_desc_addr(dma_tx_desc_addr),
+    .m_axis_tx_desc_len(dma_tx_desc_len),
+    .m_axis_tx_desc_tag(dma_tx_desc_tag),
+    .m_axis_tx_desc_user(dma_tx_desc_user),
+    .m_axis_tx_desc_valid(dma_tx_desc_valid),
+    .m_axis_tx_desc_ready(dma_tx_desc_ready),
+
+    /*
+     * Transmit descriptor status input
+     */
+    .s_axis_tx_desc_status_tag(dma_tx_desc_status_tag),
+    .s_axis_tx_desc_status_valid(dma_tx_desc_status_valid),
+
+    /*
+     * Transmit checksum command output
+     */
+    .m_axis_tx_csum_cmd_csum_enable(tx_csum_cmd_csum_enable),
+    .m_axis_tx_csum_cmd_csum_start(tx_csum_cmd_csum_start),
+    .m_axis_tx_csum_cmd_csum_offset(tx_csum_cmd_csum_offset),
+    .m_axis_tx_csum_cmd_valid(tx_csum_cmd_valid),
+    .m_axis_tx_csum_cmd_ready(tx_csum_cmd_ready),
+
+    /*
+     * Transmit timestamp input
+     */
+    .s_axis_tx_ptp_ts_96(s_axis_tx_ptp_ts_96),
+    .s_axis_tx_ptp_ts_valid(s_axis_tx_ptp_ts_valid),
+    .s_axis_tx_ptp_ts_ready(s_axis_tx_ptp_ts_ready),
+
+    /*
+     * Configuration
+     */
+    .enable(1'b1)
+);
+
+axis_fifo #(
+    .DEPTH(RX_DESC_FIFO_SIZE*DESC_SIZE),
+    .DATA_WIDTH(AXIS_DESC_DATA_WIDTH),
+    .KEEP_WIDTH(AXIS_DESC_KEEP_WIDTH),
+    .LAST_ENABLE(1),
+    .ID_ENABLE(1),
+    .ID_WIDTH(DESC_REQ_TAG_WIDTH_INT),
+    .DEST_ENABLE(0),
+    .USER_ENABLE(0),
+    .FRAME_FIFO(0)
+)
+rx_desc_fifo (
+    .clk(clk),
+    .rst(rst),
+
+    // AXI input
+    .s_axis_tdata(rx_desc_tdata),
+    .s_axis_tkeep(rx_desc_tkeep),
+    .s_axis_tvalid(rx_desc_tvalid),
+    .s_axis_tready(rx_desc_tready),
+    .s_axis_tlast(rx_desc_tlast),
+    .s_axis_tid(rx_desc_tid),
+    .s_axis_tdest(0),
+    .s_axis_tuser(rx_desc_tuser),
+
+    // AXI output
+    .m_axis_tdata(rx_fifo_desc_tdata),
+    .m_axis_tkeep(rx_fifo_desc_tkeep),
+    .m_axis_tvalid(rx_fifo_desc_tvalid),
+    .m_axis_tready(rx_fifo_desc_tready),
+    .m_axis_tlast(rx_fifo_desc_tlast),
+    .m_axis_tid(rx_fifo_desc_tid),
+    .m_axis_tdest(),
+    .m_axis_tuser(rx_fifo_desc_tuser),
+
+    // Status
+    .status_overflow(),
+    .status_bad_frame(),
+    .status_good_frame()
+);
+
+rx_engine #(
+    .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+    .DMA_ADDR_WIDTH(DMA_ADDR_WIDTH),
+    .DMA_LEN_WIDTH(DMA_LEN_WIDTH),
+    .DMA_CLIENT_LEN_WIDTH(DMA_CLIENT_LEN_WIDTH),
+    .REQ_TAG_WIDTH(REQ_TAG_WIDTH),
+    .DESC_REQ_TAG_WIDTH(DESC_REQ_TAG_WIDTH_INT),
+    .DMA_TAG_WIDTH(DMA_TAG_WIDTH),
+    .DMA_CLIENT_TAG_WIDTH(DMA_CLIENT_TAG_WIDTH),
+    .QUEUE_REQ_TAG_WIDTH(QUEUE_REQ_TAG_WIDTH),
+    .QUEUE_OP_TAG_WIDTH(QUEUE_OP_TAG_WIDTH),
+    .QUEUE_INDEX_WIDTH(RX_QUEUE_INDEX_WIDTH),
+    .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+    .CPL_QUEUE_INDEX_WIDTH(RX_CPL_QUEUE_INDEX_WIDTH),
+    .DESC_TABLE_SIZE(RX_DESC_TABLE_SIZE),
+    .DESC_TABLE_DMA_OP_COUNT_WIDTH(DESC_TABLE_DMA_OP_COUNT_WIDTH),
+    .MAX_RX_SIZE(MAX_RX_SIZE),
+    .RX_BUFFER_OFFSET(0),
+    .RX_BUFFER_SIZE(RX_RAM_SIZE),
+    .RX_BUFFER_STEP_SIZE(SEG_COUNT*SEG_BE_WIDTH),
+    .DESC_SIZE(DESC_SIZE),
+    .CPL_SIZE(CPL_SIZE),
+    .MAX_DESC_REQ(RX_MAX_DESC_REQ),
+    .AXIS_DESC_DATA_WIDTH(AXIS_DESC_DATA_WIDTH),
+    .AXIS_DESC_KEEP_WIDTH(AXIS_DESC_KEEP_WIDTH),
+    .PTP_TS_ENABLE(PTP_TS_ENABLE),
+    .RX_HASH_ENABLE(RX_HASH_ENABLE),
+    .RX_CHECKSUM_ENABLE(RX_CHECKSUM_ENABLE)
+)
+rx_engine_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Receive request input (queue index)
+     */
+    .s_axis_rx_req_queue(rx_req_queue),
+    .s_axis_rx_req_tag(rx_req_tag),
+    .s_axis_rx_req_valid(rx_req_valid),
+    .s_axis_rx_req_ready(rx_req_ready),
+
+    /*
+     * Receive request status output
+     */
+    .m_axis_rx_req_status_tag(rx_req_status_tag),
+    .m_axis_rx_req_status_valid(rx_req_status_valid),
+
+    /*
+     * Descriptor request output
+     */
+    .m_axis_desc_req_queue(rx_desc_req_queue),
+    .m_axis_desc_req_tag(rx_desc_req_tag),
+    .m_axis_desc_req_valid(rx_desc_req_valid),
+    .m_axis_desc_req_ready(rx_desc_req_ready),
+
+    /*
+     * Descriptor request status input
+     */
+    .s_axis_desc_req_status_queue(rx_desc_req_status_queue),
+    .s_axis_desc_req_status_ptr(rx_desc_req_status_ptr),
+    .s_axis_desc_req_status_cpl(rx_desc_req_status_cpl),
+    .s_axis_desc_req_status_tag(rx_desc_req_status_tag),
+    .s_axis_desc_req_status_empty(rx_desc_req_status_empty),
+    .s_axis_desc_req_status_error(rx_desc_req_status_error),
+    .s_axis_desc_req_status_valid(rx_desc_req_status_valid),
+
+    /*
+     * Descriptor data input
+     */
+    .s_axis_desc_tdata(rx_fifo_desc_tdata),
+    .s_axis_desc_tkeep(rx_fifo_desc_tkeep),
+    .s_axis_desc_tvalid(rx_fifo_desc_tvalid),
+    .s_axis_desc_tready(rx_fifo_desc_tready),
+    .s_axis_desc_tlast(rx_fifo_desc_tlast),
+    .s_axis_desc_tid(rx_fifo_desc_tid),
+    .s_axis_desc_tuser(rx_fifo_desc_tuser),
+
+    /*
+     * Completion request output
+     */
+    .m_axis_cpl_req_queue(rx_cpl_req_queue),
+    .m_axis_cpl_req_tag(rx_cpl_req_tag),
+    .m_axis_cpl_req_data(rx_cpl_req_data),
+    .m_axis_cpl_req_valid(rx_cpl_req_valid),
+    .m_axis_cpl_req_ready(rx_cpl_req_ready),
+
+    /*
+     * Completion request status input
+     */
+    .s_axis_cpl_req_status_tag(rx_cpl_req_status_tag),
+    .s_axis_cpl_req_status_full(rx_cpl_req_status_full),
+    .s_axis_cpl_req_status_error(rx_cpl_req_status_error),
+    .s_axis_cpl_req_status_valid(rx_cpl_req_status_valid),
+
+    /*
+     * DMA write descriptor output
+     */
+    .m_axis_dma_write_desc_dma_addr(m_axis_dma_write_desc_dma_addr),
+    .m_axis_dma_write_desc_ram_addr(m_axis_dma_write_desc_ram_addr),
+    .m_axis_dma_write_desc_len(m_axis_dma_write_desc_len),
+    .m_axis_dma_write_desc_tag(m_axis_dma_write_desc_tag),
+    .m_axis_dma_write_desc_valid(m_axis_dma_write_desc_valid),
+    .m_axis_dma_write_desc_ready(m_axis_dma_write_desc_ready),
+
+    /*
+     * DMA write descriptor status input
+     */
+    .s_axis_dma_write_desc_status_tag(s_axis_dma_write_desc_status_tag),
+    .s_axis_dma_write_desc_status_valid(s_axis_dma_write_desc_status_valid),
+
+    /*
+     * Receive descriptor output
+     */
+    .m_axis_rx_desc_addr(dma_rx_desc_addr),
+    .m_axis_rx_desc_len(dma_rx_desc_len),
+    .m_axis_rx_desc_tag(dma_rx_desc_tag),
+    .m_axis_rx_desc_valid(dma_rx_desc_valid),
+    .m_axis_rx_desc_ready(dma_rx_desc_ready),
+
+    /*
+     * Receive descriptor status input
+     */
+    .s_axis_rx_desc_status_len(dma_rx_desc_status_len),
+    .s_axis_rx_desc_status_tag(dma_rx_desc_status_tag),
+    .s_axis_rx_desc_status_user(dma_rx_desc_status_user),
+    .s_axis_rx_desc_status_valid(dma_rx_desc_status_valid),
+
+    /*
+     * Receive timestamp input
+     */
+    .s_axis_rx_ptp_ts_96(s_axis_rx_ptp_ts_96),
+    .s_axis_rx_ptp_ts_valid(s_axis_rx_ptp_ts_valid),
+    .s_axis_rx_ptp_ts_ready(s_axis_rx_ptp_ts_ready),
+
+    /*
+     * Receive hash input
+     */
+    .s_axis_rx_hash(rx_fifo_hash),
+    .s_axis_rx_hash_type(rx_fifo_hash_type),
+    .s_axis_rx_hash_valid(rx_fifo_hash_valid),
+    .s_axis_rx_hash_ready(rx_fifo_hash_ready),
+
+    /*
+     * Receive checksum input
+     */
+    .s_axis_rx_csum(rx_fifo_csum),
+    .s_axis_rx_csum_valid(rx_fifo_csum_valid),
+    .s_axis_rx_csum_ready(rx_fifo_csum_ready),
+
+    /*
+     * Configuration
+     */
+    .mtu(rx_mtu_reg),
+    .enable(1'b1)
+);
+
+generate
+
+if (RX_HASH_ENABLE) begin
+
+    rx_hash #(
+        .DATA_WIDTH(AXIS_DATA_WIDTH)
+    )
+    rx_hash_inst (
+        .clk(clk),
+        .rst(rst),
+        .s_axis_tdata(rx_axis_tdata),
+        .s_axis_tkeep(rx_axis_tkeep),
+        .s_axis_tvalid(rx_axis_tvalid & rx_axis_tready),
+        .s_axis_tlast(rx_axis_tlast),
+        .hash_key(320'h6d5a56da255b0ec24167253d43a38fb0d0ca2bcbae7b30b477cb2da38030f20c6a42b73bbeac01fa),
+        .m_axis_hash(rx_hash),
+        .m_axis_hash_type(rx_hash_type),
+        .m_axis_hash_valid(rx_hash_valid)
+    );
+
+    axis_fifo #(
+        .DEPTH(32),
+        .DATA_WIDTH(32+4),
+        .KEEP_ENABLE(0),
+        .LAST_ENABLE(0),
+        .ID_ENABLE(0),
+        .DEST_ENABLE(0),
+        .USER_ENABLE(0),
+        .FRAME_FIFO(0)
+    )
+    rx_hash_fifo (
+        .clk(clk),
+        .rst(rst),
+
+        // AXI input
+        .s_axis_tdata({rx_hash_type, rx_hash}),
+        .s_axis_tkeep(0),
+        .s_axis_tvalid(rx_hash_valid),
+        .s_axis_tready(),
+        .s_axis_tlast(0),
+        .s_axis_tid(0),
+        .s_axis_tdest(0),
+        .s_axis_tuser(0),
+
+        // AXI output
+        .m_axis_tdata({rx_fifo_hash_type, rx_fifo_hash}),
+        .m_axis_tkeep(),
+        .m_axis_tvalid(rx_fifo_hash_valid),
+        .m_axis_tready(rx_fifo_hash_ready),
+        .m_axis_tlast(),
+        .m_axis_tid(),
+        .m_axis_tdest(),
+        .m_axis_tuser(),
+
+        // Status
+        .status_overflow(),
+        .status_bad_frame(),
+        .status_good_frame()
+    );
+
+end else begin
+
+    assign rx_fifo_hash = 32'd0;
+    assign rx_fifo_type = 4'd0;
+    assign rx_fifo_hash_valid = 1'b0;
+
+end
+
+if (RX_RSS_ENABLE && RX_HASH_ENABLE) begin
+
+    axis_fifo #(
+        .DEPTH(AXIS_KEEP_WIDTH*32),
+        .DATA_WIDTH(AXIS_DATA_WIDTH),
+        .KEEP_ENABLE(AXIS_KEEP_WIDTH > 1),
+        .KEEP_WIDTH(AXIS_KEEP_WIDTH),
+        .LAST_ENABLE(1),
+        .ID_ENABLE(0),
+        .DEST_ENABLE(0),
+        .USER_ENABLE(1),
+        .USER_WIDTH(1),
+        .FRAME_FIFO(0)
+    )
+    rx_hash_data_fifo (
+        .clk(clk),
+        .rst(rst),
+
+        // AXI input
+        .s_axis_tdata(rx_axis_tdata),
+        .s_axis_tkeep(rx_axis_tkeep),
+        .s_axis_tvalid(rx_axis_tvalid),
+        .s_axis_tready(rx_axis_tready),
+        .s_axis_tlast(rx_axis_tlast),
+        .s_axis_tid(0),
+        .s_axis_tdest(0),
+        .s_axis_tuser(rx_axis_tuser),
+
+        // AXI output
+        .m_axis_tdata(rx_axis_tdata_int),
+        .m_axis_tkeep(rx_axis_tkeep_int),
+        .m_axis_tvalid(rx_axis_tvalid_int),
+        .m_axis_tready(rx_axis_tready_int),
+        .m_axis_tlast(rx_axis_tlast_int),
+        .m_axis_tid(),
+        .m_axis_tdest(),
+        .m_axis_tuser(rx_axis_tuser_int),
+
+        // Status
+        .status_overflow(),
+        .status_bad_frame(),
+        .status_good_frame()
+    );
+
+    // Generate RX requests (RSS)
+    assign rx_req_tag = 0;
+
+    axis_fifo #(
+        .DEPTH(32),
+        .DATA_WIDTH(RX_QUEUE_INDEX_WIDTH),
+        .KEEP_ENABLE(0),
+        .LAST_ENABLE(0),
+        .ID_ENABLE(0),
+        .DEST_ENABLE(0),
+        .USER_ENABLE(0),
+        .FRAME_FIFO(0)
+    )
+    rx_req_fifo (
+        .clk(clk),
+        .rst(rst),
+
+        // AXI input
+        .s_axis_tdata(rx_hash & rss_mask_reg),
+        .s_axis_tkeep(0),
+        .s_axis_tvalid(rx_hash_valid),
+        .s_axis_tready(),
+        .s_axis_tlast(0),
+        .s_axis_tid(0),
+        .s_axis_tdest(0),
+        .s_axis_tuser(0),
+
+        // AXI output
+        .m_axis_tdata(rx_req_queue),
+        .m_axis_tkeep(),
+        .m_axis_tvalid(rx_req_valid),
+        .m_axis_tready(rx_req_ready),
+        .m_axis_tlast(),
+        .m_axis_tid(),
+        .m_axis_tdest(),
+        .m_axis_tuser(),
+
+        // Status
+        .status_overflow(),
+        .status_bad_frame(),
+        .status_good_frame()
+    );
+
+end else begin
+
+    assign rx_axis_tdata_int = rx_axis_tdata;
+    assign rx_axis_tkeep_int = rx_axis_tkeep;
+    assign rx_axis_tvalid_int = rx_axis_tvalid;
+    assign rx_axis_tready = rx_axis_tready_int;
+    assign rx_axis_tlast_int = rx_axis_tlast;
+    assign rx_axis_tuser_int = rx_axis_tuser;
+
+    // Generate RX requests (no RSS)
+    reg rx_frame_reg = 1'b0;
+    reg rx_req_valid_reg = 1'b0;
+
+    assign rx_req_queue = 0;
+    assign rx_req_tag = 0;
+    assign rx_req_valid = rx_axis_tvalid_int && !rx_frame_reg;
+
+    always @(posedge clk) begin
+        if (rx_req_ready) begin
+            rx_req_valid_reg <= 1'b0;
+        end
+
+        if (rx_axis_tready_int && rx_axis_tvalid_int) begin
+            if (!rx_frame_reg) begin
+                rx_req_valid_reg <= 1'b1;
+            end
+            rx_frame_reg <= !rx_axis_tlast_int;
+        end
+
+        if (rst) begin
+            rx_frame_reg <= 1'b0;
+            rx_req_valid_reg <= 1'b0;
+        end
+    end
+
+end
+
+if (RX_CHECKSUM_ENABLE) begin
+
+    rx_checksum #(
+        .DATA_WIDTH(AXIS_DATA_WIDTH)
+    )
+    rx_checksum_inst (
+        .clk(clk),
+        .rst(rst),
+        .s_axis_tdata(rx_axis_tdata_int),
+        .s_axis_tkeep(rx_axis_tkeep_int),
+        .s_axis_tvalid(rx_axis_tvalid_int & rx_axis_tready_int),
+        .s_axis_tlast(rx_axis_tlast_int),
+        .m_axis_csum(rx_csum),
+        .m_axis_csum_valid(rx_csum_valid)
+    );
+
+    axis_fifo #(
+        .DEPTH(32),
+        .DATA_WIDTH(16),
+        .KEEP_ENABLE(0),
+        .LAST_ENABLE(0),
+        .ID_ENABLE(0),
+        .DEST_ENABLE(0),
+        .USER_ENABLE(0),
+        .FRAME_FIFO(0)
+    )
+    rx_csum_fifo (
+        .clk(clk),
+        .rst(rst),
+
+        // AXI input
+        .s_axis_tdata(rx_csum),
+        .s_axis_tkeep(0),
+        .s_axis_tvalid(rx_csum_valid),
+        .s_axis_tready(),
+        .s_axis_tlast(0),
+        .s_axis_tid(0),
+        .s_axis_tdest(0),
+        .s_axis_tuser(0),
+
+        // AXI output
+        .m_axis_tdata(rx_fifo_csum),
+        .m_axis_tkeep(),
+        .m_axis_tvalid(rx_fifo_csum_valid),
+        .m_axis_tready(rx_fifo_csum_ready),
+        .m_axis_tlast(),
+        .m_axis_tid(),
+        .m_axis_tdest(),
+        .m_axis_tuser(),
+
+        // Status
+        .status_overflow(),
+        .status_bad_frame(),
+        .status_good_frame()
+    );
+
+end else begin
+
+    assign rx_fifo_csum = 16'd0;
+    assign rx_fifo_csum_valid = 1'b0;
+
+end
+
+if (TX_CHECKSUM_ENABLE) begin
+
+    axis_fifo #(
+        .DEPTH(32),
+        .DATA_WIDTH(1+8+8),
+        .KEEP_ENABLE(0),
+        .LAST_ENABLE(0),
+        .ID_ENABLE(0),
+        .DEST_ENABLE(0),
+        .USER_ENABLE(0),
+        .FRAME_FIFO(0)
+    )
+    tx_csum_fifo (
+        .clk(clk),
+        .rst(rst),
+
+        // AXI input
+        .s_axis_tdata({tx_csum_cmd_csum_enable, tx_csum_cmd_csum_start, tx_csum_cmd_csum_offset}),
+        .s_axis_tkeep(0),
+        .s_axis_tvalid(tx_csum_cmd_valid),
+        .s_axis_tready(tx_csum_cmd_ready),
+        .s_axis_tlast(0),
+        .s_axis_tid(0),
+        .s_axis_tdest(0),
+        .s_axis_tuser(0),
+
+        // AXI output
+        .m_axis_tdata({tx_fifo_csum_cmd_csum_enable, tx_fifo_csum_cmd_csum_start, tx_fifo_csum_cmd_csum_offset}),
+        .m_axis_tkeep(),
+        .m_axis_tvalid(tx_fifo_csum_cmd_valid),
+        .m_axis_tready(tx_fifo_csum_cmd_ready),
+        .m_axis_tlast(),
+        .m_axis_tid(),
+        .m_axis_tdest(),
+        .m_axis_tuser(),
+
+        // Status
+        .status_overflow(),
+        .status_bad_frame(),
+        .status_good_frame()
+    );
+
+    tx_checksum #(
+        .DATA_WIDTH(AXIS_DATA_WIDTH),
+        .ID_ENABLE(0),
+        .DEST_ENABLE(0),
+        .USER_ENABLE(1),
+        .USER_WIDTH(1),
+        .USE_INIT_VALUE(0),
+        .DATA_FIFO_DEPTH(MAX_TX_SIZE),
+        .CHECKSUM_FIFO_DEPTH(64)
+    )
+    tx_checksum_inst (
+        .clk(clk),
+        .rst(rst),
+
+        /*
+         * AXI input
+         */
+        .s_axis_tdata(tx_axis_tdata_int),
+        .s_axis_tkeep(tx_axis_tkeep_int),
+        .s_axis_tvalid(tx_axis_tvalid_int),
+        .s_axis_tready(tx_axis_tready_int),
+        .s_axis_tlast(tx_axis_tlast_int),
+        .s_axis_tid(0),
+        .s_axis_tdest(0),
+        .s_axis_tuser(tx_axis_tuser_int),
+
+        /*
+         * AXI output
+         */
+        .m_axis_tdata(tx_axis_tdata_int_2),
+        .m_axis_tkeep(tx_axis_tkeep_int_2),
+        .m_axis_tvalid(tx_axis_tvalid_int_2),
+        .m_axis_tready(tx_axis_tready_int_2),
+        .m_axis_tlast(tx_axis_tlast_int_2),
+        .m_axis_tid(),
+        .m_axis_tdest(),
+        .m_axis_tuser(0),
+
+        /*
+         * Control
+         */
+        .s_axis_cmd_csum_enable(tx_fifo_csum_cmd_csum_enable),
+        .s_axis_cmd_csum_start(tx_fifo_csum_cmd_csum_start),
+        .s_axis_cmd_csum_offset(tx_fifo_csum_cmd_csum_offset),
+        .s_axis_cmd_csum_init(16'd0),
+        .s_axis_cmd_valid(tx_fifo_csum_cmd_valid),
+        .s_axis_cmd_ready(tx_fifo_csum_cmd_ready)
+    );
+
+end else begin
+
+    assign tx_axis_tdata_int_2 = tx_axis_tdata_int;
+    assign tx_axis_tkeep_int_2 = tx_axis_tkeep_int;
+    assign tx_axis_tvalid_int_2 = tx_axis_tvalid_int;
+    assign tx_axis_tready_int = tx_axis_tready_int_2;
+    assign tx_axis_tlast_int_2 = tx_axis_tlast_int;
+    assign tx_axis_tuser_int_2 = tx_axis_tuser_int;
+
+    assign tx_csum_cmd_ready = 1'b1;
+
+end
+
+//added RMT plugins for tx path.
+
+if (RMT_TX_ENABLE) begin
+
+    rmt_wrapper
+    rmt_wrapper_tx
+    (
+    	.clk(clk),		// axis clk
+    	.aresetn(~rst),	
+        .vlan_drop_flags(vlan_drop_flags),
+        .ctrl_token(ctrl_token),
+
+    	// input Slave AXI Stream
+    	.s_axis_tdata(tx_axis_tdata_int_2),
+    	.s_axis_tkeep(tx_axis_tkeep_int_2),
+    	.s_axis_tuser(tx_axis_tuser_int_2),
+    	.s_axis_tvalid(tx_axis_tvalid_int_2),
+    	.s_axis_tready(tx_axis_tready_int_2),
+    	.s_axis_tlast(tx_axis_tlast_int_2),
+
+    	// output Master AXI Stream
+    	.m_axis_tdata(tx_axis_tdata),
+    	.m_axis_tkeep(tx_axis_tkeep),
+    	.m_axis_tuser(0),
+    	.m_axis_tvalid(tx_axis_tvalid),
+    	.m_axis_tready(tx_axis_tready),
+    	.m_axis_tlast(tx_axis_tlast)
+
+        // /*
+        // * AXI-Lite slave interface
+        // */
+        // .s_axil_awaddr(axil_rmt_awaddr),
+        // .s_axil_awprot(axil_rmt_awprot),
+        // .s_axil_awvalid(axil_rmt_awvalid),
+        // .s_axil_awready(axil_rmt_awready),
+        // .s_axil_wdata(axil_rmt_wdata),
+        // .s_axil_wstrb(axil_rmt_wstrb),
+        // .s_axil_wvalid(axil_rmt_wvalid),
+        // .s_axil_wready(axil_rmt_wready),
+        // .s_axil_bresp(axil_rmt_bresp),
+        // .s_axil_bvalid(axil_rmt_bvalid),
+        // .s_axil_bready(axil_rmt_bready),
+
+        // .s_axil_araddr(axil_rmt_araddr),
+        // .s_axil_arprot(axil_rmt_arprot),
+        // .s_axil_arvalid(axil_rmt_arvalid),
+        // .s_axil_arready(axil_rmt_arready),
+        // .s_axil_rdata(axil_rmt_rdata),
+        // .s_axil_rresp(axil_rmt_rresp),
+        // .s_axil_rvalid(axil_rmt_rvalid),
+        // .s_axil_rready(axil_rmt_rready)
+    );
+
+
+end 
+
+else begin
+
+    assign tx_axis_tdata = tx_axis_tdata_int_2;
+    assign tx_axis_tkeep = tx_axis_tkeep_int_2;
+    assign tx_axis_tvalid = tx_axis_tvalid_int_2;
+    assign tx_axis_tready_int_2 = tx_axis_tready;
+    assign tx_axis_tlast = tx_axis_tlast_int_2;
+    assign tx_axis_tuser = tx_axis_tuser_int_2;
+
+end
+
+endgenerate
+
+wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0]  dma_ram_rd_cmd_addr_int;
+wire [SEG_COUNT-1:0]                 dma_ram_rd_cmd_valid_int;
+wire [SEG_COUNT-1:0]                 dma_ram_rd_cmd_ready_int;
+wire [SEG_COUNT*SEG_DATA_WIDTH-1:0]  dma_ram_rd_resp_data_int;
+wire [SEG_COUNT-1:0]                 dma_ram_rd_resp_valid_int;
+wire [SEG_COUNT-1:0]                 dma_ram_rd_resp_ready_int;
+
+dma_psdpram #(
+    .SIZE(TX_RAM_SIZE),
+    .SEG_COUNT(SEG_COUNT),
+    .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+    .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+    .SEG_BE_WIDTH(SEG_BE_WIDTH),
+    .PIPELINE(RAM_PIPELINE)
+)
+dma_psdpram_tx_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Write port
+     */
+    .wr_cmd_be(dma_ram_wr_cmd_be),
+    .wr_cmd_addr(dma_ram_wr_cmd_addr),
+    .wr_cmd_data(dma_ram_wr_cmd_data),
+    .wr_cmd_valid(dma_ram_wr_cmd_valid),
+    .wr_cmd_ready(dma_ram_wr_cmd_ready),
+
+    /*
+     * Read port
+     */
+    .rd_cmd_addr(dma_ram_rd_cmd_addr_int),
+    .rd_cmd_valid(dma_ram_rd_cmd_valid_int),
+    .rd_cmd_ready(dma_ram_rd_cmd_ready_int),
+    .rd_resp_data(dma_ram_rd_resp_data_int),
+    .rd_resp_valid(dma_ram_rd_resp_valid_int),
+    .rd_resp_ready(dma_ram_rd_resp_ready_int)
+);
+
+dma_client_axis_source #(
+    .SEG_COUNT(SEG_COUNT),
+    .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+    .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+    .SEG_BE_WIDTH(SEG_BE_WIDTH),
+    .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+    .AXIS_DATA_WIDTH(AXIS_DATA_WIDTH),
+    .AXIS_KEEP_ENABLE(AXIS_KEEP_WIDTH > 1),
+    .AXIS_KEEP_WIDTH(AXIS_KEEP_WIDTH),
+    .AXIS_LAST_ENABLE(1),
+    .AXIS_ID_ENABLE(0),
+    .AXIS_DEST_ENABLE(0),
+    .AXIS_USER_ENABLE(1),
+    .AXIS_USER_WIDTH(1),
+    .LEN_WIDTH(DMA_CLIENT_LEN_WIDTH),
+    .TAG_WIDTH(DMA_CLIENT_TAG_WIDTH)
+)
+dma_client_axis_source_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * DMA read descriptor input
+     */
+    .s_axis_read_desc_ram_addr(dma_tx_desc_addr),
+    .s_axis_read_desc_len(dma_tx_desc_len),
+    .s_axis_read_desc_tag(dma_tx_desc_tag),
+    .s_axis_read_desc_id(0),
+    .s_axis_read_desc_dest(0),
+    .s_axis_read_desc_user(dma_tx_desc_user),
+    .s_axis_read_desc_valid(dma_tx_desc_valid),
+    .s_axis_read_desc_ready(dma_tx_desc_ready),
+
+    /*
+     * DMA read descriptor status output
+     */
+    .m_axis_read_desc_status_tag(dma_tx_desc_status_tag),
+    .m_axis_read_desc_status_valid(dma_tx_desc_status_valid),
+
+    /*
+     * AXI stream read data output
+     */
+    .m_axis_read_data_tdata(tx_axis_tdata_int),
+    .m_axis_read_data_tkeep(tx_axis_tkeep_int),
+    .m_axis_read_data_tvalid(tx_axis_tvalid_int),
+    .m_axis_read_data_tready(tx_axis_tready_int),
+    .m_axis_read_data_tlast(tx_axis_tlast_int),
+    .m_axis_read_data_tid(),
+    .m_axis_read_data_tdest(),
+    .m_axis_read_data_tuser(tx_axis_tuser_int),
+
+    /*
+     * RAM interface
+     */
+    .ram_rd_cmd_addr(dma_ram_rd_cmd_addr_int),
+    .ram_rd_cmd_valid(dma_ram_rd_cmd_valid_int),
+    .ram_rd_cmd_ready(dma_ram_rd_cmd_ready_int),
+    .ram_rd_resp_data(dma_ram_rd_resp_data_int),
+    .ram_rd_resp_valid(dma_ram_rd_resp_valid_int),
+    .ram_rd_resp_ready(dma_ram_rd_resp_ready_int),
+
+    /*
+     * Configuration
+     */
+    .enable(dma_enable)
+);
+
+wire [SEG_COUNT*SEG_BE_WIDTH-1:0]    dma_ram_wr_cmd_be_int;
+wire [SEG_COUNT*SEG_ADDR_WIDTH-1:0]  dma_ram_wr_cmd_addr_int;
+wire [SEG_COUNT*SEG_DATA_WIDTH-1:0]  dma_ram_wr_cmd_data_int;
+wire [SEG_COUNT-1:0]                 dma_ram_wr_cmd_valid_int;
+wire [SEG_COUNT-1:0]                 dma_ram_wr_cmd_ready_int;
+
+dma_psdpram #(
+    .SIZE(RX_RAM_SIZE),
+    .SEG_COUNT(SEG_COUNT),
+    .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+    .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+    .SEG_BE_WIDTH(SEG_BE_WIDTH),
+    .PIPELINE(RAM_PIPELINE)
+)
+dma_psdpram_rx_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Write port
+     */
+    .wr_cmd_be(dma_ram_wr_cmd_be_int),
+    .wr_cmd_addr(dma_ram_wr_cmd_addr_int),
+    .wr_cmd_data(dma_ram_wr_cmd_data_int),
+    .wr_cmd_valid(dma_ram_wr_cmd_valid_int),
+    .wr_cmd_ready(dma_ram_wr_cmd_ready_int),
+
+    /*
+     * Read port
+     */
+    .rd_cmd_addr(dma_ram_rd_cmd_addr),
+    .rd_cmd_valid(dma_ram_rd_cmd_valid),
+    .rd_cmd_ready(dma_ram_rd_cmd_ready),
+    .rd_resp_data(dma_ram_rd_resp_data),
+    .rd_resp_valid(dma_ram_rd_resp_valid),
+    .rd_resp_ready(dma_ram_rd_resp_ready)
+);
+
+dma_client_axis_sink #(
+    .SEG_COUNT(SEG_COUNT),
+    .SEG_DATA_WIDTH(SEG_DATA_WIDTH),
+    .SEG_ADDR_WIDTH(SEG_ADDR_WIDTH),
+    .SEG_BE_WIDTH(SEG_BE_WIDTH),
+    .RAM_ADDR_WIDTH(RAM_ADDR_WIDTH),
+    .AXIS_DATA_WIDTH(AXIS_DATA_WIDTH),
+    .AXIS_KEEP_ENABLE(AXIS_KEEP_WIDTH > 1),
+    .AXIS_KEEP_WIDTH(AXIS_KEEP_WIDTH),
+    .AXIS_LAST_ENABLE(1),
+    .AXIS_ID_ENABLE(0),
+    .AXIS_DEST_ENABLE(0),
+    .AXIS_USER_ENABLE(1),
+    .AXIS_USER_WIDTH(1),
+    .LEN_WIDTH(DMA_CLIENT_LEN_WIDTH),
+    .TAG_WIDTH(DMA_CLIENT_TAG_WIDTH)
+)
+dma_client_axis_sink_inst (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * DMA write descriptor input
+     */
+    .s_axis_write_desc_ram_addr(dma_rx_desc_addr),
+    .s_axis_write_desc_len(dma_rx_desc_len),
+    .s_axis_write_desc_tag(dma_rx_desc_tag),
+    .s_axis_write_desc_valid(dma_rx_desc_valid),
+    .s_axis_write_desc_ready(dma_rx_desc_ready),
+
+    /*
+     * DMA write descriptor status output
+     */
+    .m_axis_write_desc_status_len(dma_rx_desc_status_len),
+    .m_axis_write_desc_status_tag(dma_rx_desc_status_tag),
+    .m_axis_write_desc_status_id(),
+    .m_axis_write_desc_status_dest(),
+    .m_axis_write_desc_status_user(dma_rx_desc_status_user),
+    .m_axis_write_desc_status_valid(dma_rx_desc_status_valid),
+
+    /*
+     * AXI stream write data input
+     */
+    .s_axis_write_data_tdata(rx_axis_tdata_int),
+    .s_axis_write_data_tkeep(rx_axis_tkeep_int),
+    .s_axis_write_data_tvalid(rx_axis_tvalid_int),
+    .s_axis_write_data_tready(rx_axis_tready_int),
+    .s_axis_write_data_tlast(rx_axis_tlast_int),
+    .s_axis_write_data_tid(0),
+    .s_axis_write_data_tdest(0),
+    .s_axis_write_data_tuser(rx_axis_tuser_int),
+
+    /*
+     * RAM interface
+     */
+    .ram_wr_cmd_be(dma_ram_wr_cmd_be_int),
+    .ram_wr_cmd_addr(dma_ram_wr_cmd_addr_int),
+    .ram_wr_cmd_data(dma_ram_wr_cmd_data_int),
+    .ram_wr_cmd_valid(dma_ram_wr_cmd_valid_int),
+    .ram_wr_cmd_ready(dma_ram_wr_cmd_ready_int),
+
+    /*
+     * Configuration
+     */
+    .enable(dma_enable),
+    .abort(1'b0)
+);
+
+endmodule
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/tcl/create_project.tcl ./fpga/mqnic/AU250/fpga_100g/tcl/create_project.tcl
--- ./fpga-raw/mqnic/AU250/fpga_100g/tcl/create_project.tcl	1970-01-01 08:00:00.000000000 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/tcl/create_project.tcl	2022-01-31 13:07:06.353166993 +0800
@@ -0,0 +1,145 @@
+##############################
+
+set design TProj
+set top fpga
+set device xcu250-figd2104-2-e
+set proj_dir ./project_synth
+
+set public_repo_dir $::env(LIB_RMT_PATH)/netfpga_fifo/
+
+set_property ip_repo_paths ${public_repo_dir} [current_fileset]
+update_ip_catalog
+
+#############################
+# Source files
+set SYN_FILES [list rtl/fpga.v]
+lappend SYN_FILES rtl/one_in_one_out/fpga_core.v
+#
+lappend SYN_FILES rtl/debounce_switch.v
+lappend SYN_FILES rtl/sync_signal.v
+# lappend SYN_FILES rtl/one_in_one_out/interface-perf.v
+# lappend SYN_FILES rtl/one_in_one_out/port-perf.v
+lappend SYN_FILES rtl/one_in_one_out/interface.v
+lappend SYN_FILES rtl/one_in_one_out/port.v
+#
+lappend SYN_FILES rtl/common/cpl_write.v
+lappend SYN_FILES rtl/common/cpl_op_mux.v
+lappend SYN_FILES rtl/common/desc_fetch.v
+lappend SYN_FILES rtl/common/desc_op_mux.v
+lappend SYN_FILES rtl/common/queue_manager.v
+lappend SYN_FILES rtl/common/cpl_queue_manager.v
+lappend SYN_FILES rtl/common/event_mux.v
+lappend SYN_FILES rtl/common/tx_scheduler_rr.v
+lappend SYN_FILES rtl/common/tdma_scheduler.v
+lappend SYN_FILES rtl/common/tx_engine.v
+lappend SYN_FILES rtl/common/rx_engine.v
+lappend SYN_FILES rtl/common/tx_checksum.v
+lappend SYN_FILES rtl/common/rx_hash.v
+lappend SYN_FILES rtl/common/rx_checksum.v
+lappend SYN_FILES rtl/common/cmac_pad.v
+lappend SYN_FILES lib/eth/rtl/ptp_clock.v
+lappend SYN_FILES lib/eth/rtl/ptp_clock_cdc.v
+lappend SYN_FILES lib/eth/rtl/ptp_ts_extract.v
+lappend SYN_FILES lib/axi/rtl/axil_interconnect.v
+lappend SYN_FILES lib/axi/rtl/arbiter.v
+lappend SYN_FILES lib/axi/rtl/priority_encoder.v
+lappend SYN_FILES lib/axis/rtl/axis_adapter.v
+lappend SYN_FILES lib/axis/rtl/axis_async_fifo.v
+lappend SYN_FILES lib/axis/rtl/axis_fifo.v
+lappend SYN_FILES lib/axis/rtl/axis_register.v
+lappend SYN_FILES lib/axis/rtl/sync_reset.v
+lappend SYN_FILES lib/pcie/rtl/pcie_us_axil_master.v
+lappend SYN_FILES lib/pcie/rtl/dma_if_pcie_us.v
+lappend SYN_FILES lib/pcie/rtl/dma_if_pcie_us_rd.v
+lappend SYN_FILES lib/pcie/rtl/dma_if_pcie_us_wr.v
+lappend SYN_FILES lib/pcie/rtl/dma_if_mux.v
+lappend SYN_FILES lib/pcie/rtl/dma_if_mux_rd.v
+lappend SYN_FILES lib/pcie/rtl/dma_if_mux_wr.v
+lappend SYN_FILES lib/pcie/rtl/dma_psdpram.v
+lappend SYN_FILES lib/pcie/rtl/dma_client_axis_sink.v
+lappend SYN_FILES lib/pcie/rtl/dma_client_axis_source.v
+lappend SYN_FILES lib/pcie/rtl/pcie_us_cfg.v
+lappend SYN_FILES lib/pcie/rtl/pcie_us_msi.v
+lappend SYN_FILES lib/pcie/rtl/pcie_tag_manager.v
+lappend SYN_FILES lib/pcie/rtl/pulse_merge.v
+# RMT-related 
+lappend SYN_FILES lib_rmt/rmtv2/rmt_wrapper.v
+lappend SYN_FILES lib_rmt/rmtv2/pkt_filter.v
+lappend SYN_FILES lib_rmt/rmtv2/cookie.v
+lappend SYN_FILES lib_rmt/rmtv2/parser_top.v
+lappend SYN_FILES lib_rmt/rmtv2/parser_do_parsing_top.v
+lappend SYN_FILES lib_rmt/rmtv2/parser_do_parsing.v
+lappend SYN_FILES lib_rmt/rmtv2/parser_wait_segs.v
+lappend SYN_FILES lib_rmt/rmtv2/sub_parser.v
+lappend SYN_FILES lib_rmt/rmtv2/deparser_top.v
+lappend SYN_FILES lib_rmt/rmtv2/depar_wait_segs.v
+lappend SYN_FILES lib_rmt/rmtv2/depar_do_deparsing.v
+lappend SYN_FILES lib_rmt/rmtv2/sub_deparser.v
+lappend SYN_FILES lib_rmt/rmtv2/stage.v
+lappend SYN_FILES lib_rmt/rmtv2/last_stage.v
+lappend SYN_FILES lib_rmt/rmtv2/output_arbiter.v
+lappend SYN_FILES lib_rmt/rmtv2/action/action_engine.v
+lappend SYN_FILES lib_rmt/rmtv2/action/alu_1.v
+lappend SYN_FILES lib_rmt/rmtv2/action/alu_2.v
+lappend SYN_FILES lib_rmt/rmtv2/action/alu_3.v
+lappend SYN_FILES lib_rmt/rmtv2/action/crossbar.v
+lappend SYN_FILES lib_rmt/rmtv2/extract/key_extract.v
+lappend SYN_FILES lib_rmt/rmtv2/extract/key_extract_top.v
+lappend SYN_FILES lib_rmt/rmtv2/lookup/lookup_engine_top.v
+lappend SYN_FILES lib_rmt/rmtv2/lookup/lke_cam_part.v
+lappend SYN_FILES lib_rmt/rmtv2/lookup/lke_ram_part.v
+
+# XDC files
+set XDC_FILES [list fpga.xdc]
+lappend XDC_FILES boot.xdc
+lappend XDC_FILES lib/axis/syn/axis_async_fifo.tcl
+lappend XDC_FILES lib/axis/syn/sync_reset.tcl
+lappend XDC_FILES lib/eth/syn/ptp_clock_cdc.tcl
+lappend XDC_FILES ../../../common/syn/tdma_ber_ch.tcl
+
+# IP files
+set IP_TCL_FILES [list ip/pcie4_uscale_plus_0.tcl]
+lappend IP_TCL_FILES ip/cmac_usplus_0.tcl
+lappend IP_TCL_FILES ip/cmac_usplus_1.tcl
+
+# IPs for RMT pipeline
+lappend IP_TCL_FILES ip/rmt/blk_mem_gen_0.tcl
+lappend IP_TCL_FILES ip/rmt/blk_mem_gen_1.tcl
+lappend IP_TCL_FILES ip/rmt/blk_mem_gen_2.tcl
+lappend IP_TCL_FILES ip/rmt/blk_mem_gen_3.tcl
+lappend IP_TCL_FILES ip/rmt/fifo_generator_512b.tcl
+lappend IP_TCL_FILES ip/rmt/fifo_generator_705b.tcl
+lappend IP_TCL_FILES ip/rmt/parse_act_ram_ip.tcl
+lappend IP_TCL_FILES ip/rmt/page_tbl_16w_32d.tcl
+lappend IP_TCL_FILES ip/rmt/fifo.tcl
+
+
+#############################
+
+create_project -name ${design} -force -dir "${proj_dir}" -part ${device}
+
+read_vhdl -library cam  lib_rmt/xilinx_cam/dmem.vhd
+read_vhdl -library cam  [glob lib_rmt/xilinx_cam/cam*.vhd]
+
+foreach syn $SYN_FILES {
+	add_files -fileset sources_1 $syn
+}
+
+foreach xdc $XDC_FILES {
+	add_files -fileset constrs_1 $xdc
+}
+
+foreach ip_tcl $IP_TCL_FILES {
+	source $ip_tcl
+}
+
+##
+#
+#add_files [glob lib_rmt/rmtv2/*.coe]
+#add_files [glob lib_rmt/rmtv2/*.mif]
+
+# for better simulation
+#config_ip_cache -disable_cache
+#update_ip_catalog
+
+exit
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/tcl/run_impl.tcl ./fpga/mqnic/AU250/fpga_100g/tcl/run_impl.tcl
--- ./fpga-raw/mqnic/AU250/fpga_100g/tcl/run_impl.tcl	1970-01-01 08:00:00.000000000 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/tcl/run_impl.tcl	2022-01-31 13:02:15.010256655 +0800
@@ -0,0 +1,18 @@
+set jobs [lindex $argv 0]
+
+open_project ./project_synth/TProj.xpr
+reset_run impl_1
+#set_property strategy Performance_Explore [get_runs impl_1]
+#set_property steps.phys_opt_design.is_enabled true [get_runs impl_1]
+#set_property STEPS.PHYS_OPT_DESIGN.ARGS.DIRECTIVE Explore [get_runs impl_1]
+#set_property STEPS.PHYS_OPT_DESIGN.ARGS.DIRECTIVE AggressiveExplore [get_runs impl_1]
+#set_property STEPS.PHYS_OPT_DESIGN.ARGS.DIRECTIVE AlternateFlowWithRetiming [get_runs impl_1]
+#set_property STEPS.PHYS_OPT_DESIGN.ARGS.DIRECTIVE ExploreWithHoldFix [get_runs impl_1]
+#set_property STEPS.PLACE_DESIGN.ARGS.DIRECTIVE Explore [get_runs impl_1]
+#set_property STEPS.POST_ROUTE_PHYS_OPT_DESIGN.is_enabled true [get_runs impl_1]
+# set_property STEPS.POST_ROUTE_PHYS_OPT_DESIGN.ARGS.DIRECTIVE Explore [get_runs impl_1]
+#set_property STEPS.POST_ROUTE_PHYS_OPT_DESIGN.ARGS.DIRECTIVE AggressiveExplore [get_runs impl_1]
+launch_runs impl_1 -to_step write_bitstream -jobs ${jobs}
+wait_on_run impl_1
+
+exit
diff --color -uNr --no-dereference ./fpga-raw/mqnic/AU250/fpga_100g/tcl/run_synth.tcl ./fpga/mqnic/AU250/fpga_100g/tcl/run_synth.tcl
--- ./fpga-raw/mqnic/AU250/fpga_100g/tcl/run_synth.tcl	1970-01-01 08:00:00.000000000 +0800
+++ ./fpga/mqnic/AU250/fpga_100g/tcl/run_synth.tcl	2022-01-31 13:02:15.010256655 +0800
@@ -0,0 +1,8 @@
+set jobs [lindex $argv 0]
+
+open_project ./project_synth/TProj.xpr
+reset_run synth_1
+launch_runs synth_1 -jobs ${jobs}
+wait_on_run synth_1
+
+exit
